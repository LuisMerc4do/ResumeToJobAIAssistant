"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/uploadthing";
exports.ids = ["vendor-chunks/uploadthing"];
exports.modules = {

/***/ "(rsc)/./node_modules/uploadthing/dist/chunk-5KWT532U.mjs":
/*!**********************************************************!*\
  !*** ./node_modules/uploadthing/dist/chunk-5KWT532U.mjs ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   maybeParseResponseXML: () => (/* binding */ maybeParseResponseXML)\n/* harmony export */ });\n// src/internal/s3-error-parser.ts\nvar maybeParseResponseXML = (maybeXml)=>{\n    const codeMatch = maybeXml.match(/<Code>(.*?)<\\/Code>/s);\n    const messageMatch = maybeXml.match(/<Message>(.*?)<\\/Message>/s);\n    const code = codeMatch == null ? void 0 : codeMatch[1];\n    const message = messageMatch == null ? void 0 : messageMatch[1];\n    if (!code || !message) return null;\n    return {\n        code: s3CodeToUploadThingCode[code] ?? DEFAULT_ERROR_CODE,\n        message\n    };\n};\nvar DEFAULT_ERROR_CODE = \"UPLOAD_FAILED\";\nvar s3CodeToUploadThingCode = {\n    AccessDenied: \"FORBIDDEN\",\n    // 403 Forbidden\n    EntityTooSmall: \"TOO_SMALL\",\n    // 400 Bad Request\n    EntityTooLarge: \"TOO_LARGE\",\n    // 400 Bad Request\n    ExpiredToken: \"FORBIDDEN\",\n    // 400 Bad Request\n    IncorrectNumberOfFilesInPostRequest: \"TOO_MANY_FILES\",\n    // 400 Bad Request\n    InternalError: \"INTERNAL_SERVER_ERROR\",\n    // 500 Internal Server Error\n    KeyTooLongError: \"KEY_TOO_LONG\",\n    // 400 Bad Request\n    MaxMessageLengthExceeded: \"TOO_LARGE\"\n};\n //# sourceMappingURL=chunk-5KWT532U.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvdXBsb2FkdGhpbmcvZGlzdC9jaHVuay01S1dUNTMyVS5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLGtDQUFrQztBQUNsQyxJQUFJQSx3QkFBd0IsQ0FBQ0M7SUFDM0IsTUFBTUMsWUFBWUQsU0FBU0UsS0FBSyxDQUFDO0lBQ2pDLE1BQU1DLGVBQWVILFNBQVNFLEtBQUssQ0FBQztJQUNwQyxNQUFNRSxPQUFPSCxhQUFhLE9BQU8sS0FBSyxJQUFJQSxTQUFTLENBQUMsRUFBRTtJQUN0RCxNQUFNSSxVQUFVRixnQkFBZ0IsT0FBTyxLQUFLLElBQUlBLFlBQVksQ0FBQyxFQUFFO0lBQy9ELElBQUksQ0FBQ0MsUUFBUSxDQUFDQyxTQUNaLE9BQU87SUFDVCxPQUFPO1FBQUVELE1BQU1FLHVCQUF1QixDQUFDRixLQUFLLElBQUlHO1FBQW9CRjtJQUFRO0FBQzlFO0FBQ0EsSUFBSUUscUJBQXFCO0FBQ3pCLElBQUlELDBCQUEwQjtJQUM1QkUsY0FBYztJQUNkLGdCQUFnQjtJQUNoQkMsZ0JBQWdCO0lBQ2hCLGtCQUFrQjtJQUNsQkMsZ0JBQWdCO0lBQ2hCLGtCQUFrQjtJQUNsQkMsY0FBYztJQUNkLGtCQUFrQjtJQUNsQkMscUNBQXFDO0lBQ3JDLGtCQUFrQjtJQUNsQkMsZUFBZTtJQUNmLDRCQUE0QjtJQUM1QkMsaUJBQWlCO0lBQ2pCLGtCQUFrQjtJQUNsQkMsMEJBQTBCO0FBRTVCO0FBSUUsQ0FDRiwyQ0FBMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9xdWlsbC8uL25vZGVfbW9kdWxlcy91cGxvYWR0aGluZy9kaXN0L2NodW5rLTVLV1Q1MzJVLm1qcz9iZTk3Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNyYy9pbnRlcm5hbC9zMy1lcnJvci1wYXJzZXIudHNcbnZhciBtYXliZVBhcnNlUmVzcG9uc2VYTUwgPSAobWF5YmVYbWwpID0+IHtcbiAgY29uc3QgY29kZU1hdGNoID0gbWF5YmVYbWwubWF0Y2goLzxDb2RlPiguKj8pPFxcL0NvZGU+L3MpO1xuICBjb25zdCBtZXNzYWdlTWF0Y2ggPSBtYXliZVhtbC5tYXRjaCgvPE1lc3NhZ2U+KC4qPyk8XFwvTWVzc2FnZT4vcyk7XG4gIGNvbnN0IGNvZGUgPSBjb2RlTWF0Y2ggPT0gbnVsbCA/IHZvaWQgMCA6IGNvZGVNYXRjaFsxXTtcbiAgY29uc3QgbWVzc2FnZSA9IG1lc3NhZ2VNYXRjaCA9PSBudWxsID8gdm9pZCAwIDogbWVzc2FnZU1hdGNoWzFdO1xuICBpZiAoIWNvZGUgfHwgIW1lc3NhZ2UpXG4gICAgcmV0dXJuIG51bGw7XG4gIHJldHVybiB7IGNvZGU6IHMzQ29kZVRvVXBsb2FkVGhpbmdDb2RlW2NvZGVdID8/IERFRkFVTFRfRVJST1JfQ09ERSwgbWVzc2FnZSB9O1xufTtcbnZhciBERUZBVUxUX0VSUk9SX0NPREUgPSBcIlVQTE9BRF9GQUlMRURcIjtcbnZhciBzM0NvZGVUb1VwbG9hZFRoaW5nQ29kZSA9IHtcbiAgQWNjZXNzRGVuaWVkOiBcIkZPUkJJRERFTlwiLFxuICAvLyA0MDMgRm9yYmlkZGVuXG4gIEVudGl0eVRvb1NtYWxsOiBcIlRPT19TTUFMTFwiLFxuICAvLyA0MDAgQmFkIFJlcXVlc3RcbiAgRW50aXR5VG9vTGFyZ2U6IFwiVE9PX0xBUkdFXCIsXG4gIC8vIDQwMCBCYWQgUmVxdWVzdFxuICBFeHBpcmVkVG9rZW46IFwiRk9SQklEREVOXCIsXG4gIC8vIDQwMCBCYWQgUmVxdWVzdFxuICBJbmNvcnJlY3ROdW1iZXJPZkZpbGVzSW5Qb3N0UmVxdWVzdDogXCJUT09fTUFOWV9GSUxFU1wiLFxuICAvLyA0MDAgQmFkIFJlcXVlc3RcbiAgSW50ZXJuYWxFcnJvcjogXCJJTlRFUk5BTF9TRVJWRVJfRVJST1JcIixcbiAgLy8gNTAwIEludGVybmFsIFNlcnZlciBFcnJvclxuICBLZXlUb29Mb25nRXJyb3I6IFwiS0VZX1RPT19MT05HXCIsXG4gIC8vIDQwMCBCYWQgUmVxdWVzdFxuICBNYXhNZXNzYWdlTGVuZ3RoRXhjZWVkZWQ6IFwiVE9PX0xBUkdFXCJcbiAgLy8gNDAwIEJhZCBSZXF1ZXN0XG59O1xuXG5leHBvcnQge1xuICBtYXliZVBhcnNlUmVzcG9uc2VYTUxcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jaHVuay01S1dUNTMyVS5tanMubWFwIl0sIm5hbWVzIjpbIm1heWJlUGFyc2VSZXNwb25zZVhNTCIsIm1heWJlWG1sIiwiY29kZU1hdGNoIiwibWF0Y2giLCJtZXNzYWdlTWF0Y2giLCJjb2RlIiwibWVzc2FnZSIsInMzQ29kZVRvVXBsb2FkVGhpbmdDb2RlIiwiREVGQVVMVF9FUlJPUl9DT0RFIiwiQWNjZXNzRGVuaWVkIiwiRW50aXR5VG9vU21hbGwiLCJFbnRpdHlUb29MYXJnZSIsIkV4cGlyZWRUb2tlbiIsIkluY29ycmVjdE51bWJlck9mRmlsZXNJblBvc3RSZXF1ZXN0IiwiSW50ZXJuYWxFcnJvciIsIktleVRvb0xvbmdFcnJvciIsIk1heE1lc3NhZ2VMZW5ndGhFeGNlZWRlZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/uploadthing/dist/chunk-5KWT532U.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/uploadthing/dist/chunk-BPTHKJTK.mjs":
/*!**********************************************************!*\
  !*** ./node_modules/uploadthing/dist/chunk-BPTHKJTK.mjs ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   UPLOADTHING_VERSION: () => (/* binding */ UPLOADTHING_VERSION),\n/* harmony export */   VALID_ACTION_TYPES: () => (/* binding */ VALID_ACTION_TYPES),\n/* harmony export */   buildPermissionsInfoHandler: () => (/* binding */ buildPermissionsInfoHandler),\n/* harmony export */   buildRequestHandler: () => (/* binding */ buildRequestHandler),\n/* harmony export */   createBuilder: () => (/* binding */ createBuilder),\n/* harmony export */   defaultErrorFormatter: () => (/* binding */ defaultErrorFormatter),\n/* harmony export */   formatError: () => (/* binding */ formatError),\n/* harmony export */   unsetMarker: () => (/* binding */ unsetMarker)\n/* harmony export */ });\n/* harmony import */ var _chunk_T2XS27LC_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-T2XS27LC.mjs */ \"(rsc)/./node_modules/uploadthing/dist/chunk-T2XS27LC.mjs\");\n/* harmony import */ var _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @uploadthing/shared */ \"(rsc)/./node_modules/@uploadthing/shared/dist/index.mjs\");\n\n// package.json\nvar require_package = (0,_chunk_T2XS27LC_mjs__WEBPACK_IMPORTED_MODULE_0__.__commonJS)({\n    \"package.json\" (exports, module) {\n        module.exports = {\n            name: \"uploadthing\",\n            version: \"5.7.4\",\n            engines: {\n                node: \">=18.13.0\"\n            },\n            license: \"MIT\",\n            exports: {\n                \"./package.json\": \"./package.json\",\n                \"./client\": {\n                    types: \"./dist/client.d.ts\",\n                    import: \"./dist/client.mjs\",\n                    require: \"./dist/client.js\"\n                },\n                \"./server\": {\n                    types: \"./dist/server.d.ts\",\n                    import: \"./dist/server.mjs\",\n                    require: \"./dist/server.js\"\n                },\n                \"./next\": {\n                    types: \"./dist/next.d.ts\",\n                    import: \"./dist/next.mjs\",\n                    require: \"./dist/next.js\"\n                },\n                \"./next-legacy\": {\n                    types: \"./dist/next-legacy.d.ts\",\n                    import: \"./dist/next-legacy.mjs\",\n                    require: \"./dist/next-legacy.js\"\n                },\n                \"./express\": {\n                    import: \"./dist/express.mjs\",\n                    types: \"./dist/express.d.ts\",\n                    require: \"./dist/express.js\"\n                },\n                \"./tw\": {\n                    types: \"./dist/tw.d.ts\",\n                    import: \"./dist/tw.mjs\",\n                    require: \"./dist/tw.js\"\n                },\n                \"./fastify\": {\n                    types: \"./dist/fastify.d.ts\",\n                    import: \"./dist/fastify.mjs\",\n                    require: \"./dist/fastify.js\"\n                },\n                \"./h3\": {\n                    types: \"./dist/h3.d.ts\",\n                    import: \"./dist/h3.mjs\",\n                    require: \"./dist/h3.js\"\n                }\n            },\n            files: [\n                \"dist\"\n            ],\n            publishConfig: {\n                access: \"public\"\n            },\n            typesVersions: {\n                \"*\": {\n                    client: [\n                        \"dist/client.d.ts\"\n                    ],\n                    server: [\n                        \"dist/server.d.ts\"\n                    ],\n                    next: [\n                        \"dist/next.d.ts\"\n                    ],\n                    \"next-legacy\": [\n                        \"dist/next-legacy.d.ts\"\n                    ],\n                    tw: [\n                        \"dist/tw.d.ts\"\n                    ],\n                    express: [\n                        \"dist/express.d.ts\"\n                    ],\n                    fastify: [\n                        \"dist/fastify.d.ts\"\n                    ],\n                    h3: [\n                        \"dist/h3.d.ts\"\n                    ]\n                }\n            },\n            scripts: {\n                lint: 'eslint \"**/*.{ts,tsx}\" --max-warnings 0',\n                build: \"tsup\",\n                clean: \"git clean -xdf dist node_modules\",\n                dev: \"tsup --watch\",\n                test: \"vitest run\",\n                \"test:watch\": \"vitest\",\n                typecheck: \"tsc --noEmit\"\n            },\n            dependencies: {\n                \"@uploadthing/mime-types\": \"^0.2.2\",\n                \"@uploadthing/shared\": \"^5.2.7\"\n            },\n            devDependencies: {\n                \"@types/express\": \"^4.17.17\",\n                \"@types/react\": \"18.2.33\",\n                \"@uploadthing/eslint-config\": \"0.2.0\",\n                \"@uploadthing/tsconfig\": \"0.1.0\",\n                \"@uploadthing/tsup-config\": \"0.1.0\",\n                eslint: \"^8.47.0\",\n                express: \"^4.18.2\",\n                fastify: \"^4.23.2\",\n                h3: \"^1.8.1\",\n                next: \"14.0.1\",\n                \"solid-js\": \"^1.7.11\",\n                tailwindcss: \"^3.3.2\",\n                tsup: \"6.7.0\",\n                \"type-fest\": \"^3.11.1\",\n                typescript: \"^5.1.6\",\n                undici: \"^5.20.0\",\n                vitest: \"^0.30.1\",\n                zod: \"^3.22.3\"\n            },\n            eslintConfig: {\n                root: true,\n                extends: [\n                    \"@uploadthing/eslint-config/base\"\n                ]\n            }\n        };\n    }\n});\n// src/constants.ts\nvar packageJson = require_package();\nif (!packageJson.version) throw new Error(\"no version found in package.json\");\nvar UPLOADTHING_VERSION = packageJson.version;\n// src/internal/error-formatter.ts\nfunction defaultErrorFormatter(error) {\n    return {\n        message: error.message\n    };\n}\nfunction formatError(error, router) {\n    var _a;\n    const errorFormatter = ((_a = router[Object.keys(router)[0]]) == null ? void 0 : _a._def.errorFormatter) ?? defaultErrorFormatter;\n    return errorFormatter(error);\n}\n// src/internal/types.ts\nvar unsetMarker = \"unsetMarker\";\nvar VALID_ACTION_TYPES = [\n    \"upload\",\n    \"failure\"\n];\n// src/internal/handler.ts\n\n// src/internal/dev-hook.ts\n\nvar isValidResponse = (response)=>{\n    if (!response.ok) return false;\n    if (response.status >= 400) return false;\n    if (!response.headers.has(\"x-uploadthing-version\")) return false;\n    return true;\n};\nvar conditionalDevServer = async (fileKey)=>{\n    if (false) {}\n    const fileData = await (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.pollForFileData)(fileKey, async (json)=>{\n        const file = json.fileData;\n        let callbackUrl = file.callbackUrl + `?slug=${file.callbackSlug}`;\n        if (!callbackUrl.startsWith(\"http\")) callbackUrl = \"http://\" + callbackUrl;\n        console.log(\"[UT] SIMULATING FILE UPLOAD WEBHOOK CALLBACK\", callbackUrl);\n        const response = await fetch(callbackUrl, {\n            method: \"POST\",\n            body: JSON.stringify({\n                status: \"uploaded\",\n                metadata: JSON.parse(file.metadata ?? \"{}\"),\n                file: {\n                    url: `https://utfs.io/f/${encodeURIComponent(fileKey)}`,\n                    key: fileKey,\n                    name: file.fileName,\n                    size: file.fileSize\n                }\n            }),\n            headers: {\n                \"uploadthing-hook\": \"callback\"\n            }\n        });\n        if (isValidResponse(response)) {\n            console.log(\"[UT] Successfully simulated callback for file\", fileKey);\n        } else {\n            console.error(\"[UT] Failed to simulate callback for file. Is your webhook configured correctly?\", fileKey);\n        }\n        return file;\n    });\n    if (fileData !== null) return fileData;\n    console.error(`[UT] Failed to simulate callback for file ${fileKey}`);\n    throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n        code: \"UPLOAD_FAILED\",\n        message: \"File took too long to upload\"\n    });\n};\n// src/internal/parser.ts\nfunction getParseFn(parser) {\n    if (typeof parser.parse === \"function\") {\n        return parser.parse;\n    }\n    throw new Error(\"Invalid parser\");\n}\n// src/internal/handler.ts\nvar fileCountLimitHit = (files, routeConfig)=>{\n    var _a;\n    const counts = {};\n    files.forEach((file)=>{\n        const type = (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.getTypeFromFileName)(file, (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.objectKeys)(routeConfig));\n        if (!counts[type]) {\n            counts[type] = 1;\n        } else {\n            counts[type] += 1;\n        }\n    });\n    for(const _key in counts){\n        const key = _key;\n        const count = counts[key];\n        const limit = (_a = routeConfig[key]) == null ? void 0 : _a.maxFileCount;\n        if (!limit) {\n            console.error(routeConfig, key);\n            throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n                code: \"BAD_REQUEST\",\n                message: \"Invalid config during file count\",\n                cause: `Expected route config to have a maxFileCount for key ${key} but none was found.`\n            });\n        }\n        if (count > limit) {\n            return {\n                limitHit: true,\n                type: key,\n                limit,\n                count\n            };\n        }\n    }\n    return {\n        limitHit: false\n    };\n};\nvar getHeader = (req, key)=>{\n    if (req.headers instanceof Headers) {\n        return req.headers.get(key);\n    }\n    return req.headers[key];\n};\nvar buildRequestHandler = (opts)=>{\n    return async (input)=>{\n        if (true) {\n            console.log(\"[UT] UploadThing dev server is now running!\");\n        }\n        const { req, res, event } = input;\n        const { router, config } = opts;\n        const preferredOrEnvSecret = (config == null ? void 0 : config.uploadthingSecret) ?? process.env.UPLOADTHING_SECRET;\n        const params = new URL(req.url ?? \"\", (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.getUploadthingUrl)()).searchParams;\n        const uploadthingHook = getHeader(req, \"uploadthing-hook\") ?? void 0;\n        const slug = params.get(\"slug\") ?? void 0;\n        const actionType = params.get(\"actionType\") ?? void 0;\n        if (!slug) return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n            code: \"BAD_REQUEST\",\n            message: \"No slug provided\"\n        });\n        if (slug && typeof slug !== \"string\") {\n            return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n                code: \"BAD_REQUEST\",\n                message: \"`slug` must be a string\",\n                cause: `Expected slug to be of type 'string', got '${typeof slug}'`\n            });\n        }\n        if (actionType && typeof actionType !== \"string\") {\n            return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n                code: \"BAD_REQUEST\",\n                message: \"`actionType` must be a string\",\n                cause: `Expected actionType to be of type 'string', got '${typeof actionType}'`\n            });\n        }\n        if (uploadthingHook && typeof uploadthingHook !== \"string\") {\n            return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n                code: \"BAD_REQUEST\",\n                message: \"`uploadthingHook` must be a string\",\n                cause: `Expected uploadthingHook to be of type 'string', got '${typeof uploadthingHook}'`\n            });\n        }\n        if (!preferredOrEnvSecret) {\n            return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n                code: \"BAD_REQUEST\",\n                message: `Please set your preferred secret in ${slug} router's config or set UPLOADTHING_SECRET in your env file`,\n                cause: \"No secret provided\"\n            });\n        }\n        const uploadable = router[slug];\n        if (!uploadable) {\n            return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n                code: \"NOT_FOUND\",\n                message: `No file route found for slug ${slug}`\n            });\n        }\n        if (uploadthingHook === \"callback\") {\n            const maybeReqBody = await (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.safeParseJSON)(req);\n            if (maybeReqBody instanceof Error) {\n                return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n                    code: \"BAD_REQUEST\",\n                    message: \"Invalid request body\",\n                    cause: maybeReqBody\n                });\n            }\n            await uploadable.resolver({\n                file: maybeReqBody.file,\n                metadata: maybeReqBody.metadata\n            });\n            return {\n                status: 200\n            };\n        }\n        if (!actionType || !VALID_ACTION_TYPES.includes(actionType)) {\n            return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n                code: \"BAD_REQUEST\",\n                cause: `Invalid action type ${actionType}`,\n                message: `Expected ${VALID_ACTION_TYPES.map((x)=>`\"${x}\"`).join(\", \").replace(/,(?!.*,)/, \" or\")} but got \"${\"a\"}\"`\n            });\n        }\n        switch(actionType){\n            case \"upload\":\n                {\n                    const maybeInput = await (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.safeParseJSON)(req);\n                    if (maybeInput instanceof Error) {\n                        return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n                            code: \"BAD_REQUEST\",\n                            message: \"Invalid request body\",\n                            cause: maybeInput\n                        });\n                    }\n                    const { files, input: userInput } = maybeInput;\n                    let parsedInput = {};\n                    try {\n                        const inputParser = uploadable._def.inputParser;\n                        parsedInput = await getParseFn(inputParser)(userInput);\n                    } catch (error) {\n                        console.error(error);\n                        return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n                            code: \"BAD_REQUEST\",\n                            message: \"Invalid input.\",\n                            cause: error\n                        });\n                    }\n                    let metadata = {};\n                    try {\n                        metadata = await uploadable._def.middleware({\n                            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                            req,\n                            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                            res,\n                            event,\n                            input: parsedInput\n                        });\n                    } catch (error) {\n                        console.error(error);\n                        return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n                            code: \"INTERNAL_SERVER_ERROR\",\n                            message: \"Failed to run middleware.\",\n                            cause: error\n                        });\n                    }\n                    if (!Array.isArray(files) || !files.every((f)=>typeof f === \"string\")) return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n                        code: \"BAD_REQUEST\",\n                        message: \"Files must be a string array\",\n                        cause: `Expected files to be of type 'string[]', got '${JSON.stringify(files)}'`\n                    });\n                    let parsedConfig;\n                    try {\n                        parsedConfig = (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.fillInputRouteConfig)(uploadable._def.routerConfig);\n                    } catch (error) {\n                        console.error(error);\n                        return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n                            code: \"BAD_REQUEST\",\n                            message: \"Invalid config.\",\n                            cause: error\n                        });\n                    }\n                    try {\n                        const { limitHit, count, limit, type } = fileCountLimitHit(files, parsedConfig);\n                        if (limitHit) {\n                            return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n                                code: \"BAD_REQUEST\",\n                                message: \"File limit exceeded\",\n                                cause: `You uploaded ${count} files of type '${type}', but the limit for that type is ${limit}`\n                            });\n                        }\n                    } catch (error) {\n                        console.error(error);\n                        return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n                            code: \"BAD_REQUEST\",\n                            message: \"Invalid config.\",\n                            cause: error\n                        });\n                    }\n                    const uploadthingApiResponse = await fetch((0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.generateUploadThingURL)(\"/api/prepareUpload\"), {\n                        method: \"POST\",\n                        body: JSON.stringify({\n                            files,\n                            routeConfig: parsedConfig,\n                            metadata,\n                            callbackUrl: (config == null ? void 0 : config.callbackUrl) ?? (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.getUploadthingUrl)(),\n                            callbackSlug: slug\n                        }),\n                        headers: {\n                            \"Content-Type\": \"application/json\",\n                            \"x-uploadthing-api-key\": preferredOrEnvSecret,\n                            \"x-uploadthing-version\": UPLOADTHING_VERSION\n                        }\n                    });\n                    const parsedResponse = await (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.safeParseJSON)(uploadthingApiResponse);\n                    if (!uploadthingApiResponse.ok || parsedResponse instanceof Error) {\n                        console.error(\"[UT] unable to get presigned urls\");\n                        return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n                            code: \"URL_GENERATION_FAILED\",\n                            message: \"Unable to get presigned urls\",\n                            cause: parsedResponse\n                        });\n                    }\n                    if (true) {\n                        for (const file of parsedResponse){\n                            void conditionalDevServer(file.key);\n                        }\n                    }\n                    return {\n                        body: parsedResponse,\n                        status: 200\n                    };\n                }\n            case \"failure\":\n                {\n                    const maybeReqBody = await (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.safeParseJSON)(req);\n                    if (maybeReqBody instanceof Error) {\n                        return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n                            code: \"BAD_REQUEST\",\n                            message: \"Invalid request body\",\n                            cause: maybeReqBody\n                        });\n                    }\n                    const { fileKey } = maybeReqBody;\n                    const uploadthingApiResponse = await fetch((0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.generateUploadThingURL)(\"/api/failureCallback\"), {\n                        method: \"POST\",\n                        body: JSON.stringify({\n                            fileKey\n                        }),\n                        headers: {\n                            \"Content-Type\": \"application/json\",\n                            \"x-uploadthing-api-key\": preferredOrEnvSecret,\n                            \"x-uploadthing-version\": UPLOADTHING_VERSION\n                        }\n                    });\n                    if (!uploadthingApiResponse.ok) {\n                        console.error(\"[UT] failed to mark upload as failed\");\n                        const parsedResponse = await (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.safeParseJSON)(uploadthingApiResponse);\n                        return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n                            code: \"URL_GENERATION_FAILED\",\n                            message: \"Unable to get presigned urls\",\n                            cause: parsedResponse\n                        });\n                    }\n                    try {\n                        uploadable._def.onUploadError({\n                            error: new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n                                code: \"UPLOAD_FAILED\",\n                                message: `Upload failed for ${fileKey}`\n                            }),\n                            fileKey\n                        });\n                    } catch (error) {\n                        console.error(\"[UT] Failed to run onUploadError callback. You probably shouldn't be throwing errors in your callback.\");\n                        console.error(error);\n                        return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n                            code: \"INTERNAL_SERVER_ERROR\",\n                            message: \"Failed to run onUploadError callback\",\n                            cause: error\n                        });\n                    }\n                    return {\n                        status: 200\n                    };\n                }\n            default:\n                {\n                    return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n                        code: \"BAD_REQUEST\",\n                        message: `Invalid action type`\n                    });\n                }\n        }\n    };\n};\nvar buildPermissionsInfoHandler = (opts)=>{\n    return ()=>{\n        const r = opts.router;\n        const permissions = Object.keys(r).map((k)=>{\n            const route = r[k];\n            const config = (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.fillInputRouteConfig)(route._def.routerConfig);\n            return {\n                slug: k,\n                config\n            };\n        });\n        return permissions;\n    };\n};\n// src/internal/upload-builder.ts\nfunction internalCreateBuilder(initDef = {}) {\n    const _def = {\n        // Default router config\n        routerConfig: {\n            image: {\n                maxFileSize: \"4MB\"\n            }\n        },\n        inputParser: {\n            parse: ()=>({}),\n            _input: {},\n            _output: {}\n        },\n        middleware: ()=>({}),\n        onUploadError: ()=>({}),\n        errorFormatter: initDef.errorFormatter ?? defaultErrorFormatter,\n        // Overload with properties passed in\n        ...initDef\n    };\n    return {\n        input (userParser) {\n            return internalCreateBuilder({\n                ..._def,\n                inputParser: userParser\n            });\n        },\n        middleware (userMiddleware) {\n            return internalCreateBuilder({\n                ..._def,\n                middleware: userMiddleware\n            });\n        },\n        onUploadComplete (userUploadComplete) {\n            return {\n                _def,\n                resolver: userUploadComplete\n            };\n        },\n        onUploadError (userOnUploadError) {\n            return internalCreateBuilder({\n                ..._def,\n                onUploadError: userOnUploadError\n            });\n        }\n    };\n}\nfunction createBuilder(opts) {\n    return (input)=>{\n        return internalCreateBuilder({\n            routerConfig: input,\n            ...opts\n        });\n    };\n}\n //# sourceMappingURL=chunk-BPTHKJTK.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/uploadthing/dist/chunk-BPTHKJTK.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/uploadthing/dist/chunk-F3SNDKZQ.mjs":
/*!**********************************************************!*\
  !*** ./node_modules/uploadthing/dist/chunk-F3SNDKZQ.mjs ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   UTApi: () => (/* binding */ UTApi),\n/* harmony export */   createServerHandler: () => (/* binding */ createServerHandler),\n/* harmony export */   createUploadthing: () => (/* binding */ createUploadthing),\n/* harmony export */   extractRouterConfig: () => (/* binding */ extractRouterConfig),\n/* harmony export */   utapi: () => (/* binding */ utapi)\n/* harmony export */ });\n/* harmony import */ var _chunk_5KWT532U_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-5KWT532U.mjs */ \"(rsc)/./node_modules/uploadthing/dist/chunk-5KWT532U.mjs\");\n/* harmony import */ var _chunk_WPSY3MFJ_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chunk-WPSY3MFJ.mjs */ \"(rsc)/./node_modules/uploadthing/dist/chunk-WPSY3MFJ.mjs\");\n/* harmony import */ var _chunk_BPTHKJTK_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./chunk-BPTHKJTK.mjs */ \"(rsc)/./node_modules/uploadthing/dist/chunk-BPTHKJTK.mjs\");\n/* harmony import */ var _uploadthing_shared__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @uploadthing/shared */ \"(rsc)/./node_modules/@uploadthing/shared/dist/index.mjs\");\n\n\n\n// src/server.ts\n\n// src/sdk/index.ts\n\n// src/sdk/utils.ts\n\nfunction guardServerOnly() {\n    if (false) {}\n}\nfunction getApiKeyOrThrow(apiKey) {\n    if (apiKey) return apiKey;\n    if (process.env.UPLOADTHING_SECRET) return process.env.UPLOADTHING_SECRET;\n    throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_3__.UploadThingError({\n        code: \"MISSING_ENV\",\n        message: \"Missing `UPLOADTHING_SECRET` env variable.\"\n    });\n}\nvar uploadFilesInternal = async (data, opts)=>{\n    const fileData = data.files.map((file)=>({\n            name: file.name ?? \"unnamed-blob\",\n            type: file.type,\n            size: file.size\n        }));\n    const res = await opts.fetch((0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_3__.generateUploadThingURL)(\"/api/uploadFiles\"), {\n        method: \"POST\",\n        headers: opts.utRequestHeaders,\n        cache: \"no-store\",\n        body: JSON.stringify({\n            files: fileData,\n            metadata: data.metadata,\n            contentDisposition: data.contentDisposition\n        })\n    });\n    if (!res.ok) {\n        const error = await _uploadthing_shared__WEBPACK_IMPORTED_MODULE_3__.UploadThingError.fromResponse(res);\n        throw error;\n    }\n    const clonedRes = res.clone();\n    const json = await res.json();\n    if (\"error\" in json) {\n        const error = await _uploadthing_shared__WEBPACK_IMPORTED_MODULE_3__.UploadThingError.fromResponse(clonedRes);\n        throw error;\n    }\n    const uploads = await Promise.allSettled(data.files.map(async (file, i)=>{\n        const { presignedUrl, fields, key, fileUrl } = json.data[i];\n        if (!presignedUrl || !fields) {\n            throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_3__.UploadThingError({\n                code: \"URL_GENERATION_FAILED\",\n                message: \"Failed to generate presigned URL\",\n                cause: JSON.stringify(json.data[i])\n            });\n        }\n        const formData = new FormData();\n        formData.append(\"Content-Type\", file.type);\n        Object.entries(fields).forEach(([key2, value])=>{\n            formData.append(key2, value);\n        });\n        formData.append(\"file\", // Handles case when there is no file name\n        file.name ? file : Object.assign(file, {\n            name: \"unnamed-blob\"\n        }));\n        const s3res = await opts.fetch(presignedUrl, {\n            method: \"POST\",\n            body: formData,\n            headers: new Headers({\n                Accept: \"application/xml\"\n            })\n        });\n        if (!s3res.ok) {\n            await opts.fetch((0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_3__.generateUploadThingURL)(\"/api/failureCallback\"), {\n                method: \"POST\",\n                body: JSON.stringify({\n                    fileKey: fields.key\n                }),\n                headers: opts.utRequestHeaders\n            });\n            const text = await s3res.text();\n            const parsed = (0,_chunk_5KWT532U_mjs__WEBPACK_IMPORTED_MODULE_0__.maybeParseResponseXML)(text);\n            if (parsed == null ? void 0 : parsed.message) {\n                throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_3__.UploadThingError({\n                    code: \"UPLOAD_FAILED\",\n                    message: parsed.message\n                });\n            }\n            throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_3__.UploadThingError({\n                code: \"UPLOAD_FAILED\",\n                message: \"Failed to upload file to storage provider\",\n                cause: s3res\n            });\n        }\n        await (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_3__.pollForFileData)(key);\n        return {\n            key,\n            url: fileUrl,\n            name: file.name,\n            size: file.size\n        };\n    }));\n    return uploads.map((upload)=>{\n        if (upload.status === \"fulfilled\") {\n            const data2 = upload.value;\n            return {\n                data: data2,\n                error: null\n            };\n        }\n        const reason = upload.reason;\n        const error = _uploadthing_shared__WEBPACK_IMPORTED_MODULE_3__.UploadThingError.toObject(reason);\n        return {\n            data: null,\n            error\n        };\n    });\n};\n// src/sdk/index.ts\nvar UTApi = class {\n    constructor(opts){\n        this.fetch = (opts == null ? void 0 : opts.fetch) ?? globalThis.fetch;\n        this.apiKey = (opts == null ? void 0 : opts.apiKey) ?? process.env.UPLOADTHING_SECRET;\n        this.defaultHeaders = {\n            \"Content-Type\": \"application/json\",\n            \"x-uploadthing-api-key\": this.apiKey,\n            \"x-uploadthing-version\": _chunk_BPTHKJTK_mjs__WEBPACK_IMPORTED_MODULE_2__.UPLOADTHING_VERSION\n        };\n    }\n    async requestUploadThing(pathname, body, fallbackErrorMessage) {\n        getApiKeyOrThrow();\n        const res = await this.fetch((0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_3__.generateUploadThingURL)(pathname), {\n            method: \"POST\",\n            cache: \"no-store\",\n            headers: this.defaultHeaders,\n            body: JSON.stringify(body)\n        });\n        const json = await res.json();\n        if (!res.ok || \"error\" in json) {\n            console.error(\"[UT] Error:\", json);\n            throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_3__.UploadThingError({\n                code: \"INTERNAL_SERVER_ERROR\",\n                message: \"error\" in json && typeof json.error === \"string\" ? json.error : fallbackErrorMessage\n            });\n        }\n        return json;\n    }\n    /**\n   * @param {FileEsque | FileEsque[]} files The file(s) to upload\n   * @param {Json} metadata JSON-parseable metadata to attach to the uploaded file(s)\n   *\n   * @example\n   * await uploadFiles(new File([\"foo\"], \"foo.txt\"));\n   *\n   * @example\n   * await uploadFiles([\n   *   new File([\"foo\"], \"foo.txt\"),\n   *   new File([\"bar\"], \"bar.txt\"),\n   * ]);\n   */ async uploadFiles(files, metadata = {}, contentDisposition = \"inline\") {\n        guardServerOnly();\n        (0,_chunk_WPSY3MFJ_mjs__WEBPACK_IMPORTED_MODULE_1__.incompatibleNodeGuard)();\n        const filesToUpload = Array.isArray(files) ? files : [\n            files\n        ];\n        const uploads = await uploadFilesInternal({\n            files: filesToUpload,\n            metadata,\n            contentDisposition\n        }, {\n            fetch: this.fetch,\n            utRequestHeaders: this.defaultHeaders\n        });\n        const uploadFileResponse = Array.isArray(files) ? uploads : uploads[0];\n        return uploadFileResponse;\n    }\n    /**\n   * @param {string} url The URL of the file to upload\n   * @param {Json} metadata JSON-parseable metadata to attach to the uploaded file(s)\n   *\n   * @example\n   * await uploadFileFromUrl(\"https://uploadthing.com/f/2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\");\n   *\n   * @example\n   * await uploadFileFromUrl([\n   *   \"https://uploadthing.com/f/2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\",\n   *   \"https://uploadthing.com/f/1649353b-04ea-48a2-9db7-31de7f562c8d_image2.jpg\"\n   * ])\n   */ async uploadFilesFromUrl(urls, metadata = {}, contentDisposition = \"inline\") {\n        guardServerOnly();\n        const fileUrls = Array.isArray(urls) ? urls : [\n            urls\n        ];\n        const formData = new FormData();\n        formData.append(\"metadata\", JSON.stringify(metadata));\n        const filesToUpload = await Promise.all(fileUrls.map(async (url)=>{\n            if (typeof url === \"string\") url = new URL(url);\n            const filename = url.pathname.split(\"/\").pop() ?? \"unknown-filename\";\n            const fileResponse = await fetch(url);\n            if (!fileResponse.ok) {\n                throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_3__.UploadThingError({\n                    code: \"BAD_REQUEST\",\n                    message: \"Failed to download requested file.\",\n                    cause: fileResponse\n                });\n            }\n            const blob = await fileResponse.blob();\n            return Object.assign(blob, {\n                name: filename\n            });\n        }));\n        const uploads = await uploadFilesInternal({\n            files: filesToUpload,\n            metadata,\n            contentDisposition\n        }, {\n            fetch: this.fetch,\n            utRequestHeaders: this.defaultHeaders\n        });\n        const uploadFileResponse = Array.isArray(urls) ? uploads : uploads[0];\n        return uploadFileResponse;\n    }\n    /**\n   * Request to delete files from UploadThing storage.\n   * @param {string | string[]} fileKeys\n   *\n   * @example\n   * await deleteFiles(\"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\");\n   *\n   * @example\n   * await deleteFiles([\"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\",\"1649353b-04ea-48a2-9db7-31de7f562c8d_image2.jpg\"])\n   */ async deleteFiles(fileKeys) {\n        guardServerOnly();\n        if (!Array.isArray(fileKeys)) fileKeys = [\n            fileKeys\n        ];\n        return this.requestUploadThing(\"/api/deleteFile\", {\n            fileKeys\n        }, \"An unknown error occured while deleting files.\");\n    }\n    /**\n   * Request file URLs from UploadThing storage.\n   * @param {string | string[]} fileKeys\n   *\n   * @example\n   * const data = await getFileUrls(\"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\");\n   * console.log(data); // [{key: \"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\", url: \"https://uploadthing.com/f/2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\"}]\n   *\n   * @example\n   * const data = await getFileUrls([\"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\",\"1649353b-04ea-48a2-9db7-31de7f562c8d_image2.jpg\"])\n   * console.log(data) // [{key: \"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\", url: \"https://uploadthing.com/f/2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\" },{key: \"1649353b-04ea-48a2-9db7-31de7f562c8d_image2.jpg\", url: \"https://uploadthing.com/f/1649353b-04ea-48a2-9db7-31de7f562c8d_image2.jpg\"}]\n   */ async getFileUrls(fileKeys) {\n        guardServerOnly();\n        (0,_chunk_WPSY3MFJ_mjs__WEBPACK_IMPORTED_MODULE_1__.incompatibleNodeGuard)();\n        if (!Array.isArray(fileKeys)) fileKeys = [\n            fileKeys\n        ];\n        const json = await this.requestUploadThing(\"/api/getFileUrl\", {\n            fileKeys\n        }, \"An unknown error occured while retrieving file URLs.\");\n        return json.data;\n    }\n    /**\n   * Request file list from UploadThing storage.\n   *\n   * @example\n   * const data = await listFiles();\n   * console.log(data); // { key: \"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\", id: \"2e0fdb64-9957-4262-8e45-f372ba903ac8\" }\n   */ async listFiles() {\n        guardServerOnly();\n        (0,_chunk_WPSY3MFJ_mjs__WEBPACK_IMPORTED_MODULE_1__.incompatibleNodeGuard)();\n        const json = await this.requestUploadThing(\"/api/listFiles\", {}, \"An unknown error occured while listing files.\");\n        return json.files;\n    }\n    async renameFile(updates) {\n        guardServerOnly();\n        (0,_chunk_WPSY3MFJ_mjs__WEBPACK_IMPORTED_MODULE_1__.incompatibleNodeGuard)();\n        if (!Array.isArray(updates)) updates = [\n            updates\n        ];\n        return this.requestUploadThing(\"/api/renameFile\", {\n            updates\n        }, \"An unknown error occured while renaming files.\");\n    }\n    async getUsageInfo() {\n        guardServerOnly();\n        (0,_chunk_WPSY3MFJ_mjs__WEBPACK_IMPORTED_MODULE_1__.incompatibleNodeGuard)();\n        return this.requestUploadThing(\"/api/getUsageInfo\", {}, \"An unknown error occured while getting usage info.\");\n    }\n};\nvar utapi = new UTApi();\n// src/server.ts\nvar createUploadthing = (opts)=>(0,_chunk_BPTHKJTK_mjs__WEBPACK_IMPORTED_MODULE_2__.createBuilder)(opts);\nvar createServerHandler = (opts)=>{\n    (0,_chunk_WPSY3MFJ_mjs__WEBPACK_IMPORTED_MODULE_1__.incompatibleNodeGuard)();\n    const requestHandler = (0,_chunk_BPTHKJTK_mjs__WEBPACK_IMPORTED_MODULE_2__.buildRequestHandler)(opts);\n    const POST = async (request)=>{\n        const req = request instanceof Request ? request : request.request;\n        const response = await requestHandler({\n            req\n        });\n        if (response instanceof _uploadthing_shared__WEBPACK_IMPORTED_MODULE_3__.UploadThingError) {\n            return new Response(JSON.stringify((0,_chunk_BPTHKJTK_mjs__WEBPACK_IMPORTED_MODULE_2__.formatError)(response, opts.router)), {\n                status: (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_3__.getStatusCodeFromError)(response),\n                headers: {\n                    \"x-uploadthing-version\": _chunk_BPTHKJTK_mjs__WEBPACK_IMPORTED_MODULE_2__.UPLOADTHING_VERSION\n                }\n            });\n        }\n        if (response.status !== 200) {\n            return new Response(\"An unknown error occured\", {\n                status: 500,\n                headers: {\n                    \"x-uploadthing-version\": _chunk_BPTHKJTK_mjs__WEBPACK_IMPORTED_MODULE_2__.UPLOADTHING_VERSION\n                }\n            });\n        }\n        return new Response(JSON.stringify(response.body), {\n            status: response.status,\n            headers: {\n                \"x-uploadthing-version\": _chunk_BPTHKJTK_mjs__WEBPACK_IMPORTED_MODULE_2__.UPLOADTHING_VERSION\n            }\n        });\n    };\n    const getBuildPerms = (0,_chunk_BPTHKJTK_mjs__WEBPACK_IMPORTED_MODULE_2__.buildPermissionsInfoHandler)(opts);\n    const GET = (request)=>{\n        const _req = request instanceof Request ? request : request.request;\n        return new Response(JSON.stringify(getBuildPerms()), {\n            status: 200,\n            headers: {\n                \"x-uploadthing-version\": _chunk_BPTHKJTK_mjs__WEBPACK_IMPORTED_MODULE_2__.UPLOADTHING_VERSION\n            }\n        });\n    };\n    return {\n        GET,\n        POST\n    };\n};\nvar extractRouterConfig = (router)=>(0,_chunk_BPTHKJTK_mjs__WEBPACK_IMPORTED_MODULE_2__.buildPermissionsInfoHandler)({\n        router\n    })();\n //# sourceMappingURL=chunk-F3SNDKZQ.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvdXBsb2FkdGhpbmcvZGlzdC9jaHVuay1GM1NOREtaUS5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBRThCO0FBR0E7QUFPQTtBQUU5QixnQkFBZ0I7QUFDb0Y7QUFFcEcsbUJBQW1CO0FBQzRHO0FBRS9ILG1CQUFtQjtBQUtVO0FBQzdCLFNBQVNjO0lBQ1AsSUFBSSxLQUE2QixFQUFFLEVBS2xDO0FBQ0g7QUFDQSxTQUFTRyxpQkFBaUJDLE1BQU07SUFDOUIsSUFBSUEsUUFDRixPQUFPQTtJQUNULElBQUlDLFFBQVFDLEdBQUcsQ0FBQ0Msa0JBQWtCLEVBQ2hDLE9BQU9GLFFBQVFDLEdBQUcsQ0FBQ0Msa0JBQWtCO0lBQ3ZDLE1BQU0sSUFBSWIsaUVBQWdCQSxDQUFDO1FBQ3pCTyxNQUFNO1FBQ05DLFNBQVM7SUFDWDtBQUNGO0FBQ0EsSUFBSU0sc0JBQXNCLE9BQU9DLE1BQU1DO0lBQ3JDLE1BQU1DLFdBQVdGLEtBQUtHLEtBQUssQ0FBQ0MsR0FBRyxDQUFDLENBQUNDLE9BQVU7WUFDekNDLE1BQU1ELEtBQUtDLElBQUksSUFBSTtZQUNuQkMsTUFBTUYsS0FBS0UsSUFBSTtZQUNmQyxNQUFNSCxLQUFLRyxJQUFJO1FBQ2pCO0lBQ0EsTUFBTUMsTUFBTSxNQUFNUixLQUFLUyxLQUFLLENBQUN2QiwyRUFBc0JBLENBQUMscUJBQXFCO1FBQ3ZFd0IsUUFBUTtRQUNSQyxTQUFTWCxLQUFLWSxnQkFBZ0I7UUFDOUJDLE9BQU87UUFDUEMsTUFBTUMsS0FBS0MsU0FBUyxDQUFDO1lBQ25CZCxPQUFPRDtZQUNQZ0IsVUFBVWxCLEtBQUtrQixRQUFRO1lBQ3ZCQyxvQkFBb0JuQixLQUFLbUIsa0JBQWtCO1FBQzdDO0lBQ0Y7SUFDQSxJQUFJLENBQUNWLElBQUlXLEVBQUUsRUFBRTtRQUNYLE1BQU1DLFFBQVEsTUFBTXBDLGlFQUFnQkEsQ0FBQ3FDLFlBQVksQ0FBQ2I7UUFDbEQsTUFBTVk7SUFDUjtJQUNBLE1BQU1FLFlBQVlk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QUNYLE1BQU1RLE9BQU9SLG1CQUFtQkUsVUFBVUYsVUFBVUEsUUFBUUEsT0FBTztRQUNuRSxPQUFPLElBQUlJLFNBQVMvRSxLQUFLQyxTQUFTLENBQUNnRixrQkFBa0I7WUFDbkQ3QyxRQUFRO1lBQ1J4QyxTQUFTO2dCQUNQLHlCQUF5QmpDLG9FQUFtQkE7WUFDOUM7UUFDRjtJQUNGO0lBQ0EsT0FBTztRQUFFdUg7UUFBS1I7SUFBSztBQUNyQjtBQUNBLElBQUlVLHNCQUFzQixDQUFDSixTQUFXcEgsZ0ZBQTJCQSxDQUFDO1FBQUVvSDtJQUFPO0FBUXpFLENBQ0YsMkNBQTJDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcXVpbGwvLi9ub2RlX21vZHVsZXMvdXBsb2FkdGhpbmcvZGlzdC9jaHVuay1GM1NOREtaUS5tanM/ZmVmYyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBtYXliZVBhcnNlUmVzcG9uc2VYTUxcbn0gZnJvbSBcIi4vY2h1bmstNUtXVDUzMlUubWpzXCI7XG5pbXBvcnQge1xuICBpbmNvbXBhdGlibGVOb2RlR3VhcmRcbn0gZnJvbSBcIi4vY2h1bmstV1BTWTNNRkoubWpzXCI7XG5pbXBvcnQge1xuICBVUExPQURUSElOR19WRVJTSU9OLFxuICBidWlsZFBlcm1pc3Npb25zSW5mb0hhbmRsZXIsXG4gIGJ1aWxkUmVxdWVzdEhhbmRsZXIsXG4gIGNyZWF0ZUJ1aWxkZXIsXG4gIGZvcm1hdEVycm9yXG59IGZyb20gXCIuL2NodW5rLUJQVEhLSlRLLm1qc1wiO1xuXG4vLyBzcmMvc2VydmVyLnRzXG5pbXBvcnQgeyBnZXRTdGF0dXNDb2RlRnJvbUVycm9yLCBVcGxvYWRUaGluZ0Vycm9yIGFzIFVwbG9hZFRoaW5nRXJyb3IzIH0gZnJvbSBcIkB1cGxvYWR0aGluZy9zaGFyZWRcIjtcblxuLy8gc3JjL3Nkay9pbmRleC50c1xuaW1wb3J0IHsgZ2VuZXJhdGVVcGxvYWRUaGluZ1VSTCBhcyBnZW5lcmF0ZVVwbG9hZFRoaW5nVVJMMiwgVXBsb2FkVGhpbmdFcnJvciBhcyBVcGxvYWRUaGluZ0Vycm9yMiB9IGZyb20gXCJAdXBsb2FkdGhpbmcvc2hhcmVkXCI7XG5cbi8vIHNyYy9zZGsvdXRpbHMudHNcbmltcG9ydCB7XG4gIGdlbmVyYXRlVXBsb2FkVGhpbmdVUkwsXG4gIHBvbGxGb3JGaWxlRGF0YSxcbiAgVXBsb2FkVGhpbmdFcnJvclxufSBmcm9tIFwiQHVwbG9hZHRoaW5nL3NoYXJlZFwiO1xuZnVuY3Rpb24gZ3VhcmRTZXJ2ZXJPbmx5KCkge1xuICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHRocm93IG5ldyBVcGxvYWRUaGluZ0Vycm9yKHtcbiAgICAgIGNvZGU6IFwiSU5URVJOQUxfU0VSVkVSX0VSUk9SXCIsXG4gICAgICBtZXNzYWdlOiBcIlRoZSBgdXRhcGlgIGNhbiBvbmx5IGJlIHVzZWQgb24gdGhlIHNlcnZlci5cIlxuICAgIH0pO1xuICB9XG59XG5mdW5jdGlvbiBnZXRBcGlLZXlPclRocm93KGFwaUtleSkge1xuICBpZiAoYXBpS2V5KVxuICAgIHJldHVybiBhcGlLZXk7XG4gIGlmIChwcm9jZXNzLmVudi5VUExPQURUSElOR19TRUNSRVQpXG4gICAgcmV0dXJuIHByb2Nlc3MuZW52LlVQTE9BRFRISU5HX1NFQ1JFVDtcbiAgdGhyb3cgbmV3IFVwbG9hZFRoaW5nRXJyb3Ioe1xuICAgIGNvZGU6IFwiTUlTU0lOR19FTlZcIixcbiAgICBtZXNzYWdlOiBcIk1pc3NpbmcgYFVQTE9BRFRISU5HX1NFQ1JFVGAgZW52IHZhcmlhYmxlLlwiXG4gIH0pO1xufVxudmFyIHVwbG9hZEZpbGVzSW50ZXJuYWwgPSBhc3luYyAoZGF0YSwgb3B0cykgPT4ge1xuICBjb25zdCBmaWxlRGF0YSA9IGRhdGEuZmlsZXMubWFwKChmaWxlKSA9PiAoe1xuICAgIG5hbWU6IGZpbGUubmFtZSA/PyBcInVubmFtZWQtYmxvYlwiLFxuICAgIHR5cGU6IGZpbGUudHlwZSxcbiAgICBzaXplOiBmaWxlLnNpemVcbiAgfSkpO1xuICBjb25zdCByZXMgPSBhd2FpdCBvcHRzLmZldGNoKGdlbmVyYXRlVXBsb2FkVGhpbmdVUkwoXCIvYXBpL3VwbG9hZEZpbGVzXCIpLCB7XG4gICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICBoZWFkZXJzOiBvcHRzLnV0UmVxdWVzdEhlYWRlcnMsXG4gICAgY2FjaGU6IFwibm8tc3RvcmVcIixcbiAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICBmaWxlczogZmlsZURhdGEsXG4gICAgICBtZXRhZGF0YTogZGF0YS5tZXRhZGF0YSxcbiAgICAgIGNvbnRlbnREaXNwb3NpdGlvbjogZGF0YS5jb250ZW50RGlzcG9zaXRpb25cbiAgICB9KVxuICB9KTtcbiAgaWYgKCFyZXMub2spIHtcbiAgICBjb25zdCBlcnJvciA9IGF3YWl0IFVwbG9hZFRoaW5nRXJyb3IuZnJvbVJlc3BvbnNlKHJlcyk7XG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbiAgY29uc3QgY2xvbmVkUmVzID0gcmVzLmNsb25lKCk7XG4gIGNvbnN0IGpzb24gPSBhd2FpdCByZXMuanNvbigpO1xuICBpZiAoXCJlcnJvclwiIGluIGpzb24pIHtcbiAgICBjb25zdCBlcnJvciA9IGF3YWl0IFVwbG9hZFRoaW5nRXJyb3IuZnJvbVJlc3BvbnNlKGNsb25lZFJlcyk7XG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbiAgY29uc3QgdXBsb2FkcyA9IGF3YWl0IFByb21pc2UuYWxsU2V0dGxlZChcbiAgICBkYXRhLmZpbGVzLm1hcChhc3luYyAoZmlsZSwgaSkgPT4ge1xuICAgICAgY29uc3QgeyBwcmVzaWduZWRVcmwsIGZpZWxkcywga2V5LCBmaWxlVXJsIH0gPSBqc29uLmRhdGFbaV07XG4gICAgICBpZiAoIXByZXNpZ25lZFVybCB8fCAhZmllbGRzKSB7XG4gICAgICAgIHRocm93IG5ldyBVcGxvYWRUaGluZ0Vycm9yKHtcbiAgICAgICAgICBjb2RlOiBcIlVSTF9HRU5FUkFUSU9OX0ZBSUxFRFwiLFxuICAgICAgICAgIG1lc3NhZ2U6IFwiRmFpbGVkIHRvIGdlbmVyYXRlIHByZXNpZ25lZCBVUkxcIixcbiAgICAgICAgICBjYXVzZTogSlNPTi5zdHJpbmdpZnkoanNvbi5kYXRhW2ldKVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKCk7XG4gICAgICBmb3JtRGF0YS5hcHBlbmQoXCJDb250ZW50LVR5cGVcIiwgZmlsZS50eXBlKTtcbiAgICAgIE9iamVjdC5lbnRyaWVzKGZpZWxkcykuZm9yRWFjaCgoW2tleTIsIHZhbHVlXSkgPT4ge1xuICAgICAgICBmb3JtRGF0YS5hcHBlbmQoa2V5MiwgdmFsdWUpO1xuICAgICAgfSk7XG4gICAgICBmb3JtRGF0YS5hcHBlbmQoXG4gICAgICAgIFwiZmlsZVwiLFxuICAgICAgICAvLyBIYW5kbGVzIGNhc2Ugd2hlbiB0aGVyZSBpcyBubyBmaWxlIG5hbWVcbiAgICAgICAgZmlsZS5uYW1lID8gZmlsZSA6IE9iamVjdC5hc3NpZ24oZmlsZSwgeyBuYW1lOiBcInVubmFtZWQtYmxvYlwiIH0pXG4gICAgICApO1xuICAgICAgY29uc3QgczNyZXMgPSBhd2FpdCBvcHRzLmZldGNoKHByZXNpZ25lZFVybCwge1xuICAgICAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgICAgICBib2R5OiBmb3JtRGF0YSxcbiAgICAgICAgaGVhZGVyczogbmV3IEhlYWRlcnMoe1xuICAgICAgICAgIEFjY2VwdDogXCJhcHBsaWNhdGlvbi94bWxcIlxuICAgICAgICB9KVxuICAgICAgfSk7XG4gICAgICBpZiAoIXMzcmVzLm9rKSB7XG4gICAgICAgIGF3YWl0IG9wdHMuZmV0Y2goZ2VuZXJhdGVVcGxvYWRUaGluZ1VSTChcIi9hcGkvZmFpbHVyZUNhbGxiYWNrXCIpLCB7XG4gICAgICAgICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICBmaWxlS2V5OiBmaWVsZHMua2V5XG4gICAgICAgICAgfSksXG4gICAgICAgICAgaGVhZGVyczogb3B0cy51dFJlcXVlc3RIZWFkZXJzXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCB0ZXh0ID0gYXdhaXQgczNyZXMudGV4dCgpO1xuICAgICAgICBjb25zdCBwYXJzZWQgPSBtYXliZVBhcnNlUmVzcG9uc2VYTUwodGV4dCk7XG4gICAgICAgIGlmIChwYXJzZWQgPT0gbnVsbCA/IHZvaWQgMCA6IHBhcnNlZC5tZXNzYWdlKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFVwbG9hZFRoaW5nRXJyb3Ioe1xuICAgICAgICAgICAgY29kZTogXCJVUExPQURfRkFJTEVEXCIsXG4gICAgICAgICAgICBtZXNzYWdlOiBwYXJzZWQubWVzc2FnZVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBVcGxvYWRUaGluZ0Vycm9yKHtcbiAgICAgICAgICBjb2RlOiBcIlVQTE9BRF9GQUlMRURcIixcbiAgICAgICAgICBtZXNzYWdlOiBcIkZhaWxlZCB0byB1cGxvYWQgZmlsZSB0byBzdG9yYWdlIHByb3ZpZGVyXCIsXG4gICAgICAgICAgY2F1c2U6IHMzcmVzXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgYXdhaXQgcG9sbEZvckZpbGVEYXRhKGtleSk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBrZXksXG4gICAgICAgIHVybDogZmlsZVVybCxcbiAgICAgICAgbmFtZTogZmlsZS5uYW1lLFxuICAgICAgICBzaXplOiBmaWxlLnNpemVcbiAgICAgIH07XG4gICAgfSlcbiAgKTtcbiAgcmV0dXJuIHVwbG9hZHMubWFwKCh1cGxvYWQpID0+IHtcbiAgICBpZiAodXBsb2FkLnN0YXR1cyA9PT0gXCJmdWxmaWxsZWRcIikge1xuICAgICAgY29uc3QgZGF0YTIgPSB1cGxvYWQudmFsdWU7XG4gICAgICByZXR1cm4geyBkYXRhOiBkYXRhMiwgZXJyb3I6IG51bGwgfTtcbiAgICB9XG4gICAgY29uc3QgcmVhc29uID0gdXBsb2FkLnJlYXNvbjtcbiAgICBjb25zdCBlcnJvciA9IFVwbG9hZFRoaW5nRXJyb3IudG9PYmplY3QocmVhc29uKTtcbiAgICByZXR1cm4geyBkYXRhOiBudWxsLCBlcnJvciB9O1xuICB9KTtcbn07XG5cbi8vIHNyYy9zZGsvaW5kZXgudHNcbnZhciBVVEFwaSA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3Iob3B0cykge1xuICAgIHRoaXMuZmV0Y2ggPSAob3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5mZXRjaCkgPz8gZ2xvYmFsVGhpcy5mZXRjaDtcbiAgICB0aGlzLmFwaUtleSA9IChvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLmFwaUtleSkgPz8gcHJvY2Vzcy5lbnYuVVBMT0FEVEhJTkdfU0VDUkVUO1xuICAgIHRoaXMuZGVmYXVsdEhlYWRlcnMgPSB7XG4gICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICAgIFwieC11cGxvYWR0aGluZy1hcGkta2V5XCI6IHRoaXMuYXBpS2V5LFxuICAgICAgXCJ4LXVwbG9hZHRoaW5nLXZlcnNpb25cIjogVVBMT0FEVEhJTkdfVkVSU0lPTlxuICAgIH07XG4gIH1cbiAgYXN5bmMgcmVxdWVzdFVwbG9hZFRoaW5nKHBhdGhuYW1lLCBib2R5LCBmYWxsYmFja0Vycm9yTWVzc2FnZSkge1xuICAgIGdldEFwaUtleU9yVGhyb3coKTtcbiAgICBjb25zdCByZXMgPSBhd2FpdCB0aGlzLmZldGNoKGdlbmVyYXRlVXBsb2FkVGhpbmdVUkwyKHBhdGhuYW1lKSwge1xuICAgICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICAgIGNhY2hlOiBcIm5vLXN0b3JlXCIsXG4gICAgICBoZWFkZXJzOiB0aGlzLmRlZmF1bHRIZWFkZXJzLFxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoYm9keSlcbiAgICB9KTtcbiAgICBjb25zdCBqc29uID0gYXdhaXQgcmVzLmpzb24oKTtcbiAgICBpZiAoIXJlcy5vayB8fCBcImVycm9yXCIgaW4ganNvbikge1xuICAgICAgY29uc29sZS5lcnJvcihcIltVVF0gRXJyb3I6XCIsIGpzb24pO1xuICAgICAgdGhyb3cgbmV3IFVwbG9hZFRoaW5nRXJyb3IyKHtcbiAgICAgICAgY29kZTogXCJJTlRFUk5BTF9TRVJWRVJfRVJST1JcIixcbiAgICAgICAgbWVzc2FnZTogXCJlcnJvclwiIGluIGpzb24gJiYgdHlwZW9mIGpzb24uZXJyb3IgPT09IFwic3RyaW5nXCIgPyBqc29uLmVycm9yIDogZmFsbGJhY2tFcnJvck1lc3NhZ2VcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4ganNvbjtcbiAgfVxuICAvKipcbiAgICogQHBhcmFtIHtGaWxlRXNxdWUgfCBGaWxlRXNxdWVbXX0gZmlsZXMgVGhlIGZpbGUocykgdG8gdXBsb2FkXG4gICAqIEBwYXJhbSB7SnNvbn0gbWV0YWRhdGEgSlNPTi1wYXJzZWFibGUgbWV0YWRhdGEgdG8gYXR0YWNoIHRvIHRoZSB1cGxvYWRlZCBmaWxlKHMpXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIGF3YWl0IHVwbG9hZEZpbGVzKG5ldyBGaWxlKFtcImZvb1wiXSwgXCJmb28udHh0XCIpKTtcbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogYXdhaXQgdXBsb2FkRmlsZXMoW1xuICAgKiAgIG5ldyBGaWxlKFtcImZvb1wiXSwgXCJmb28udHh0XCIpLFxuICAgKiAgIG5ldyBGaWxlKFtcImJhclwiXSwgXCJiYXIudHh0XCIpLFxuICAgKiBdKTtcbiAgICovXG4gIGFzeW5jIHVwbG9hZEZpbGVzKGZpbGVzLCBtZXRhZGF0YSA9IHt9LCBjb250ZW50RGlzcG9zaXRpb24gPSBcImlubGluZVwiKSB7XG4gICAgZ3VhcmRTZXJ2ZXJPbmx5KCk7XG4gICAgaW5jb21wYXRpYmxlTm9kZUd1YXJkKCk7XG4gICAgY29uc3QgZmlsZXNUb1VwbG9hZCA9IEFycmF5LmlzQXJyYXkoZmlsZXMpID8gZmlsZXMgOiBbZmlsZXNdO1xuICAgIGNvbnN0IHVwbG9hZHMgPSBhd2FpdCB1cGxvYWRGaWxlc0ludGVybmFsKFxuICAgICAge1xuICAgICAgICBmaWxlczogZmlsZXNUb1VwbG9hZCxcbiAgICAgICAgbWV0YWRhdGEsXG4gICAgICAgIGNvbnRlbnREaXNwb3NpdGlvblxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgZmV0Y2g6IHRoaXMuZmV0Y2gsXG4gICAgICAgIHV0UmVxdWVzdEhlYWRlcnM6IHRoaXMuZGVmYXVsdEhlYWRlcnNcbiAgICAgIH1cbiAgICApO1xuICAgIGNvbnN0IHVwbG9hZEZpbGVSZXNwb25zZSA9IEFycmF5LmlzQXJyYXkoZmlsZXMpID8gdXBsb2FkcyA6IHVwbG9hZHNbMF07XG4gICAgcmV0dXJuIHVwbG9hZEZpbGVSZXNwb25zZTtcbiAgfVxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgVVJMIG9mIHRoZSBmaWxlIHRvIHVwbG9hZFxuICAgKiBAcGFyYW0ge0pzb259IG1ldGFkYXRhIEpTT04tcGFyc2VhYmxlIG1ldGFkYXRhIHRvIGF0dGFjaCB0byB0aGUgdXBsb2FkZWQgZmlsZShzKVxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBhd2FpdCB1cGxvYWRGaWxlRnJvbVVybChcImh0dHBzOi8vdXBsb2FkdGhpbmcuY29tL2YvMmUwZmRiNjQtOTk1Ny00MjYyLThlNDUtZjM3MmJhOTAzYWM4X2ltYWdlLmpwZ1wiKTtcbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogYXdhaXQgdXBsb2FkRmlsZUZyb21VcmwoW1xuICAgKiAgIFwiaHR0cHM6Ly91cGxvYWR0aGluZy5jb20vZi8yZTBmZGI2NC05OTU3LTQyNjItOGU0NS1mMzcyYmE5MDNhYzhfaW1hZ2UuanBnXCIsXG4gICAqICAgXCJodHRwczovL3VwbG9hZHRoaW5nLmNvbS9mLzE2NDkzNTNiLTA0ZWEtNDhhMi05ZGI3LTMxZGU3ZjU2MmM4ZF9pbWFnZTIuanBnXCJcbiAgICogXSlcbiAgICovXG4gIGFzeW5jIHVwbG9hZEZpbGVzRnJvbVVybCh1cmxzLCBtZXRhZGF0YSA9IHt9LCBjb250ZW50RGlzcG9zaXRpb24gPSBcImlubGluZVwiKSB7XG4gICAgZ3VhcmRTZXJ2ZXJPbmx5KCk7XG4gICAgY29uc3QgZmlsZVVybHMgPSBBcnJheS5pc0FycmF5KHVybHMpID8gdXJscyA6IFt1cmxzXTtcbiAgICBjb25zdCBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSgpO1xuICAgIGZvcm1EYXRhLmFwcGVuZChcIm1ldGFkYXRhXCIsIEpTT04uc3RyaW5naWZ5KG1ldGFkYXRhKSk7XG4gICAgY29uc3QgZmlsZXNUb1VwbG9hZCA9IGF3YWl0IFByb21pc2UuYWxsKFxuICAgICAgZmlsZVVybHMubWFwKGFzeW5jICh1cmwpID0+IHtcbiAgICAgICAgaWYgKHR5cGVvZiB1cmwgPT09IFwic3RyaW5nXCIpXG4gICAgICAgICAgdXJsID0gbmV3IFVSTCh1cmwpO1xuICAgICAgICBjb25zdCBmaWxlbmFtZSA9IHVybC5wYXRobmFtZS5zcGxpdChcIi9cIikucG9wKCkgPz8gXCJ1bmtub3duLWZpbGVuYW1lXCI7XG4gICAgICAgIGNvbnN0IGZpbGVSZXNwb25zZSA9IGF3YWl0IGZldGNoKHVybCk7XG4gICAgICAgIGlmICghZmlsZVJlc3BvbnNlLm9rKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFVwbG9hZFRoaW5nRXJyb3IyKHtcbiAgICAgICAgICAgIGNvZGU6IFwiQkFEX1JFUVVFU1RcIixcbiAgICAgICAgICAgIG1lc3NhZ2U6IFwiRmFpbGVkIHRvIGRvd25sb2FkIHJlcXVlc3RlZCBmaWxlLlwiLFxuICAgICAgICAgICAgY2F1c2U6IGZpbGVSZXNwb25zZVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGJsb2IgPSBhd2FpdCBmaWxlUmVzcG9uc2UuYmxvYigpO1xuICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihibG9iLCB7IG5hbWU6IGZpbGVuYW1lIH0pO1xuICAgICAgfSlcbiAgICApO1xuICAgIGNvbnN0IHVwbG9hZHMgPSBhd2FpdCB1cGxvYWRGaWxlc0ludGVybmFsKFxuICAgICAge1xuICAgICAgICBmaWxlczogZmlsZXNUb1VwbG9hZCxcbiAgICAgICAgbWV0YWRhdGEsXG4gICAgICAgIGNvbnRlbnREaXNwb3NpdGlvblxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgZmV0Y2g6IHRoaXMuZmV0Y2gsXG4gICAgICAgIHV0UmVxdWVzdEhlYWRlcnM6IHRoaXMuZGVmYXVsdEhlYWRlcnNcbiAgICAgIH1cbiAgICApO1xuICAgIGNvbnN0IHVwbG9hZEZpbGVSZXNwb25zZSA9IEFycmF5LmlzQXJyYXkodXJscykgPyB1cGxvYWRzIDogdXBsb2Fkc1swXTtcbiAgICByZXR1cm4gdXBsb2FkRmlsZVJlc3BvbnNlO1xuICB9XG4gIC8qKlxuICAgKiBSZXF1ZXN0IHRvIGRlbGV0ZSBmaWxlcyBmcm9tIFVwbG9hZFRoaW5nIHN0b3JhZ2UuXG4gICAqIEBwYXJhbSB7c3RyaW5nIHwgc3RyaW5nW119IGZpbGVLZXlzXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIGF3YWl0IGRlbGV0ZUZpbGVzKFwiMmUwZmRiNjQtOTk1Ny00MjYyLThlNDUtZjM3MmJhOTAzYWM4X2ltYWdlLmpwZ1wiKTtcbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogYXdhaXQgZGVsZXRlRmlsZXMoW1wiMmUwZmRiNjQtOTk1Ny00MjYyLThlNDUtZjM3MmJhOTAzYWM4X2ltYWdlLmpwZ1wiLFwiMTY0OTM1M2ItMDRlYS00OGEyLTlkYjctMzFkZTdmNTYyYzhkX2ltYWdlMi5qcGdcIl0pXG4gICAqL1xuICBhc3luYyBkZWxldGVGaWxlcyhmaWxlS2V5cykge1xuICAgIGd1YXJkU2VydmVyT25seSgpO1xuICAgIGlmICghQXJyYXkuaXNBcnJheShmaWxlS2V5cykpXG4gICAgICBmaWxlS2V5cyA9IFtmaWxlS2V5c107XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdFVwbG9hZFRoaW5nKFxuICAgICAgXCIvYXBpL2RlbGV0ZUZpbGVcIixcbiAgICAgIHsgZmlsZUtleXMgfSxcbiAgICAgIFwiQW4gdW5rbm93biBlcnJvciBvY2N1cmVkIHdoaWxlIGRlbGV0aW5nIGZpbGVzLlwiXG4gICAgKTtcbiAgfVxuICAvKipcbiAgICogUmVxdWVzdCBmaWxlIFVSTHMgZnJvbSBVcGxvYWRUaGluZyBzdG9yYWdlLlxuICAgKiBAcGFyYW0ge3N0cmluZyB8IHN0cmluZ1tdfSBmaWxlS2V5c1xuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBjb25zdCBkYXRhID0gYXdhaXQgZ2V0RmlsZVVybHMoXCIyZTBmZGI2NC05OTU3LTQyNjItOGU0NS1mMzcyYmE5MDNhYzhfaW1hZ2UuanBnXCIpO1xuICAgKiBjb25zb2xlLmxvZyhkYXRhKTsgLy8gW3trZXk6IFwiMmUwZmRiNjQtOTk1Ny00MjYyLThlNDUtZjM3MmJhOTAzYWM4X2ltYWdlLmpwZ1wiLCB1cmw6IFwiaHR0cHM6Ly91cGxvYWR0aGluZy5jb20vZi8yZTBmZGI2NC05OTU3LTQyNjItOGU0NS1mMzcyYmE5MDNhYzhfaW1hZ2UuanBnXCJ9XVxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBjb25zdCBkYXRhID0gYXdhaXQgZ2V0RmlsZVVybHMoW1wiMmUwZmRiNjQtOTk1Ny00MjYyLThlNDUtZjM3MmJhOTAzYWM4X2ltYWdlLmpwZ1wiLFwiMTY0OTM1M2ItMDRlYS00OGEyLTlkYjctMzFkZTdmNTYyYzhkX2ltYWdlMi5qcGdcIl0pXG4gICAqIGNvbnNvbGUubG9nKGRhdGEpIC8vIFt7a2V5OiBcIjJlMGZkYjY0LTk5NTctNDI2Mi04ZTQ1LWYzNzJiYTkwM2FjOF9pbWFnZS5qcGdcIiwgdXJsOiBcImh0dHBzOi8vdXBsb2FkdGhpbmcuY29tL2YvMmUwZmRiNjQtOTk1Ny00MjYyLThlNDUtZjM3MmJhOTAzYWM4X2ltYWdlLmpwZ1wiIH0se2tleTogXCIxNjQ5MzUzYi0wNGVhLTQ4YTItOWRiNy0zMWRlN2Y1NjJjOGRfaW1hZ2UyLmpwZ1wiLCB1cmw6IFwiaHR0cHM6Ly91cGxvYWR0aGluZy5jb20vZi8xNjQ5MzUzYi0wNGVhLTQ4YTItOWRiNy0zMWRlN2Y1NjJjOGRfaW1hZ2UyLmpwZ1wifV1cbiAgICovXG4gIGFzeW5jIGdldEZpbGVVcmxzKGZpbGVLZXlzKSB7XG4gICAgZ3VhcmRTZXJ2ZXJPbmx5KCk7XG4gICAgaW5jb21wYXRpYmxlTm9kZUd1YXJkKCk7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGZpbGVLZXlzKSlcbiAgICAgIGZpbGVLZXlzID0gW2ZpbGVLZXlzXTtcbiAgICBjb25zdCBqc29uID0gYXdhaXQgdGhpcy5yZXF1ZXN0VXBsb2FkVGhpbmcoXG4gICAgICBcIi9hcGkvZ2V0RmlsZVVybFwiLFxuICAgICAgeyBmaWxlS2V5cyB9LFxuICAgICAgXCJBbiB1bmtub3duIGVycm9yIG9jY3VyZWQgd2hpbGUgcmV0cmlldmluZyBmaWxlIFVSTHMuXCJcbiAgICApO1xuICAgIHJldHVybiBqc29uLmRhdGE7XG4gIH1cbiAgLyoqXG4gICAqIFJlcXVlc3QgZmlsZSBsaXN0IGZyb20gVXBsb2FkVGhpbmcgc3RvcmFnZS5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogY29uc3QgZGF0YSA9IGF3YWl0IGxpc3RGaWxlcygpO1xuICAgKiBjb25zb2xlLmxvZyhkYXRhKTsgLy8geyBrZXk6IFwiMmUwZmRiNjQtOTk1Ny00MjYyLThlNDUtZjM3MmJhOTAzYWM4X2ltYWdlLmpwZ1wiLCBpZDogXCIyZTBmZGI2NC05OTU3LTQyNjItOGU0NS1mMzcyYmE5MDNhYzhcIiB9XG4gICAqL1xuICBhc3luYyBsaXN0RmlsZXMoKSB7XG4gICAgZ3VhcmRTZXJ2ZXJPbmx5KCk7XG4gICAgaW5jb21wYXRpYmxlTm9kZUd1YXJkKCk7XG4gICAgY29uc3QganNvbiA9IGF3YWl0IHRoaXMucmVxdWVzdFVwbG9hZFRoaW5nKFwiL2FwaS9saXN0RmlsZXNcIiwge30sIFwiQW4gdW5rbm93biBlcnJvciBvY2N1cmVkIHdoaWxlIGxpc3RpbmcgZmlsZXMuXCIpO1xuICAgIHJldHVybiBqc29uLmZpbGVzO1xuICB9XG4gIGFzeW5jIHJlbmFtZUZpbGUodXBkYXRlcykge1xuICAgIGd1YXJkU2VydmVyT25seSgpO1xuICAgIGluY29tcGF0aWJsZU5vZGVHdWFyZCgpO1xuICAgIGlmICghQXJyYXkuaXNBcnJheSh1cGRhdGVzKSlcbiAgICAgIHVwZGF0ZXMgPSBbdXBkYXRlc107XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdFVwbG9hZFRoaW5nKFxuICAgICAgXCIvYXBpL3JlbmFtZUZpbGVcIixcbiAgICAgIHsgdXBkYXRlcyB9LFxuICAgICAgXCJBbiB1bmtub3duIGVycm9yIG9jY3VyZWQgd2hpbGUgcmVuYW1pbmcgZmlsZXMuXCJcbiAgICApO1xuICB9XG4gIGFzeW5jIGdldFVzYWdlSW5mbygpIHtcbiAgICBndWFyZFNlcnZlck9ubHkoKTtcbiAgICBpbmNvbXBhdGlibGVOb2RlR3VhcmQoKTtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0VXBsb2FkVGhpbmcoXG4gICAgICBcIi9hcGkvZ2V0VXNhZ2VJbmZvXCIsXG4gICAgICB7fSxcbiAgICAgIFwiQW4gdW5rbm93biBlcnJvciBvY2N1cmVkIHdoaWxlIGdldHRpbmcgdXNhZ2UgaW5mby5cIlxuICAgICk7XG4gIH1cbn07XG52YXIgdXRhcGkgPSBuZXcgVVRBcGkoKTtcblxuLy8gc3JjL3NlcnZlci50c1xudmFyIGNyZWF0ZVVwbG9hZHRoaW5nID0gKG9wdHMpID0+IGNyZWF0ZUJ1aWxkZXIob3B0cyk7XG52YXIgY3JlYXRlU2VydmVySGFuZGxlciA9IChvcHRzKSA9PiB7XG4gIGluY29tcGF0aWJsZU5vZGVHdWFyZCgpO1xuICBjb25zdCByZXF1ZXN0SGFuZGxlciA9IGJ1aWxkUmVxdWVzdEhhbmRsZXIob3B0cyk7XG4gIGNvbnN0IFBPU1QgPSBhc3luYyAocmVxdWVzdCkgPT4ge1xuICAgIGNvbnN0IHJlcSA9IHJlcXVlc3QgaW5zdGFuY2VvZiBSZXF1ZXN0ID8gcmVxdWVzdCA6IHJlcXVlc3QucmVxdWVzdDtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJlcXVlc3RIYW5kbGVyKHsgcmVxIH0pO1xuICAgIGlmIChyZXNwb25zZSBpbnN0YW5jZW9mIFVwbG9hZFRoaW5nRXJyb3IzKSB7XG4gICAgICByZXR1cm4gbmV3IFJlc3BvbnNlKEpTT04uc3RyaW5naWZ5KGZvcm1hdEVycm9yKHJlc3BvbnNlLCBvcHRzLnJvdXRlcikpLCB7XG4gICAgICAgIHN0YXR1czogZ2V0U3RhdHVzQ29kZUZyb21FcnJvcihyZXNwb25zZSksXG4gICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICBcIngtdXBsb2FkdGhpbmctdmVyc2lvblwiOiBVUExPQURUSElOR19WRVJTSU9OXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAocmVzcG9uc2Uuc3RhdHVzICE9PSAyMDApIHtcbiAgICAgIHJldHVybiBuZXcgUmVzcG9uc2UoXCJBbiB1bmtub3duIGVycm9yIG9jY3VyZWRcIiwge1xuICAgICAgICBzdGF0dXM6IDUwMCxcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgIFwieC11cGxvYWR0aGluZy12ZXJzaW9uXCI6IFVQTE9BRFRISU5HX1ZFUlNJT05cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgUmVzcG9uc2UoSlNPTi5zdHJpbmdpZnkocmVzcG9uc2UuYm9keSksIHtcbiAgICAgIHN0YXR1czogcmVzcG9uc2Uuc3RhdHVzLFxuICAgICAgaGVhZGVyczoge1xuICAgICAgICBcIngtdXBsb2FkdGhpbmctdmVyc2lvblwiOiBVUExPQURUSElOR19WRVJTSU9OXG4gICAgICB9XG4gICAgfSk7XG4gIH07XG4gIGNvbnN0IGdldEJ1aWxkUGVybXMgPSBidWlsZFBlcm1pc3Npb25zSW5mb0hhbmRsZXIob3B0cyk7XG4gIGNvbnN0IEdFVCA9IChyZXF1ZXN0KSA9PiB7XG4gICAgY29uc3QgX3JlcSA9IHJlcXVlc3QgaW5zdGFuY2VvZiBSZXF1ZXN0ID8gcmVxdWVzdCA6IHJlcXVlc3QucmVxdWVzdDtcbiAgICByZXR1cm4gbmV3IFJlc3BvbnNlKEpTT04uc3RyaW5naWZ5KGdldEJ1aWxkUGVybXMoKSksIHtcbiAgICAgIHN0YXR1czogMjAwLFxuICAgICAgaGVhZGVyczoge1xuICAgICAgICBcIngtdXBsb2FkdGhpbmctdmVyc2lvblwiOiBVUExPQURUSElOR19WRVJTSU9OXG4gICAgICB9XG4gICAgfSk7XG4gIH07XG4gIHJldHVybiB7IEdFVCwgUE9TVCB9O1xufTtcbnZhciBleHRyYWN0Um91dGVyQ29uZmlnID0gKHJvdXRlcikgPT4gYnVpbGRQZXJtaXNzaW9uc0luZm9IYW5kbGVyKHsgcm91dGVyIH0pKCk7XG5cbmV4cG9ydCB7XG4gIFVUQXBpLFxuICB1dGFwaSxcbiAgY3JlYXRlVXBsb2FkdGhpbmcsXG4gIGNyZWF0ZVNlcnZlckhhbmRsZXIsXG4gIGV4dHJhY3RSb3V0ZXJDb25maWdcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jaHVuay1GM1NOREtaUS5tanMubWFwIl0sIm5hbWVzIjpbIm1heWJlUGFyc2VSZXNwb25zZVhNTCIsImluY29tcGF0aWJsZU5vZGVHdWFyZCIsIlVQTE9BRFRISU5HX1ZFUlNJT04iLCJidWlsZFBlcm1pc3Npb25zSW5mb0hhbmRsZXIiLCJidWlsZFJlcXVlc3RIYW5kbGVyIiwiY3JlYXRlQnVpbGRlciIsImZvcm1hdEVycm9yIiwiZ2V0U3RhdHVzQ29kZUZyb21FcnJvciIsIlVwbG9hZFRoaW5nRXJyb3IiLCJVcGxvYWRUaGluZ0Vycm9yMyIsImdlbmVyYXRlVXBsb2FkVGhpbmdVUkwiLCJnZW5lcmF0ZVVwbG9hZFRoaW5nVVJMMiIsIlVwbG9hZFRoaW5nRXJyb3IyIiwicG9sbEZvckZpbGVEYXRhIiwiZ3VhcmRTZXJ2ZXJPbmx5IiwiY29kZSIsIm1lc3NhZ2UiLCJnZXRBcGlLZXlPclRocm93IiwiYXBpS2V5IiwicHJvY2VzcyIsImVudiIsIlVQTE9BRFRISU5HX1NFQ1JFVCIsInVwbG9hZEZpbGVzSW50ZXJuYWwiLCJkYXRhIiwib3B0cyIsImZpbGVEYXRhIiwiZmlsZXMiLCJtYXAiLCJmaWxlIiwibmFtZSIsInR5cGUiLCJzaXplIiwicmVzIiwiZmV0Y2giLCJtZXRob2QiLCJoZWFkZXJzIiwidXRSZXF1ZXN0SGVhZGVycyIsImNhY2hlIiwiYm9keSIsIkpTT04iLCJzdHJpbmdpZnkiLCJtZXRhZGF0YSIsImNvbnRlbnREaXNwb3NpdGlvbiIsIm9rIiwiZXJyb3IiLCJmcm9tUmVzcG9uc2UiLCJjbG9uZWRSZXMiLCJjbG9uZSIsImpzb24iLCJ1cGxvYWRzIiwiUHJvbWlzZSIsImFsbFNldHRsZWQiLCJpIiwicHJlc2lnbmVkVXJsIiwiZmllbGRzIiwia2V5IiwiZmlsZVVybCIsImNhdXNlIiwiZm9ybURhdGEiLCJGb3JtRGF0YSIsImFwcGVuZCIsIk9iamVjdCIsImVudHJpZXMiLCJmb3JFYWNoIiwia2V5MiIsInZhbHVlIiwiYXNzaWduIiwiczNyZXMiLCJIZWFkZXJzIiwiQWNjZXB0IiwiZmlsZUtleSIsInRleHQiLCJwYXJzZWQiLCJ1cmwiLCJ1cGxvYWQiLCJzdGF0dXMiLCJkYXRhMiIsInJlYXNvbiIsInRvT2JqZWN0IiwiVVRBcGkiLCJjb25zdHJ1Y3RvciIsImdsb2JhbFRoaXMiLCJkZWZhdWx0SGVhZGVycyIsInJlcXVlc3RVcGxvYWRUaGluZyIsInBhdGhuYW1lIiwiZmFsbGJhY2tFcnJvck1lc3NhZ2UiLCJjb25zb2xlIiwidXBsb2FkRmlsZXMiLCJmaWxlc1RvVXBsb2FkIiwiQXJyYXkiLCJpc0FycmF5IiwidXBsb2FkRmlsZVJlc3BvbnNlIiwidXBsb2FkRmlsZXNGcm9tVXJsIiwidXJscyIsImZpbGVVcmxzIiwiYWxsIiwiVVJMIiwiZmlsZW5hbWUiLCJzcGxpdCIsInBvcCIsImZpbGVSZXNwb25zZSIsImJsb2IiLCJkZWxldGVGaWxlcyIsImZpbGVLZXlzIiwiZ2V0RmlsZVVybHMiLCJsaXN0RmlsZXMiLCJyZW5hbWVGaWxlIiwidXBkYXRlcyIsImdldFVzYWdlSW5mbyIsInV0YXBpIiwiY3JlYXRlVXBsb2FkdGhpbmciLCJjcmVhdGVTZXJ2ZXJIYW5kbGVyIiwicmVxdWVzdEhhbmRsZXIiLCJQT1NUIiwicmVxdWVzdCIsInJlcSIsIlJlcXVlc3QiLCJyZXNwb25zZSIsIlJlc3BvbnNlIiwicm91dGVyIiwiZ2V0QnVpbGRQZXJtcyIsIkdFVCIsIl9yZXEiLCJleHRyYWN0Um91dGVyQ29uZmlnIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/uploadthing/dist/chunk-F3SNDKZQ.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/uploadthing/dist/chunk-T2XS27LC.mjs":
/*!**********************************************************!*\
  !*** ./node_modules/uploadthing/dist/chunk-T2XS27LC.mjs ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   __commonJS: () => (/* binding */ __commonJS),\n/* harmony export */   __require: () => (/* binding */ __require),\n/* harmony export */   __toESM: () => (/* binding */ __toESM)\n/* harmony export */ });\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __require = /* @__PURE__ */ ((x)=>typeof require !== \"undefined\" ? require : typeof Proxy !== \"undefined\" ? new Proxy(x, {\n        get: (a, b)=>(typeof require !== \"undefined\" ? require : a)[b]\n    }) : x)(function(x) {\n    if (typeof require !== \"undefined\") return require.apply(this, arguments);\n    throw new Error('Dynamic require of \"' + x + '\" is not supported');\n});\nvar __commonJS = (cb, mod)=>function __require2() {\n        return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = {\n            exports: {}\n        }).exports, mod), mod.exports;\n    };\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toESM = (mod, isNodeMode, target)=>(target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(// If the importer is in node compatibility mode or this is not an ESM\n    // file that has been converted to a CommonJS file using a Babel-\n    // compatible transform (i.e. \"__esModule\" has not been set), then set\n    // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n    isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n        value: mod,\n        enumerable: true\n    }) : target, mod));\n //# sourceMappingURL=chunk-T2XS27LC.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvdXBsb2FkdGhpbmcvZGlzdC9jaHVuay1UMlhTMjdMQy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsSUFBSUEsV0FBV0MsT0FBT0MsTUFBTTtBQUM1QixJQUFJQyxZQUFZRixPQUFPRyxjQUFjO0FBQ3JDLElBQUlDLG1CQUFtQkosT0FBT0ssd0JBQXdCO0FBQ3RELElBQUlDLG9CQUFvQk4sT0FBT08sbUJBQW1CO0FBQ2xELElBQUlDLGVBQWVSLE9BQU9TLGNBQWM7QUFDeEMsSUFBSUMsZUFBZVYsT0FBT1csU0FBUyxDQUFDQyxjQUFjO0FBQ2xELElBQUlDLFlBQTRCLGFBQUgsR0FBSSxFQUFDQyxJQUFNLE9BQU9DLFlBQVksY0FBY0EsVUFBVSxPQUFPQyxVQUFVLGNBQWMsSUFBSUEsTUFBTUYsR0FBRztRQUM3SEcsS0FBSyxDQUFDQyxHQUFHQyxJQUFNLENBQUMsT0FBT0osWUFBWSxjQUFjQSxVQUFVRyxDQUFBQSxDQUFFLENBQUNDLEVBQUU7SUFDbEUsS0FBS0wsQ0FBQUEsRUFBRyxTQUFTQSxDQUFDO0lBQ2hCLElBQUksT0FBT0MsWUFBWSxhQUNyQixPQUFPQSxRQUFRSyxLQUFLLENBQUMsSUFBSSxFQUFFQztJQUM3QixNQUFNLElBQUlDLE1BQU0seUJBQXlCUixJQUFJO0FBQy9DO0FBQ0EsSUFBSVMsYUFBYSxDQUFDQyxJQUFJQyxNQUFRLFNBQVNDO1FBQ3JDLE9BQU9ELE9BQU8sQ0FBQyxHQUFHRCxFQUFFLENBQUNsQixrQkFBa0JrQixHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQ0MsTUFBTTtZQUFFRSxTQUFTLENBQUM7UUFBRSxHQUFHQSxPQUFPLEVBQUVGLE1BQU1BLElBQUlFLE9BQU87SUFDcEc7QUFDQSxJQUFJQyxjQUFjLENBQUNDLElBQUlDLE1BQU1DLFFBQVFDO0lBQ25DLElBQUlGLFFBQVEsT0FBT0EsU0FBUyxZQUFZLE9BQU9BLFNBQVMsWUFBWTtRQUNsRSxLQUFLLElBQUlHLE9BQU8zQixrQkFBa0J3QixNQUNoQyxJQUFJLENBQUNwQixhQUFhd0IsSUFBSSxDQUFDTCxJQUFJSSxRQUFRQSxRQUFRRixRQUN6QzdCLFVBQVUyQixJQUFJSSxLQUFLO1lBQUVoQixLQUFLLElBQU1hLElBQUksQ0FBQ0csSUFBSTtZQUFFRSxZQUFZLENBQUVILENBQUFBLE9BQU81QixpQkFBaUIwQixNQUFNRyxJQUFHLEtBQU1ELEtBQUtHLFVBQVU7UUFBQztJQUN0SDtJQUNBLE9BQU9OO0FBQ1Q7QUFDQSxJQUFJTyxVQUFVLENBQUNYLEtBQUtZLFlBQVlDLFNBQVlBLENBQUFBLFNBQVNiLE9BQU8sT0FBTzFCLFNBQVNTLGFBQWFpQixRQUFRLENBQUMsR0FBR0csWUFDbkcsc0VBQXNFO0lBQ3RFLGlFQUFpRTtJQUNqRSxzRUFBc0U7SUFDdEUscUVBQXFFO0lBQ3JFUyxjQUFjLENBQUNaLE9BQU8sQ0FBQ0EsSUFBSWMsVUFBVSxHQUFHckMsVUFBVW9DLFFBQVEsV0FBVztRQUFFRSxPQUFPZjtRQUFLVSxZQUFZO0lBQUssS0FBS0csUUFDekdiLElBQ0Y7QUFNRSxDQUNGLDJDQUEyQyIsInNvdXJjZXMiOlsid2VicGFjazovL3F1aWxsLy4vbm9kZV9tb2R1bGVzL3VwbG9hZHRoaW5nL2Rpc3QvY2h1bmstVDJYUzI3TEMubWpzPzE1ODQiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIF9fY3JlYXRlID0gT2JqZWN0LmNyZWF0ZTtcbnZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19nZXRPd25Qcm9wRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgX19nZXRPd25Qcm9wTmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBfX2dldFByb3RvT2YgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfX3JlcXVpcmUgPSAvKiBAX19QVVJFX18gKi8gKCh4KSA9PiB0eXBlb2YgcmVxdWlyZSAhPT0gXCJ1bmRlZmluZWRcIiA/IHJlcXVpcmUgOiB0eXBlb2YgUHJveHkgIT09IFwidW5kZWZpbmVkXCIgPyBuZXcgUHJveHkoeCwge1xuICBnZXQ6IChhLCBiKSA9PiAodHlwZW9mIHJlcXVpcmUgIT09IFwidW5kZWZpbmVkXCIgPyByZXF1aXJlIDogYSlbYl1cbn0pIDogeCkoZnVuY3Rpb24oeCkge1xuICBpZiAodHlwZW9mIHJlcXVpcmUgIT09IFwidW5kZWZpbmVkXCIpXG4gICAgcmV0dXJuIHJlcXVpcmUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgdGhyb3cgbmV3IEVycm9yKCdEeW5hbWljIHJlcXVpcmUgb2YgXCInICsgeCArICdcIiBpcyBub3Qgc3VwcG9ydGVkJyk7XG59KTtcbnZhciBfX2NvbW1vbkpTID0gKGNiLCBtb2QpID0+IGZ1bmN0aW9uIF9fcmVxdWlyZTIoKSB7XG4gIHJldHVybiBtb2QgfHwgKDAsIGNiW19fZ2V0T3duUHJvcE5hbWVzKGNiKVswXV0pKChtb2QgPSB7IGV4cG9ydHM6IHt9IH0pLmV4cG9ydHMsIG1vZCksIG1vZC5leHBvcnRzO1xufTtcbnZhciBfX2NvcHlQcm9wcyA9ICh0bywgZnJvbSwgZXhjZXB0LCBkZXNjKSA9PiB7XG4gIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBmcm9tID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBmb3IgKGxldCBrZXkgb2YgX19nZXRPd25Qcm9wTmFtZXMoZnJvbSkpXG4gICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRvLCBrZXkpICYmIGtleSAhPT0gZXhjZXB0KVxuICAgICAgICBfX2RlZlByb3AodG8sIGtleSwgeyBnZXQ6ICgpID0+IGZyb21ba2V5XSwgZW51bWVyYWJsZTogIShkZXNjID0gX19nZXRPd25Qcm9wRGVzYyhmcm9tLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGUgfSk7XG4gIH1cbiAgcmV0dXJuIHRvO1xufTtcbnZhciBfX3RvRVNNID0gKG1vZCwgaXNOb2RlTW9kZSwgdGFyZ2V0KSA9PiAodGFyZ2V0ID0gbW9kICE9IG51bGwgPyBfX2NyZWF0ZShfX2dldFByb3RvT2YobW9kKSkgOiB7fSwgX19jb3B5UHJvcHMoXG4gIC8vIElmIHRoZSBpbXBvcnRlciBpcyBpbiBub2RlIGNvbXBhdGliaWxpdHkgbW9kZSBvciB0aGlzIGlzIG5vdCBhbiBFU01cbiAgLy8gZmlsZSB0aGF0IGhhcyBiZWVuIGNvbnZlcnRlZCB0byBhIENvbW1vbkpTIGZpbGUgdXNpbmcgYSBCYWJlbC1cbiAgLy8gY29tcGF0aWJsZSB0cmFuc2Zvcm0gKGkuZS4gXCJfX2VzTW9kdWxlXCIgaGFzIG5vdCBiZWVuIHNldCksIHRoZW4gc2V0XG4gIC8vIFwiZGVmYXVsdFwiIHRvIHRoZSBDb21tb25KUyBcIm1vZHVsZS5leHBvcnRzXCIgZm9yIG5vZGUgY29tcGF0aWJpbGl0eS5cbiAgaXNOb2RlTW9kZSB8fCAhbW9kIHx8ICFtb2QuX19lc01vZHVsZSA/IF9fZGVmUHJvcCh0YXJnZXQsIFwiZGVmYXVsdFwiLCB7IHZhbHVlOiBtb2QsIGVudW1lcmFibGU6IHRydWUgfSkgOiB0YXJnZXQsXG4gIG1vZFxuKSk7XG5cbmV4cG9ydCB7XG4gIF9fcmVxdWlyZSxcbiAgX19jb21tb25KUyxcbiAgX190b0VTTVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNodW5rLVQyWFMyN0xDLm1qcy5tYXAiXSwibmFtZXMiOlsiX19jcmVhdGUiLCJPYmplY3QiLCJjcmVhdGUiLCJfX2RlZlByb3AiLCJkZWZpbmVQcm9wZXJ0eSIsIl9fZ2V0T3duUHJvcERlc2MiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJfX2dldE93blByb3BOYW1lcyIsImdldE93blByb3BlcnR5TmFtZXMiLCJfX2dldFByb3RvT2YiLCJnZXRQcm90b3R5cGVPZiIsIl9faGFzT3duUHJvcCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiX19yZXF1aXJlIiwieCIsInJlcXVpcmUiLCJQcm94eSIsImdldCIsImEiLCJiIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJFcnJvciIsIl9fY29tbW9uSlMiLCJjYiIsIm1vZCIsIl9fcmVxdWlyZTIiLCJleHBvcnRzIiwiX19jb3B5UHJvcHMiLCJ0byIsImZyb20iLCJleGNlcHQiLCJkZXNjIiwia2V5IiwiY2FsbCIsImVudW1lcmFibGUiLCJfX3RvRVNNIiwiaXNOb2RlTW9kZSIsInRhcmdldCIsIl9fZXNNb2R1bGUiLCJ2YWx1ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/uploadthing/dist/chunk-T2XS27LC.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/uploadthing/dist/chunk-WPSY3MFJ.mjs":
/*!**********************************************************!*\
  !*** ./node_modules/uploadthing/dist/chunk-WPSY3MFJ.mjs ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   incompatibleNodeGuard: () => (/* binding */ incompatibleNodeGuard)\n/* harmony export */ });\n// src/internal/incompat-node-guard.ts\nfunction incompatibleNodeGuard() {\n    var _a, _b, _c, _d;\n    if (typeof process === \"undefined\") return;\n    let major;\n    let minor;\n    const maybeNodeVersion = (_b = (_a = process.versions) == null ? void 0 : _a.node) == null ? void 0 : _b.split(\".\");\n    if (maybeNodeVersion) {\n        [major, minor] = maybeNodeVersion.map((v)=>parseInt(v, 10));\n    }\n    const maybeNodePath = (_c = process.env) == null ? void 0 : _c.NODE;\n    if (!major && maybeNodePath) {\n        const nodeVersion = (_d = /v(\\d+)\\.(\\d+)\\.(\\d+)/.exec(maybeNodePath)) == null ? void 0 : _d[0];\n        if (nodeVersion) {\n            [major, minor] = nodeVersion.substring(1).split(\".\").map((v)=>parseInt(v, 10));\n        }\n    }\n    if (!major || !minor) return;\n    if (major > 18) return;\n    if (major === 18 && minor >= 13) return;\n    console.error(`[UT]: YOU ARE USING A LEGACY (${major}.${minor}) NODE VERSION WHICH ISN'T OFFICIALLY SUPPORTED. PLEASE UPGRADE TO NODE ^18.13.`);\n    process.exit(1);\n}\n //# sourceMappingURL=chunk-WPSY3MFJ.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvdXBsb2FkdGhpbmcvZGlzdC9jaHVuay1XUFNZM01GSi5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLHNDQUFzQztBQUN0QyxTQUFTQTtJQUNQLElBQUlDLElBQUlDLElBQUlDLElBQUlDO0lBQ2hCLElBQUksT0FBT0MsWUFBWSxhQUNyQjtJQUNGLElBQUlDO0lBQ0osSUFBSUM7SUFDSixNQUFNQyxtQkFBbUIsQ0FBQ04sS0FBSyxDQUFDRCxLQUFLSSxRQUFRSSxRQUFRLEtBQUssT0FBTyxLQUFLLElBQUlSLEdBQUdTLElBQUksS0FBSyxPQUFPLEtBQUssSUFBSVIsR0FBR1MsS0FBSyxDQUFDO0lBQy9HLElBQUlILGtCQUFrQjtRQUNwQixDQUFDRixPQUFPQyxNQUFNLEdBQUdDLGlCQUFpQkksR0FBRyxDQUFDLENBQUNDLElBQU1DLFNBQVNELEdBQUc7SUFDM0Q7SUFDQSxNQUFNRSxnQkFBZ0IsQ0FBQ1osS0FBS0UsUUFBUVcsR0FBRyxLQUFLLE9BQU8sS0FBSyxJQUFJYixHQUFHYyxJQUFJO0lBQ25FLElBQUksQ0FBQ1gsU0FBU1MsZUFBZTtRQUMzQixNQUFNRyxjQUFjLENBQUNkLEtBQUssdUJBQXVCZSxJQUFJLENBQUNKLGNBQWEsS0FBTSxPQUFPLEtBQUssSUFBSVgsRUFBRSxDQUFDLEVBQUU7UUFDOUYsSUFBSWMsYUFBYTtZQUNmLENBQUNaLE9BQU9DLE1BQU0sR0FBR1csWUFBWUUsU0FBUyxDQUFDLEdBQUdULEtBQUssQ0FBQyxLQUFLQyxHQUFHLENBQUMsQ0FBQ0MsSUFBTUMsU0FBU0QsR0FBRztRQUM5RTtJQUNGO0lBQ0EsSUFBSSxDQUFDUCxTQUFTLENBQUNDLE9BQ2I7SUFDRixJQUFJRCxRQUFRLElBQ1Y7SUFDRixJQUFJQSxVQUFVLE1BQU1DLFNBQVMsSUFDM0I7SUFDRmMsUUFBUUMsS0FBSyxDQUNYLENBQUMsOEJBQThCLEVBQUVoQixNQUFNLENBQUMsRUFBRUMsTUFBTSwrRUFBK0UsQ0FBQztJQUVsSUYsUUFBUWtCLElBQUksQ0FBQztBQUNmO0FBSUUsQ0FDRiwyQ0FBMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9xdWlsbC8uL25vZGVfbW9kdWxlcy91cGxvYWR0aGluZy9kaXN0L2NodW5rLVdQU1kzTUZKLm1qcz83YjU0Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNyYy9pbnRlcm5hbC9pbmNvbXBhdC1ub2RlLWd1YXJkLnRzXG5mdW5jdGlvbiBpbmNvbXBhdGlibGVOb2RlR3VhcmQoKSB7XG4gIHZhciBfYSwgX2IsIF9jLCBfZDtcbiAgaWYgKHR5cGVvZiBwcm9jZXNzID09PSBcInVuZGVmaW5lZFwiKVxuICAgIHJldHVybjtcbiAgbGV0IG1ham9yO1xuICBsZXQgbWlub3I7XG4gIGNvbnN0IG1heWJlTm9kZVZlcnNpb24gPSAoX2IgPSAoX2EgPSBwcm9jZXNzLnZlcnNpb25zKSA9PSBudWxsID8gdm9pZCAwIDogX2Eubm9kZSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9iLnNwbGl0KFwiLlwiKTtcbiAgaWYgKG1heWJlTm9kZVZlcnNpb24pIHtcbiAgICBbbWFqb3IsIG1pbm9yXSA9IG1heWJlTm9kZVZlcnNpb24ubWFwKCh2KSA9PiBwYXJzZUludCh2LCAxMCkpO1xuICB9XG4gIGNvbnN0IG1heWJlTm9kZVBhdGggPSAoX2MgPSBwcm9jZXNzLmVudikgPT0gbnVsbCA/IHZvaWQgMCA6IF9jLk5PREU7XG4gIGlmICghbWFqb3IgJiYgbWF5YmVOb2RlUGF0aCkge1xuICAgIGNvbnN0IG5vZGVWZXJzaW9uID0gKF9kID0gL3YoXFxkKylcXC4oXFxkKylcXC4oXFxkKykvLmV4ZWMobWF5YmVOb2RlUGF0aCkpID09IG51bGwgPyB2b2lkIDAgOiBfZFswXTtcbiAgICBpZiAobm9kZVZlcnNpb24pIHtcbiAgICAgIFttYWpvciwgbWlub3JdID0gbm9kZVZlcnNpb24uc3Vic3RyaW5nKDEpLnNwbGl0KFwiLlwiKS5tYXAoKHYpID0+IHBhcnNlSW50KHYsIDEwKSk7XG4gICAgfVxuICB9XG4gIGlmICghbWFqb3IgfHwgIW1pbm9yKVxuICAgIHJldHVybjtcbiAgaWYgKG1ham9yID4gMTgpXG4gICAgcmV0dXJuO1xuICBpZiAobWFqb3IgPT09IDE4ICYmIG1pbm9yID49IDEzKVxuICAgIHJldHVybjtcbiAgY29uc29sZS5lcnJvcihcbiAgICBgW1VUXTogWU9VIEFSRSBVU0lORyBBIExFR0FDWSAoJHttYWpvcn0uJHttaW5vcn0pIE5PREUgVkVSU0lPTiBXSElDSCBJU04nVCBPRkZJQ0lBTExZIFNVUFBPUlRFRC4gUExFQVNFIFVQR1JBREUgVE8gTk9ERSBeMTguMTMuYFxuICApO1xuICBwcm9jZXNzLmV4aXQoMSk7XG59XG5cbmV4cG9ydCB7XG4gIGluY29tcGF0aWJsZU5vZGVHdWFyZFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNodW5rLVdQU1kzTUZKLm1qcy5tYXAiXSwibmFtZXMiOlsiaW5jb21wYXRpYmxlTm9kZUd1YXJkIiwiX2EiLCJfYiIsIl9jIiwiX2QiLCJwcm9jZXNzIiwibWFqb3IiLCJtaW5vciIsIm1heWJlTm9kZVZlcnNpb24iLCJ2ZXJzaW9ucyIsIm5vZGUiLCJzcGxpdCIsIm1hcCIsInYiLCJwYXJzZUludCIsIm1heWJlTm9kZVBhdGgiLCJlbnYiLCJOT0RFIiwibm9kZVZlcnNpb24iLCJleGVjIiwic3Vic3RyaW5nIiwiY29uc29sZSIsImVycm9yIiwiZXhpdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/uploadthing/dist/chunk-WPSY3MFJ.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/uploadthing/dist/next.mjs":
/*!************************************************!*\
  !*** ./node_modules/uploadthing/dist/next.mjs ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createNextRouteHandler: () => (/* binding */ createNextRouteHandler),\n/* harmony export */   createUploadthing: () => (/* binding */ createUploadthing)\n/* harmony export */ });\n/* harmony import */ var _chunk_F3SNDKZQ_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-F3SNDKZQ.mjs */ \"(rsc)/./node_modules/uploadthing/dist/chunk-F3SNDKZQ.mjs\");\n/* harmony import */ var _chunk_5KWT532U_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chunk-5KWT532U.mjs */ \"(rsc)/./node_modules/uploadthing/dist/chunk-5KWT532U.mjs\");\n/* harmony import */ var _chunk_WPSY3MFJ_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./chunk-WPSY3MFJ.mjs */ \"(rsc)/./node_modules/uploadthing/dist/chunk-WPSY3MFJ.mjs\");\n/* harmony import */ var _chunk_BPTHKJTK_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./chunk-BPTHKJTK.mjs */ \"(rsc)/./node_modules/uploadthing/dist/chunk-BPTHKJTK.mjs\");\n/* harmony import */ var _chunk_T2XS27LC_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./chunk-T2XS27LC.mjs */ \"(rsc)/./node_modules/uploadthing/dist/chunk-T2XS27LC.mjs\");\n\n\n\n\n\n// src/next.ts\nvar createUploadthing = (opts)=>(0,_chunk_BPTHKJTK_mjs__WEBPACK_IMPORTED_MODULE_3__.createBuilder)(opts);\nvar createNextRouteHandler = (opts)=>{\n    const handlers = (0,_chunk_F3SNDKZQ_mjs__WEBPACK_IMPORTED_MODULE_0__.createServerHandler)(opts);\n    return {\n        POST: (req)=>handlers.POST(req),\n        GET: (req)=>handlers.GET(req)\n    };\n};\n //# sourceMappingURL=next.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvdXBsb2FkdGhpbmcvZGlzdC9uZXh0Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBRThCO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFFOUIsY0FBYztBQUNkLElBQUlFLG9CQUFvQixDQUFDQyxPQUFTRixrRUFBYUEsQ0FBQ0U7QUFDaEQsSUFBSUMseUJBQXlCLENBQUNEO0lBQzVCLE1BQU1FLFdBQVdMLHdFQUFtQkEsQ0FBQ0c7SUFDckMsT0FBTztRQUNMRyxNQUFNLENBQUNDLE1BQVFGLFNBQVNDLElBQUksQ0FBQ0M7UUFDN0JDLEtBQUssQ0FBQ0QsTUFBUUYsU0FBU0csR0FBRyxDQUFDRDtJQUM3QjtBQUNGO0FBSUUsQ0FDRixpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9xdWlsbC8uL25vZGVfbW9kdWxlcy91cGxvYWR0aGluZy9kaXN0L25leHQubWpzP2M1NWYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgY3JlYXRlU2VydmVySGFuZGxlclxufSBmcm9tIFwiLi9jaHVuay1GM1NOREtaUS5tanNcIjtcbmltcG9ydCBcIi4vY2h1bmstNUtXVDUzMlUubWpzXCI7XG5pbXBvcnQgXCIuL2NodW5rLVdQU1kzTUZKLm1qc1wiO1xuaW1wb3J0IHtcbiAgY3JlYXRlQnVpbGRlclxufSBmcm9tIFwiLi9jaHVuay1CUFRIS0pUSy5tanNcIjtcbmltcG9ydCBcIi4vY2h1bmstVDJYUzI3TEMubWpzXCI7XG5cbi8vIHNyYy9uZXh0LnRzXG52YXIgY3JlYXRlVXBsb2FkdGhpbmcgPSAob3B0cykgPT4gY3JlYXRlQnVpbGRlcihvcHRzKTtcbnZhciBjcmVhdGVOZXh0Um91dGVIYW5kbGVyID0gKG9wdHMpID0+IHtcbiAgY29uc3QgaGFuZGxlcnMgPSBjcmVhdGVTZXJ2ZXJIYW5kbGVyKG9wdHMpO1xuICByZXR1cm4ge1xuICAgIFBPU1Q6IChyZXEpID0+IGhhbmRsZXJzLlBPU1QocmVxKSxcbiAgICBHRVQ6IChyZXEpID0+IGhhbmRsZXJzLkdFVChyZXEpXG4gIH07XG59O1xuZXhwb3J0IHtcbiAgY3JlYXRlTmV4dFJvdXRlSGFuZGxlcixcbiAgY3JlYXRlVXBsb2FkdGhpbmdcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1uZXh0Lm1qcy5tYXAiXSwibmFtZXMiOlsiY3JlYXRlU2VydmVySGFuZGxlciIsImNyZWF0ZUJ1aWxkZXIiLCJjcmVhdGVVcGxvYWR0aGluZyIsIm9wdHMiLCJjcmVhdGVOZXh0Um91dGVIYW5kbGVyIiwiaGFuZGxlcnMiLCJQT1NUIiwicmVxIiwiR0VUIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/uploadthing/dist/next.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/uploadthing/dist/chunk-5KWT532U.mjs":
/*!**********************************************************!*\
  !*** ./node_modules/uploadthing/dist/chunk-5KWT532U.mjs ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   maybeParseResponseXML: () => (/* binding */ maybeParseResponseXML)\n/* harmony export */ });\n// src/internal/s3-error-parser.ts\nvar maybeParseResponseXML = (maybeXml) => {\n  const codeMatch = maybeXml.match(/<Code>(.*?)<\\/Code>/s);\n  const messageMatch = maybeXml.match(/<Message>(.*?)<\\/Message>/s);\n  const code = codeMatch == null ? void 0 : codeMatch[1];\n  const message = messageMatch == null ? void 0 : messageMatch[1];\n  if (!code || !message)\n    return null;\n  return { code: s3CodeToUploadThingCode[code] ?? DEFAULT_ERROR_CODE, message };\n};\nvar DEFAULT_ERROR_CODE = \"UPLOAD_FAILED\";\nvar s3CodeToUploadThingCode = {\n  AccessDenied: \"FORBIDDEN\",\n  // 403 Forbidden\n  EntityTooSmall: \"TOO_SMALL\",\n  // 400 Bad Request\n  EntityTooLarge: \"TOO_LARGE\",\n  // 400 Bad Request\n  ExpiredToken: \"FORBIDDEN\",\n  // 400 Bad Request\n  IncorrectNumberOfFilesInPostRequest: \"TOO_MANY_FILES\",\n  // 400 Bad Request\n  InternalError: \"INTERNAL_SERVER_ERROR\",\n  // 500 Internal Server Error\n  KeyTooLongError: \"KEY_TOO_LONG\",\n  // 400 Bad Request\n  MaxMessageLengthExceeded: \"TOO_LARGE\"\n  // 400 Bad Request\n};\n\n\n//# sourceMappingURL=chunk-5KWT532U.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdXBsb2FkdGhpbmcvZGlzdC9jaHVuay01S1dUNTMyVS5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFJRTtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcXVpbGwvLi9ub2RlX21vZHVsZXMvdXBsb2FkdGhpbmcvZGlzdC9jaHVuay01S1dUNTMyVS5tanM/MGJiMCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzcmMvaW50ZXJuYWwvczMtZXJyb3ItcGFyc2VyLnRzXG52YXIgbWF5YmVQYXJzZVJlc3BvbnNlWE1MID0gKG1heWJlWG1sKSA9PiB7XG4gIGNvbnN0IGNvZGVNYXRjaCA9IG1heWJlWG1sLm1hdGNoKC88Q29kZT4oLio/KTxcXC9Db2RlPi9zKTtcbiAgY29uc3QgbWVzc2FnZU1hdGNoID0gbWF5YmVYbWwubWF0Y2goLzxNZXNzYWdlPiguKj8pPFxcL01lc3NhZ2U+L3MpO1xuICBjb25zdCBjb2RlID0gY29kZU1hdGNoID09IG51bGwgPyB2b2lkIDAgOiBjb2RlTWF0Y2hbMV07XG4gIGNvbnN0IG1lc3NhZ2UgPSBtZXNzYWdlTWF0Y2ggPT0gbnVsbCA/IHZvaWQgMCA6IG1lc3NhZ2VNYXRjaFsxXTtcbiAgaWYgKCFjb2RlIHx8ICFtZXNzYWdlKVxuICAgIHJldHVybiBudWxsO1xuICByZXR1cm4geyBjb2RlOiBzM0NvZGVUb1VwbG9hZFRoaW5nQ29kZVtjb2RlXSA/PyBERUZBVUxUX0VSUk9SX0NPREUsIG1lc3NhZ2UgfTtcbn07XG52YXIgREVGQVVMVF9FUlJPUl9DT0RFID0gXCJVUExPQURfRkFJTEVEXCI7XG52YXIgczNDb2RlVG9VcGxvYWRUaGluZ0NvZGUgPSB7XG4gIEFjY2Vzc0RlbmllZDogXCJGT1JCSURERU5cIixcbiAgLy8gNDAzIEZvcmJpZGRlblxuICBFbnRpdHlUb29TbWFsbDogXCJUT09fU01BTExcIixcbiAgLy8gNDAwIEJhZCBSZXF1ZXN0XG4gIEVudGl0eVRvb0xhcmdlOiBcIlRPT19MQVJHRVwiLFxuICAvLyA0MDAgQmFkIFJlcXVlc3RcbiAgRXhwaXJlZFRva2VuOiBcIkZPUkJJRERFTlwiLFxuICAvLyA0MDAgQmFkIFJlcXVlc3RcbiAgSW5jb3JyZWN0TnVtYmVyT2ZGaWxlc0luUG9zdFJlcXVlc3Q6IFwiVE9PX01BTllfRklMRVNcIixcbiAgLy8gNDAwIEJhZCBSZXF1ZXN0XG4gIEludGVybmFsRXJyb3I6IFwiSU5URVJOQUxfU0VSVkVSX0VSUk9SXCIsXG4gIC8vIDUwMCBJbnRlcm5hbCBTZXJ2ZXIgRXJyb3JcbiAgS2V5VG9vTG9uZ0Vycm9yOiBcIktFWV9UT09fTE9OR1wiLFxuICAvLyA0MDAgQmFkIFJlcXVlc3RcbiAgTWF4TWVzc2FnZUxlbmd0aEV4Y2VlZGVkOiBcIlRPT19MQVJHRVwiXG4gIC8vIDQwMCBCYWQgUmVxdWVzdFxufTtcblxuZXhwb3J0IHtcbiAgbWF5YmVQYXJzZVJlc3BvbnNlWE1MXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2h1bmstNUtXVDUzMlUubWpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/uploadthing/dist/chunk-5KWT532U.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/uploadthing/dist/chunk-T2XS27LC.mjs":
/*!**********************************************************!*\
  !*** ./node_modules/uploadthing/dist/chunk-T2XS27LC.mjs ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   __commonJS: () => (/* binding */ __commonJS),\n/* harmony export */   __require: () => (/* binding */ __require),\n/* harmony export */   __toESM: () => (/* binding */ __toESM)\n/* harmony export */ });\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __require = /* @__PURE__ */ ((x) => typeof require !== \"undefined\" ? require : typeof Proxy !== \"undefined\" ? new Proxy(x, {\n  get: (a, b) => (typeof require !== \"undefined\" ? require : a)[b]\n}) : x)(function(x) {\n  if (typeof require !== \"undefined\")\n    return require.apply(this, arguments);\n  throw new Error('Dynamic require of \"' + x + '\" is not supported');\n});\nvar __commonJS = (cb, mod) => function __require2() {\n  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\n\n\n//# sourceMappingURL=chunk-T2XS27LC.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdXBsb2FkdGhpbmcvZGlzdC9jaHVuay1UMlhTMjdMQy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSwyREFBMkQsYUFBYTtBQUN4RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLDRGQUE0RjtBQUN6SDtBQUNBO0FBQ0E7QUFDQSxtR0FBbUc7QUFDbkc7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5RUFBeUUsOEJBQThCO0FBQ3ZHO0FBQ0E7O0FBTUU7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL3F1aWxsLy4vbm9kZV9tb2R1bGVzL3VwbG9hZHRoaW5nL2Rpc3QvY2h1bmstVDJYUzI3TEMubWpzPzQwYmEiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIF9fY3JlYXRlID0gT2JqZWN0LmNyZWF0ZTtcbnZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19nZXRPd25Qcm9wRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgX19nZXRPd25Qcm9wTmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBfX2dldFByb3RvT2YgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfX3JlcXVpcmUgPSAvKiBAX19QVVJFX18gKi8gKCh4KSA9PiB0eXBlb2YgcmVxdWlyZSAhPT0gXCJ1bmRlZmluZWRcIiA/IHJlcXVpcmUgOiB0eXBlb2YgUHJveHkgIT09IFwidW5kZWZpbmVkXCIgPyBuZXcgUHJveHkoeCwge1xuICBnZXQ6IChhLCBiKSA9PiAodHlwZW9mIHJlcXVpcmUgIT09IFwidW5kZWZpbmVkXCIgPyByZXF1aXJlIDogYSlbYl1cbn0pIDogeCkoZnVuY3Rpb24oeCkge1xuICBpZiAodHlwZW9mIHJlcXVpcmUgIT09IFwidW5kZWZpbmVkXCIpXG4gICAgcmV0dXJuIHJlcXVpcmUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgdGhyb3cgbmV3IEVycm9yKCdEeW5hbWljIHJlcXVpcmUgb2YgXCInICsgeCArICdcIiBpcyBub3Qgc3VwcG9ydGVkJyk7XG59KTtcbnZhciBfX2NvbW1vbkpTID0gKGNiLCBtb2QpID0+IGZ1bmN0aW9uIF9fcmVxdWlyZTIoKSB7XG4gIHJldHVybiBtb2QgfHwgKDAsIGNiW19fZ2V0T3duUHJvcE5hbWVzKGNiKVswXV0pKChtb2QgPSB7IGV4cG9ydHM6IHt9IH0pLmV4cG9ydHMsIG1vZCksIG1vZC5leHBvcnRzO1xufTtcbnZhciBfX2NvcHlQcm9wcyA9ICh0bywgZnJvbSwgZXhjZXB0LCBkZXNjKSA9PiB7XG4gIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBmcm9tID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBmb3IgKGxldCBrZXkgb2YgX19nZXRPd25Qcm9wTmFtZXMoZnJvbSkpXG4gICAgICBpZiAoIV9faGFzT3duUHJvcC5jYWxsKHRvLCBrZXkpICYmIGtleSAhPT0gZXhjZXB0KVxuICAgICAgICBfX2RlZlByb3AodG8sIGtleSwgeyBnZXQ6ICgpID0+IGZyb21ba2V5XSwgZW51bWVyYWJsZTogIShkZXNjID0gX19nZXRPd25Qcm9wRGVzYyhmcm9tLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGUgfSk7XG4gIH1cbiAgcmV0dXJuIHRvO1xufTtcbnZhciBfX3RvRVNNID0gKG1vZCwgaXNOb2RlTW9kZSwgdGFyZ2V0KSA9PiAodGFyZ2V0ID0gbW9kICE9IG51bGwgPyBfX2NyZWF0ZShfX2dldFByb3RvT2YobW9kKSkgOiB7fSwgX19jb3B5UHJvcHMoXG4gIC8vIElmIHRoZSBpbXBvcnRlciBpcyBpbiBub2RlIGNvbXBhdGliaWxpdHkgbW9kZSBvciB0aGlzIGlzIG5vdCBhbiBFU01cbiAgLy8gZmlsZSB0aGF0IGhhcyBiZWVuIGNvbnZlcnRlZCB0byBhIENvbW1vbkpTIGZpbGUgdXNpbmcgYSBCYWJlbC1cbiAgLy8gY29tcGF0aWJsZSB0cmFuc2Zvcm0gKGkuZS4gXCJfX2VzTW9kdWxlXCIgaGFzIG5vdCBiZWVuIHNldCksIHRoZW4gc2V0XG4gIC8vIFwiZGVmYXVsdFwiIHRvIHRoZSBDb21tb25KUyBcIm1vZHVsZS5leHBvcnRzXCIgZm9yIG5vZGUgY29tcGF0aWJpbGl0eS5cbiAgaXNOb2RlTW9kZSB8fCAhbW9kIHx8ICFtb2QuX19lc01vZHVsZSA/IF9fZGVmUHJvcCh0YXJnZXQsIFwiZGVmYXVsdFwiLCB7IHZhbHVlOiBtb2QsIGVudW1lcmFibGU6IHRydWUgfSkgOiB0YXJnZXQsXG4gIG1vZFxuKSk7XG5cbmV4cG9ydCB7XG4gIF9fcmVxdWlyZSxcbiAgX19jb21tb25KUyxcbiAgX190b0VTTVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNodW5rLVQyWFMyN0xDLm1qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/uploadthing/dist/chunk-T2XS27LC.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/uploadthing/dist/client.mjs":
/*!**************************************************!*\
  !*** ./node_modules/uploadthing/dist/client.mjs ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DANGEROUS__uploadFiles: () => (/* binding */ DANGEROUS__uploadFiles),\n/* harmony export */   INTERNAL_doFormatting: () => (/* binding */ INTERNAL_doFormatting),\n/* harmony export */   allowedContentTextLabelGenerator: () => (/* binding */ allowedContentTextLabelGenerator),\n/* harmony export */   capitalizeStart: () => (/* binding */ capitalizeStart),\n/* harmony export */   classNames: () => (/* binding */ classNames),\n/* harmony export */   contentFieldToContent: () => (/* binding */ contentFieldToContent),\n/* harmony export */   genUploader: () => (/* binding */ genUploader),\n/* harmony export */   generateClientDropzoneAccept: () => (/* binding */ generateClientDropzoneAccept),\n/* harmony export */   generateMimeTypes: () => (/* binding */ generateMimeTypes),\n/* harmony export */   generatePermittedFileTypes: () => (/* binding */ generatePermittedFileTypes),\n/* harmony export */   styleFieldToClassName: () => (/* binding */ styleFieldToClassName),\n/* harmony export */   styleFieldToCssObject: () => (/* binding */ styleFieldToCssObject)\n/* harmony export */ });\n/* harmony import */ var _chunk_5KWT532U_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-5KWT532U.mjs */ \"(ssr)/./node_modules/uploadthing/dist/chunk-5KWT532U.mjs\");\n/* harmony import */ var _chunk_T2XS27LC_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chunk-T2XS27LC.mjs */ \"(ssr)/./node_modules/uploadthing/dist/chunk-T2XS27LC.mjs\");\n/* harmony import */ var _uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @uploadthing/shared */ \"(ssr)/./node_modules/@uploadthing/shared/dist/index.mjs\");\n\n\n\n// src/client.ts\n\n\n// src/internal/component-theming.ts\n\nvar generatePermittedFileTypes = (config) => {\n  const fileTypes = config ? (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.objectKeys)(config) : [];\n  const maxFileCount = config ? Object.values(config).map((v) => v.maxFileCount) : [];\n  return { fileTypes, multiple: maxFileCount.some((v) => v && v > 1) };\n};\nvar capitalizeStart = (str) => {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n};\nvar INTERNAL_doFormatting = (config) => {\n  if (!config)\n    return \"\";\n  const allowedTypes = (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.objectKeys)(config);\n  const formattedTypes = allowedTypes.map((f) => f === \"blob\" ? \"file\" : f);\n  if (formattedTypes.length > 1) {\n    const lastType = formattedTypes.pop();\n    return `${formattedTypes.join(\"s, \")} and ${lastType}s`;\n  }\n  const key = allowedTypes[0];\n  const formattedKey = formattedTypes[0];\n  const { maxFileSize, maxFileCount } = config[key];\n  if (maxFileCount && maxFileCount > 1) {\n    return `${formattedKey}s up to ${maxFileSize}, max ${maxFileCount}`;\n  } else {\n    return `${formattedKey} (${maxFileSize})`;\n  }\n};\nvar allowedContentTextLabelGenerator = (config) => {\n  return capitalizeStart(INTERNAL_doFormatting(config));\n};\nvar styleFieldToClassName = (styleField, args) => {\n  if (typeof styleField === \"string\")\n    return styleField;\n  if (typeof styleField === \"function\") {\n    const result = styleField(args);\n    if (typeof result === \"string\")\n      return result;\n  }\n  return \"\";\n};\nvar styleFieldToCssObject = (styleField, args) => {\n  if (typeof styleField === \"object\")\n    return styleField;\n  if (typeof styleField === \"function\") {\n    const result = styleField(args);\n    if (typeof result === \"object\")\n      return result;\n  }\n  return {};\n};\nvar contentFieldToContent = (contentField, arg) => {\n  if (!contentField)\n    return null;\n  if (typeof contentField !== \"function\")\n    return contentField;\n  if (typeof contentField === \"function\") {\n    const result = contentField(arg);\n    return result;\n  }\n};\n\n// src/client.ts\nfunction fetchWithProgress(url, opts = {}, onProgress, onUploadBegin) {\n  return new Promise((res, rej) => {\n    const xhr = new XMLHttpRequest();\n    xhr.open(opts.method ?? \"get\", url);\n    opts.headers && Object.keys(opts.headers).forEach(\n      (h) => opts.headers && xhr.setRequestHeader(h, opts.headers.get(h) ?? \"\")\n    );\n    xhr.onload = (e) => {\n      res(e.target);\n    };\n    xhr.onerror = rej;\n    if (xhr.upload && onProgress)\n      xhr.upload.onprogress = onProgress;\n    if (xhr.upload && onUploadBegin)\n      xhr.upload.onloadstart = onUploadBegin;\n    xhr.send(opts.body);\n  });\n}\nvar createAPIRequestUrl = (config) => {\n  const url = new URL(\n    config.url ?? `${window.location.origin}/api/uploadthing`\n  );\n  const queryParams = new URLSearchParams(url.search);\n  queryParams.set(\"actionType\", config.actionType);\n  queryParams.set(\"slug\", config.slug);\n  url.search = queryParams.toString();\n  return url.toString();\n};\nvar DANGEROUS__uploadFiles = async (opts, config) => {\n  const s3ConnectionRes = await fetch(\n    createAPIRequestUrl({\n      url: config == null ? void 0 : config.url,\n      slug: String(opts.endpoint),\n      actionType: \"upload\"\n    }),\n    {\n      method: \"POST\",\n      body: JSON.stringify({\n        files: opts.files.map((f) => f.name),\n        input: opts.input\n      }),\n      // Express requires Content-Type to be explicitly set to parse body properly\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }\n  ).then(async (res) => {\n    if (!res.ok) {\n      const error = await _uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.UploadThingError.fromResponse(res);\n      throw error;\n    }\n    const jsonOrError = await (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.safeParseJSON)(res);\n    if (jsonOrError instanceof Error) {\n      throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.UploadThingError({\n        code: \"BAD_REQUEST\",\n        message: jsonOrError.message,\n        cause: res\n      });\n    }\n    return jsonOrError;\n  });\n  if (!s3ConnectionRes || !Array.isArray(s3ConnectionRes)) {\n    throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.UploadThingError({\n      code: \"BAD_REQUEST\",\n      message: \"No URL. How did you even get here?\",\n      cause: s3ConnectionRes\n    });\n  }\n  const fileUploadPromises = s3ConnectionRes.map(async (presigned) => {\n    const file = opts.files.find((f) => f.name === presigned.name);\n    if (!file) {\n      console.error(\"No file found for presigned URL\", presigned);\n      throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.UploadThingError({\n        code: \"NOT_FOUND\",\n        message: \"No file found for presigned URL\",\n        cause: `Expected file with name ${presigned.name} but got '${opts.files.join(\",\")}'`\n      });\n    }\n    const { url, fields } = presigned.presignedUrl;\n    const formData = new FormData();\n    if (presigned.fileType === file.type.split(\"/\")[0] || presigned.fileType === file.type) {\n      formData.append(\"Content-Type\", file.type);\n    } else if (presigned.fileType === \"blob\") {\n      formData.append(\"Content-Type\", \"application/octet-stream\");\n    } else if (presigned.fileType === \"pdf\") {\n      formData.append(\"Content-Type\", \"application/pdf\");\n    }\n    Object.entries({ ...fields, file }).forEach(([key, value]) => {\n      formData.append(key, value);\n    });\n    const upload = await fetchWithProgress(\n      url,\n      {\n        method: \"POST\",\n        body: formData,\n        headers: new Headers({\n          Accept: \"application/xml\"\n        })\n      },\n      (progressEvent) => {\n        var _a;\n        return (_a = opts.onUploadProgress) == null ? void 0 : _a.call(opts, {\n          file: file.name,\n          progress: progressEvent.loaded / progressEvent.total * 100\n        });\n      },\n      () => {\n        var _a;\n        (_a = opts.onUploadBegin) == null ? void 0 : _a.call(opts, {\n          file: file.name\n        });\n      }\n    );\n    if (upload.status > 299 || upload.status < 200) {\n      await fetch(\n        createAPIRequestUrl({\n          url: config == null ? void 0 : config.url,\n          slug: String(opts.endpoint),\n          actionType: \"failure\"\n        }),\n        {\n          method: \"POST\",\n          body: JSON.stringify({\n            fileKey: fields.key\n          })\n        }\n      );\n      const parsed = (0,_chunk_5KWT532U_mjs__WEBPACK_IMPORTED_MODULE_0__.maybeParseResponseXML)(upload.responseText);\n      if (parsed == null ? void 0 : parsed.message) {\n        throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.UploadThingError({\n          code: parsed.code,\n          message: parsed.message\n        });\n      } else {\n        throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.UploadThingError({\n          code: \"UPLOAD_FAILED\",\n          message: `Failed to upload file ${file.name} to S3`,\n          cause: upload.responseText\n        });\n      }\n    }\n    const genUrl = \"https://utfs.io/f/\" + encodeURIComponent(fields.key);\n    await (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.pollForFileData)(presigned.key);\n    const ret = {\n      fileName: file.name,\n      name: file.name,\n      fileSize: file.size,\n      size: file.size,\n      fileKey: presigned.key,\n      key: presigned.key,\n      fileUrl: genUrl,\n      url: genUrl\n    };\n    return ret;\n  });\n  return Promise.all(fileUploadPromises);\n};\nvar genUploader = () => {\n  return DANGEROUS__uploadFiles;\n};\nvar classNames = (...classes) => {\n  return classes.filter(Boolean).join(\" \");\n};\nvar generateMimeTypes = (fileTypes) => {\n  const accepted = fileTypes.map((type) => {\n    if (type === \"blob\")\n      return \"blob\";\n    if (type === \"pdf\")\n      return \"application/pdf\";\n    if (type.includes(\"/\"))\n      return type;\n    else\n      return `${type}/*`;\n  });\n  if (accepted.includes(\"blob\")) {\n    return void 0;\n  }\n  return accepted;\n};\nvar generateClientDropzoneAccept = (fileTypes) => {\n  const mimeTypes = generateMimeTypes(fileTypes);\n  if (!mimeTypes)\n    return void 0;\n  return Object.fromEntries(mimeTypes.map((type) => [type, []]));\n};\n\n//# sourceMappingURL=client.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/uploadthing/dist/client.mjs\n");

/***/ })

};
;