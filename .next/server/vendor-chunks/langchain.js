"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/langchain";
exports.ids = ["vendor-chunks/langchain"];
exports.modules = {

/***/ "(rsc)/./node_modules/langchain/node_modules/ansi-styles/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/langchain/node_modules/ansi-styles/index.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\n\nconst ANSI_BACKGROUND_OFFSET = 10;\nconst wrapAnsi256 = (offset = 0)=>(code)=>`\\u001B[${38 + offset};5;${code}m`;\nconst wrapAnsi16m = (offset = 0)=>(red, green, blue)=>`\\u001B[${38 + offset};2;${red};${green};${blue}m`;\nfunction assembleStyles() {\n    const codes = new Map();\n    const styles = {\n        modifier: {\n            reset: [\n                0,\n                0\n            ],\n            // 21 isn't widely supported and 22 does the same thing\n            bold: [\n                1,\n                22\n            ],\n            dim: [\n                2,\n                22\n            ],\n            italic: [\n                3,\n                23\n            ],\n            underline: [\n                4,\n                24\n            ],\n            overline: [\n                53,\n                55\n            ],\n            inverse: [\n                7,\n                27\n            ],\n            hidden: [\n                8,\n                28\n            ],\n            strikethrough: [\n                9,\n                29\n            ]\n        },\n        color: {\n            black: [\n                30,\n                39\n            ],\n            red: [\n                31,\n                39\n            ],\n            green: [\n                32,\n                39\n            ],\n            yellow: [\n                33,\n                39\n            ],\n            blue: [\n                34,\n                39\n            ],\n            magenta: [\n                35,\n                39\n            ],\n            cyan: [\n                36,\n                39\n            ],\n            white: [\n                37,\n                39\n            ],\n            // Bright color\n            blackBright: [\n                90,\n                39\n            ],\n            redBright: [\n                91,\n                39\n            ],\n            greenBright: [\n                92,\n                39\n            ],\n            yellowBright: [\n                93,\n                39\n            ],\n            blueBright: [\n                94,\n                39\n            ],\n            magentaBright: [\n                95,\n                39\n            ],\n            cyanBright: [\n                96,\n                39\n            ],\n            whiteBright: [\n                97,\n                39\n            ]\n        },\n        bgColor: {\n            bgBlack: [\n                40,\n                49\n            ],\n            bgRed: [\n                41,\n                49\n            ],\n            bgGreen: [\n                42,\n                49\n            ],\n            bgYellow: [\n                43,\n                49\n            ],\n            bgBlue: [\n                44,\n                49\n            ],\n            bgMagenta: [\n                45,\n                49\n            ],\n            bgCyan: [\n                46,\n                49\n            ],\n            bgWhite: [\n                47,\n                49\n            ],\n            // Bright color\n            bgBlackBright: [\n                100,\n                49\n            ],\n            bgRedBright: [\n                101,\n                49\n            ],\n            bgGreenBright: [\n                102,\n                49\n            ],\n            bgYellowBright: [\n                103,\n                49\n            ],\n            bgBlueBright: [\n                104,\n                49\n            ],\n            bgMagentaBright: [\n                105,\n                49\n            ],\n            bgCyanBright: [\n                106,\n                49\n            ],\n            bgWhiteBright: [\n                107,\n                49\n            ]\n        }\n    };\n    // Alias bright black as gray (and grey)\n    styles.color.gray = styles.color.blackBright;\n    styles.bgColor.bgGray = styles.bgColor.bgBlackBright;\n    styles.color.grey = styles.color.blackBright;\n    styles.bgColor.bgGrey = styles.bgColor.bgBlackBright;\n    for (const [groupName, group] of Object.entries(styles)){\n        for (const [styleName, style] of Object.entries(group)){\n            styles[styleName] = {\n                open: `\\u001B[${style[0]}m`,\n                close: `\\u001B[${style[1]}m`\n            };\n            group[styleName] = styles[styleName];\n            codes.set(style[0], style[1]);\n        }\n        Object.defineProperty(styles, groupName, {\n            value: group,\n            enumerable: false\n        });\n    }\n    Object.defineProperty(styles, \"codes\", {\n        value: codes,\n        enumerable: false\n    });\n    styles.color.close = \"\\x1b[39m\";\n    styles.bgColor.close = \"\\x1b[49m\";\n    styles.color.ansi256 = wrapAnsi256();\n    styles.color.ansi16m = wrapAnsi16m();\n    styles.bgColor.ansi256 = wrapAnsi256(ANSI_BACKGROUND_OFFSET);\n    styles.bgColor.ansi16m = wrapAnsi16m(ANSI_BACKGROUND_OFFSET);\n    // From https://github.com/Qix-/color-convert/blob/3f0e0d4e92e235796ccb17f6e85c72094a651f49/conversions.js\n    Object.defineProperties(styles, {\n        rgbToAnsi256: {\n            value: (red, green, blue)=>{\n                // We use the extended greyscale palette here, with the exception of\n                // black and white. normal palette only has 4 greyscale shades.\n                if (red === green && green === blue) {\n                    if (red < 8) {\n                        return 16;\n                    }\n                    if (red > 248) {\n                        return 231;\n                    }\n                    return Math.round((red - 8) / 247 * 24) + 232;\n                }\n                return 16 + 36 * Math.round(red / 255 * 5) + 6 * Math.round(green / 255 * 5) + Math.round(blue / 255 * 5);\n            },\n            enumerable: false\n        },\n        hexToRgb: {\n            value: (hex)=>{\n                const matches = /(?<colorString>[a-f\\d]{6}|[a-f\\d]{3})/i.exec(hex.toString(16));\n                if (!matches) {\n                    return [\n                        0,\n                        0,\n                        0\n                    ];\n                }\n                let { colorString } = matches.groups;\n                if (colorString.length === 3) {\n                    colorString = colorString.split(\"\").map((character)=>character + character).join(\"\");\n                }\n                const integer = Number.parseInt(colorString, 16);\n                return [\n                    integer >> 16 & 0xFF,\n                    integer >> 8 & 0xFF,\n                    integer & 0xFF\n                ];\n            },\n            enumerable: false\n        },\n        hexToAnsi256: {\n            value: (hex)=>styles.rgbToAnsi256(...styles.hexToRgb(hex)),\n            enumerable: false\n        }\n    });\n    return styles;\n}\n// Make the export immutable\nObject.defineProperty(module, \"exports\", {\n    enumerable: true,\n    get: assembleStyles\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/node_modules/ansi-styles/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/callbacks/base.js":
/*!*******************************************************!*\
  !*** ./node_modules/langchain/dist/callbacks/base.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseCallbackHandler: () => (/* binding */ BaseCallbackHandler)\n/* harmony export */ });\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! uuid */ \"(rsc)/./node_modules/uuid/dist/esm-node/v4.js\");\n/* harmony import */ var _load_serializable_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../load/serializable.js */ \"(rsc)/./node_modules/langchain/dist/load/serializable.js\");\n\n\n/**\n * Abstract class that provides a set of optional methods that can be\n * overridden in derived classes to handle various events during the\n * execution of a LangChain application.\n */ class BaseCallbackHandlerMethodsClass {\n}\n/**\n * Abstract base class for creating callback handlers in the LangChain\n * framework. It provides a set of optional methods that can be overridden\n * in derived classes to handle various events during the execution of a\n * LangChain application.\n */ class BaseCallbackHandler extends BaseCallbackHandlerMethodsClass {\n    get lc_namespace() {\n        return [\n            \"langchain\",\n            \"callbacks\",\n            this.name\n        ];\n    }\n    get lc_secrets() {\n        return undefined;\n    }\n    get lc_attributes() {\n        return undefined;\n    }\n    get lc_aliases() {\n        return undefined;\n    }\n    /**\n     * The name of the serializable. Override to provide an alias or\n     * to preserve the serialized module name in minified environments.\n     *\n     * Implemented as a static method to support loading logic.\n     */ static lc_name() {\n        return this.name;\n    }\n    /**\n     * The final serialized identifier for the module.\n     */ get lc_id() {\n        return [\n            ...this.lc_namespace,\n            (0,_load_serializable_js__WEBPACK_IMPORTED_MODULE_0__.get_lc_unique_name)(this.constructor)\n        ];\n    }\n    constructor(input){\n        super();\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"lc_kwargs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"ignoreLLM\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"ignoreChain\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"ignoreAgent\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"ignoreRetriever\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"awaitHandlers\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: typeof process !== \"undefined\" ? process.env?.LANGCHAIN_CALLBACKS_BACKGROUND !== \"true\" : true\n        });\n        this.lc_kwargs = input || {};\n        if (input) {\n            this.ignoreLLM = input.ignoreLLM ?? this.ignoreLLM;\n            this.ignoreChain = input.ignoreChain ?? this.ignoreChain;\n            this.ignoreAgent = input.ignoreAgent ?? this.ignoreAgent;\n            this.ignoreRetriever = input.ignoreRetriever ?? this.ignoreRetriever;\n        }\n    }\n    copy() {\n        return new this.constructor(this);\n    }\n    toJSON() {\n        return _load_serializable_js__WEBPACK_IMPORTED_MODULE_0__.Serializable.prototype.toJSON.call(this);\n    }\n    toJSONNotImplemented() {\n        return _load_serializable_js__WEBPACK_IMPORTED_MODULE_0__.Serializable.prototype.toJSONNotImplemented.call(this);\n    }\n    static fromMethods(methods) {\n        class Handler extends BaseCallbackHandler {\n            constructor(){\n                super();\n                Object.defineProperty(this, \"name\", {\n                    enumerable: true,\n                    configurable: true,\n                    writable: true,\n                    value: uuid__WEBPACK_IMPORTED_MODULE_1__[\"default\"]()\n                });\n                Object.assign(this, methods);\n            }\n        }\n        return new Handler();\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/callbacks/base.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/callbacks/handlers/console.js":
/*!*******************************************************************!*\
  !*** ./node_modules/langchain/dist/callbacks/handlers/console.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ConsoleCallbackHandler: () => (/* binding */ ConsoleCallbackHandler)\n/* harmony export */ });\n/* harmony import */ var ansi_styles__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ansi-styles */ \"(rsc)/./node_modules/langchain/node_modules/ansi-styles/index.js\");\n/* harmony import */ var _tracer_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tracer.js */ \"(rsc)/./node_modules/langchain/dist/callbacks/handlers/tracer.js\");\n\n\nfunction wrap(style, text) {\n    return `${style.open}${text}${style.close}`;\n}\nfunction tryJsonStringify(obj, fallback) {\n    try {\n        return JSON.stringify(obj, null, 2);\n    } catch (err) {\n        return fallback;\n    }\n}\nfunction elapsed(run) {\n    if (!run.end_time) return \"\";\n    const elapsed = run.end_time - run.start_time;\n    if (elapsed < 1000) {\n        return `${elapsed}ms`;\n    }\n    return `${(elapsed / 1000).toFixed(2)}s`;\n}\nconst { color } = ansi_styles__WEBPACK_IMPORTED_MODULE_0__;\n/**\n * A tracer that logs all events to the console. It extends from the\n * `BaseTracer` class and overrides its methods to provide custom logging\n * functionality.\n */ class ConsoleCallbackHandler extends _tracer_js__WEBPACK_IMPORTED_MODULE_1__.BaseTracer {\n    constructor(){\n        super(...arguments);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"console_callback_handler\"\n        });\n    }\n    /**\n     * Method used to persist the run. In this case, it simply returns a\n     * resolved promise as there's no persistence logic.\n     * @param _run The run to persist.\n     * @returns A resolved promise.\n     */ persistRun(_run) {\n        return Promise.resolve();\n    }\n    // utility methods\n    /**\n     * Method used to get all the parent runs of a given run.\n     * @param run The run whose parents are to be retrieved.\n     * @returns An array of parent runs.\n     */ getParents(run) {\n        const parents = [];\n        let currentRun = run;\n        while(currentRun.parent_run_id){\n            const parent = this.runMap.get(currentRun.parent_run_id);\n            if (parent) {\n                parents.push(parent);\n                currentRun = parent;\n            } else {\n                break;\n            }\n        }\n        return parents;\n    }\n    /**\n     * Method used to get a string representation of the run's lineage, which\n     * is used in logging.\n     * @param run The run whose lineage is to be retrieved.\n     * @returns A string representation of the run's lineage.\n     */ getBreadcrumbs(run) {\n        const parents = this.getParents(run).reverse();\n        const string = [\n            ...parents,\n            run\n        ].map((parent, i, arr)=>{\n            const name = `${parent.execution_order}:${parent.run_type}:${parent.name}`;\n            return i === arr.length - 1 ? wrap(ansi_styles__WEBPACK_IMPORTED_MODULE_0__.bold, name) : name;\n        }).join(\" > \");\n        return wrap(color.grey, string);\n    }\n    // logging methods\n    /**\n     * Method used to log the start of a chain run.\n     * @param run The chain run that has started.\n     * @returns void\n     */ onChainStart(run) {\n        const crumbs = this.getBreadcrumbs(run);\n        console.log(`${wrap(color.green, \"[chain/start]\")} [${crumbs}] Entering Chain run with input: ${tryJsonStringify(run.inputs, \"[inputs]\")}`);\n    }\n    /**\n     * Method used to log the end of a chain run.\n     * @param run The chain run that has ended.\n     * @returns void\n     */ onChainEnd(run) {\n        const crumbs = this.getBreadcrumbs(run);\n        console.log(`${wrap(color.cyan, \"[chain/end]\")} [${crumbs}] [${elapsed(run)}] Exiting Chain run with output: ${tryJsonStringify(run.outputs, \"[outputs]\")}`);\n    }\n    /**\n     * Method used to log any errors of a chain run.\n     * @param run The chain run that has errored.\n     * @returns void\n     */ onChainError(run) {\n        const crumbs = this.getBreadcrumbs(run);\n        console.log(`${wrap(color.red, \"[chain/error]\")} [${crumbs}] [${elapsed(run)}] Chain run errored with error: ${tryJsonStringify(run.error, \"[error]\")}`);\n    }\n    /**\n     * Method used to log the start of an LLM run.\n     * @param run The LLM run that has started.\n     * @returns void\n     */ onLLMStart(run) {\n        const crumbs = this.getBreadcrumbs(run);\n        const inputs = \"prompts\" in run.inputs ? {\n            prompts: run.inputs.prompts.map((p)=>p.trim())\n        } : run.inputs;\n        console.log(`${wrap(color.green, \"[llm/start]\")} [${crumbs}] Entering LLM run with input: ${tryJsonStringify(inputs, \"[inputs]\")}`);\n    }\n    /**\n     * Method used to log the end of an LLM run.\n     * @param run The LLM run that has ended.\n     * @returns void\n     */ onLLMEnd(run) {\n        const crumbs = this.getBreadcrumbs(run);\n        console.log(`${wrap(color.cyan, \"[llm/end]\")} [${crumbs}] [${elapsed(run)}] Exiting LLM run with output: ${tryJsonStringify(run.outputs, \"[response]\")}`);\n    }\n    /**\n     * Method used to log any errors of an LLM run.\n     * @param run The LLM run that has errored.\n     * @returns void\n     */ onLLMError(run) {\n        const crumbs = this.getBreadcrumbs(run);\n        console.log(`${wrap(color.red, \"[llm/error]\")} [${crumbs}] [${elapsed(run)}] LLM run errored with error: ${tryJsonStringify(run.error, \"[error]\")}`);\n    }\n    /**\n     * Method used to log the start of a tool run.\n     * @param run The tool run that has started.\n     * @returns void\n     */ onToolStart(run) {\n        const crumbs = this.getBreadcrumbs(run);\n        console.log(`${wrap(color.green, \"[tool/start]\")} [${crumbs}] Entering Tool run with input: \"${run.inputs.input?.trim()}\"`);\n    }\n    /**\n     * Method used to log the end of a tool run.\n     * @param run The tool run that has ended.\n     * @returns void\n     */ onToolEnd(run) {\n        const crumbs = this.getBreadcrumbs(run);\n        console.log(`${wrap(color.cyan, \"[tool/end]\")} [${crumbs}] [${elapsed(run)}] Exiting Tool run with output: \"${run.outputs?.output?.trim()}\"`);\n    }\n    /**\n     * Method used to log any errors of a tool run.\n     * @param run The tool run that has errored.\n     * @returns void\n     */ onToolError(run) {\n        const crumbs = this.getBreadcrumbs(run);\n        console.log(`${wrap(color.red, \"[tool/error]\")} [${crumbs}] [${elapsed(run)}] Tool run errored with error: ${tryJsonStringify(run.error, \"[error]\")}`);\n    }\n    /**\n     * Method used to log the start of a retriever run.\n     * @param run The retriever run that has started.\n     * @returns void\n     */ onRetrieverStart(run) {\n        const crumbs = this.getBreadcrumbs(run);\n        console.log(`${wrap(color.green, \"[retriever/start]\")} [${crumbs}] Entering Retriever run with input: ${tryJsonStringify(run.inputs, \"[inputs]\")}`);\n    }\n    /**\n     * Method used to log the end of a retriever run.\n     * @param run The retriever run that has ended.\n     * @returns void\n     */ onRetrieverEnd(run) {\n        const crumbs = this.getBreadcrumbs(run);\n        console.log(`${wrap(color.cyan, \"[retriever/end]\")} [${crumbs}] [${elapsed(run)}] Exiting Retriever run with output: ${tryJsonStringify(run.outputs, \"[outputs]\")}`);\n    }\n    /**\n     * Method used to log any errors of a retriever run.\n     * @param run The retriever run that has errored.\n     * @returns void\n     */ onRetrieverError(run) {\n        const crumbs = this.getBreadcrumbs(run);\n        console.log(`${wrap(color.red, \"[retriever/error]\")} [${crumbs}] [${elapsed(run)}] Retriever run errored with error: ${tryJsonStringify(run.error, \"[error]\")}`);\n    }\n    /**\n     * Method used to log the action selected by the agent.\n     * @param run The run in which the agent action occurred.\n     * @returns void\n     */ onAgentAction(run) {\n        const agentRun = run;\n        const crumbs = this.getBreadcrumbs(run);\n        console.log(`${wrap(color.blue, \"[agent/action]\")} [${crumbs}] Agent selected action: ${tryJsonStringify(agentRun.actions[agentRun.actions.length - 1], \"[action]\")}`);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/callbacks/handlers/console.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/callbacks/handlers/initialize.js":
/*!**********************************************************************!*\
  !*** ./node_modules/langchain/dist/callbacks/handlers/initialize.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getTracingCallbackHandler: () => (/* binding */ getTracingCallbackHandler),\n/* harmony export */   getTracingV2CallbackHandler: () => (/* binding */ getTracingV2CallbackHandler)\n/* harmony export */ });\n/* harmony import */ var _tracer_langchain_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tracer_langchain.js */ \"(rsc)/./node_modules/langchain/dist/callbacks/handlers/tracer_langchain.js\");\n/* harmony import */ var _tracer_langchain_v1_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tracer_langchain_v1.js */ \"(rsc)/./node_modules/langchain/dist/callbacks/handlers/tracer_langchain_v1.js\");\n\n\n/**\n * Function that returns an instance of `LangChainTracerV1`. If a session\n * is provided, it loads that session into the tracer; otherwise, it loads\n * a default session.\n * @param session Optional session to load into the tracer.\n * @returns An instance of `LangChainTracerV1`.\n */ async function getTracingCallbackHandler(session) {\n    const tracer = new _tracer_langchain_v1_js__WEBPACK_IMPORTED_MODULE_1__.LangChainTracerV1();\n    if (session) {\n        await tracer.loadSession(session);\n    } else {\n        await tracer.loadDefaultSession();\n    }\n    return tracer;\n}\n/**\n * Function that returns an instance of `LangChainTracer`. It does not\n * load any session data.\n * @returns An instance of `LangChainTracer`.\n */ async function getTracingV2CallbackHandler() {\n    return new _tracer_langchain_js__WEBPACK_IMPORTED_MODULE_0__.LangChainTracer();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvY2FsbGJhY2tzL2hhbmRsZXJzL2luaXRpYWxpemUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUF3RDtBQUNLO0FBQzdEOzs7Ozs7Q0FNQyxHQUNNLGVBQWVFLDBCQUEwQkMsT0FBTztJQUNuRCxNQUFNQyxTQUFTLElBQUlILHNFQUFpQkE7SUFDcEMsSUFBSUUsU0FBUztRQUNULE1BQU1DLE9BQU9DLFdBQVcsQ0FBQ0Y7SUFDN0IsT0FDSztRQUNELE1BQU1DLE9BQU9FLGtCQUFrQjtJQUNuQztJQUNBLE9BQU9GO0FBQ1g7QUFDQTs7OztDQUlDLEdBQ00sZUFBZUc7SUFDbEIsT0FBTyxJQUFJUCxpRUFBZUE7QUFDOUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9xdWlsbC8uL25vZGVfbW9kdWxlcy9sYW5nY2hhaW4vZGlzdC9jYWxsYmFja3MvaGFuZGxlcnMvaW5pdGlhbGl6ZS5qcz83Y2I3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IExhbmdDaGFpblRyYWNlciB9IGZyb20gXCIuL3RyYWNlcl9sYW5nY2hhaW4uanNcIjtcbmltcG9ydCB7IExhbmdDaGFpblRyYWNlclYxIH0gZnJvbSBcIi4vdHJhY2VyX2xhbmdjaGFpbl92MS5qc1wiO1xuLyoqXG4gKiBGdW5jdGlvbiB0aGF0IHJldHVybnMgYW4gaW5zdGFuY2Ugb2YgYExhbmdDaGFpblRyYWNlclYxYC4gSWYgYSBzZXNzaW9uXG4gKiBpcyBwcm92aWRlZCwgaXQgbG9hZHMgdGhhdCBzZXNzaW9uIGludG8gdGhlIHRyYWNlcjsgb3RoZXJ3aXNlLCBpdCBsb2Fkc1xuICogYSBkZWZhdWx0IHNlc3Npb24uXG4gKiBAcGFyYW0gc2Vzc2lvbiBPcHRpb25hbCBzZXNzaW9uIHRvIGxvYWQgaW50byB0aGUgdHJhY2VyLlxuICogQHJldHVybnMgQW4gaW5zdGFuY2Ugb2YgYExhbmdDaGFpblRyYWNlclYxYC5cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldFRyYWNpbmdDYWxsYmFja0hhbmRsZXIoc2Vzc2lvbikge1xuICAgIGNvbnN0IHRyYWNlciA9IG5ldyBMYW5nQ2hhaW5UcmFjZXJWMSgpO1xuICAgIGlmIChzZXNzaW9uKSB7XG4gICAgICAgIGF3YWl0IHRyYWNlci5sb2FkU2Vzc2lvbihzZXNzaW9uKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGF3YWl0IHRyYWNlci5sb2FkRGVmYXVsdFNlc3Npb24oKTtcbiAgICB9XG4gICAgcmV0dXJuIHRyYWNlcjtcbn1cbi8qKlxuICogRnVuY3Rpb24gdGhhdCByZXR1cm5zIGFuIGluc3RhbmNlIG9mIGBMYW5nQ2hhaW5UcmFjZXJgLiBJdCBkb2VzIG5vdFxuICogbG9hZCBhbnkgc2Vzc2lvbiBkYXRhLlxuICogQHJldHVybnMgQW4gaW5zdGFuY2Ugb2YgYExhbmdDaGFpblRyYWNlcmAuXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRUcmFjaW5nVjJDYWxsYmFja0hhbmRsZXIoKSB7XG4gICAgcmV0dXJuIG5ldyBMYW5nQ2hhaW5UcmFjZXIoKTtcbn1cbiJdLCJuYW1lcyI6WyJMYW5nQ2hhaW5UcmFjZXIiLCJMYW5nQ2hhaW5UcmFjZXJWMSIsImdldFRyYWNpbmdDYWxsYmFja0hhbmRsZXIiLCJzZXNzaW9uIiwidHJhY2VyIiwibG9hZFNlc3Npb24iLCJsb2FkRGVmYXVsdFNlc3Npb24iLCJnZXRUcmFjaW5nVjJDYWxsYmFja0hhbmRsZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/callbacks/handlers/initialize.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/callbacks/handlers/tracer.js":
/*!******************************************************************!*\
  !*** ./node_modules/langchain/dist/callbacks/handlers/tracer.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseTracer: () => (/* binding */ BaseTracer)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../base.js */ \"(rsc)/./node_modules/langchain/dist/callbacks/base.js\");\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _coerceToDict(value, defaultKey) {\n    return value && !Array.isArray(value) && typeof value === \"object\" ? value : {\n        [defaultKey]: value\n    };\n}\nclass BaseTracer extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseCallbackHandler {\n    constructor(_fields){\n        super(...arguments);\n        Object.defineProperty(this, \"runMap\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Map()\n        });\n    }\n    copy() {\n        return this;\n    }\n    _addChildRun(parentRun, childRun) {\n        parentRun.child_runs.push(childRun);\n    }\n    _startTrace(run) {\n        if (run.parent_run_id !== undefined) {\n            const parentRun = this.runMap.get(run.parent_run_id);\n            if (parentRun) {\n                this._addChildRun(parentRun, run);\n                parentRun.child_execution_order = Math.max(parentRun.child_execution_order, run.child_execution_order);\n            }\n        }\n        this.runMap.set(run.id, run);\n    }\n    async _endTrace(run) {\n        const parentRun = run.parent_run_id !== undefined && this.runMap.get(run.parent_run_id);\n        if (parentRun) {\n            parentRun.child_execution_order = Math.max(parentRun.child_execution_order, run.child_execution_order);\n        } else {\n            await this.persistRun(run);\n        }\n        this.runMap.delete(run.id);\n    }\n    _getExecutionOrder(parentRunId) {\n        const parentRun = parentRunId !== undefined && this.runMap.get(parentRunId);\n        // If a run has no parent then execution order is 1\n        if (!parentRun) {\n            return 1;\n        }\n        return parentRun.child_execution_order + 1;\n    }\n    async handleLLMStart(llm, prompts, runId, parentRunId, extraParams, tags, metadata) {\n        const execution_order = this._getExecutionOrder(parentRunId);\n        const start_time = Date.now();\n        const finalExtraParams = metadata ? {\n            ...extraParams,\n            metadata\n        } : extraParams;\n        const run = {\n            id: runId,\n            name: llm.id[llm.id.length - 1],\n            parent_run_id: parentRunId,\n            start_time,\n            serialized: llm,\n            events: [\n                {\n                    name: \"start\",\n                    time: new Date(start_time).toISOString()\n                }\n            ],\n            inputs: {\n                prompts\n            },\n            execution_order,\n            child_runs: [],\n            child_execution_order: execution_order,\n            run_type: \"llm\",\n            extra: finalExtraParams ?? {},\n            tags: tags || []\n        };\n        this._startTrace(run);\n        await this.onLLMStart?.(run);\n    }\n    async handleChatModelStart(llm, messages, runId, parentRunId, extraParams, tags, metadata) {\n        const execution_order = this._getExecutionOrder(parentRunId);\n        const start_time = Date.now();\n        const finalExtraParams = metadata ? {\n            ...extraParams,\n            metadata\n        } : extraParams;\n        const run = {\n            id: runId,\n            name: llm.id[llm.id.length - 1],\n            parent_run_id: parentRunId,\n            start_time,\n            serialized: llm,\n            events: [\n                {\n                    name: \"start\",\n                    time: new Date(start_time).toISOString()\n                }\n            ],\n            inputs: {\n                messages\n            },\n            execution_order,\n            child_runs: [],\n            child_execution_order: execution_order,\n            run_type: \"llm\",\n            extra: finalExtraParams ?? {},\n            tags: tags || []\n        };\n        this._startTrace(run);\n        await this.onLLMStart?.(run);\n    }\n    async handleLLMEnd(output, runId) {\n        const run = this.runMap.get(runId);\n        if (!run || run?.run_type !== \"llm\") {\n            throw new Error(\"No LLM run to end.\");\n        }\n        run.end_time = Date.now();\n        run.outputs = output;\n        run.events.push({\n            name: \"end\",\n            time: new Date(run.end_time).toISOString()\n        });\n        await this.onLLMEnd?.(run);\n        await this._endTrace(run);\n    }\n    async handleLLMError(error, runId) {\n        const run = this.runMap.get(runId);\n        if (!run || run?.run_type !== \"llm\") {\n            throw new Error(\"No LLM run to end.\");\n        }\n        run.end_time = Date.now();\n        run.error = error.message;\n        run.events.push({\n            name: \"error\",\n            time: new Date(run.end_time).toISOString()\n        });\n        await this.onLLMError?.(run);\n        await this._endTrace(run);\n    }\n    async handleChainStart(chain, inputs, runId, parentRunId, tags, metadata, runType) {\n        const execution_order = this._getExecutionOrder(parentRunId);\n        const start_time = Date.now();\n        const run = {\n            id: runId,\n            name: chain.id[chain.id.length - 1],\n            parent_run_id: parentRunId,\n            start_time,\n            serialized: chain,\n            events: [\n                {\n                    name: \"start\",\n                    time: new Date(start_time).toISOString()\n                }\n            ],\n            inputs,\n            execution_order,\n            child_execution_order: execution_order,\n            run_type: runType ?? \"chain\",\n            child_runs: [],\n            extra: metadata ? {\n                metadata\n            } : {},\n            tags: tags || []\n        };\n        this._startTrace(run);\n        await this.onChainStart?.(run);\n    }\n    async handleChainEnd(outputs, runId, _parentRunId, _tags, kwargs) {\n        const run = this.runMap.get(runId);\n        if (!run) {\n            throw new Error(\"No chain run to end.\");\n        }\n        run.end_time = Date.now();\n        run.outputs = _coerceToDict(outputs, \"output\");\n        run.events.push({\n            name: \"end\",\n            time: new Date(run.end_time).toISOString()\n        });\n        if (kwargs?.inputs !== undefined) {\n            run.inputs = _coerceToDict(kwargs.inputs, \"input\");\n        }\n        await this.onChainEnd?.(run);\n        await this._endTrace(run);\n    }\n    async handleChainError(error, runId, _parentRunId, _tags, kwargs) {\n        const run = this.runMap.get(runId);\n        if (!run) {\n            throw new Error(\"No chain run to end.\");\n        }\n        run.end_time = Date.now();\n        run.error = error.message;\n        run.events.push({\n            name: \"error\",\n            time: new Date(run.end_time).toISOString()\n        });\n        if (kwargs?.inputs !== undefined) {\n            run.inputs = _coerceToDict(kwargs.inputs, \"input\");\n        }\n        await this.onChainError?.(run);\n        await this._endTrace(run);\n    }\n    async handleToolStart(tool, input, runId, parentRunId, tags, metadata) {\n        const execution_order = this._getExecutionOrder(parentRunId);\n        const start_time = Date.now();\n        const run = {\n            id: runId,\n            name: tool.id[tool.id.length - 1],\n            parent_run_id: parentRunId,\n            start_time,\n            serialized: tool,\n            events: [\n                {\n                    name: \"start\",\n                    time: new Date(start_time).toISOString()\n                }\n            ],\n            inputs: {\n                input\n            },\n            execution_order,\n            child_execution_order: execution_order,\n            run_type: \"tool\",\n            child_runs: [],\n            extra: metadata ? {\n                metadata\n            } : {},\n            tags: tags || []\n        };\n        this._startTrace(run);\n        await this.onToolStart?.(run);\n    }\n    async handleToolEnd(output, runId) {\n        const run = this.runMap.get(runId);\n        if (!run || run?.run_type !== \"tool\") {\n            throw new Error(\"No tool run to end\");\n        }\n        run.end_time = Date.now();\n        run.outputs = {\n            output\n        };\n        run.events.push({\n            name: \"end\",\n            time: new Date(run.end_time).toISOString()\n        });\n        await this.onToolEnd?.(run);\n        await this._endTrace(run);\n    }\n    async handleToolError(error, runId) {\n        const run = this.runMap.get(runId);\n        if (!run || run?.run_type !== \"tool\") {\n            throw new Error(\"No tool run to end\");\n        }\n        run.end_time = Date.now();\n        run.error = error.message;\n        run.events.push({\n            name: \"error\",\n            time: new Date(run.end_time).toISOString()\n        });\n        await this.onToolError?.(run);\n        await this._endTrace(run);\n    }\n    async handleAgentAction(action, runId) {\n        const run = this.runMap.get(runId);\n        if (!run || run?.run_type !== \"chain\") {\n            return;\n        }\n        const agentRun = run;\n        agentRun.actions = agentRun.actions || [];\n        agentRun.actions.push(action);\n        agentRun.events.push({\n            name: \"agent_action\",\n            time: new Date().toISOString(),\n            kwargs: {\n                action\n            }\n        });\n        await this.onAgentAction?.(run);\n    }\n    async handleAgentEnd(action, runId) {\n        const run = this.runMap.get(runId);\n        if (!run || run?.run_type !== \"chain\") {\n            return;\n        }\n        run.events.push({\n            name: \"agent_end\",\n            time: new Date().toISOString(),\n            kwargs: {\n                action\n            }\n        });\n        await this.onAgentEnd?.(run);\n    }\n    async handleRetrieverStart(retriever, query, runId, parentRunId, tags, metadata) {\n        const execution_order = this._getExecutionOrder(parentRunId);\n        const start_time = Date.now();\n        const run = {\n            id: runId,\n            name: retriever.id[retriever.id.length - 1],\n            parent_run_id: parentRunId,\n            start_time,\n            serialized: retriever,\n            events: [\n                {\n                    name: \"start\",\n                    time: new Date(start_time).toISOString()\n                }\n            ],\n            inputs: {\n                query\n            },\n            execution_order,\n            child_execution_order: execution_order,\n            run_type: \"retriever\",\n            child_runs: [],\n            extra: metadata ? {\n                metadata\n            } : {},\n            tags: tags || []\n        };\n        this._startTrace(run);\n        await this.onRetrieverStart?.(run);\n    }\n    async handleRetrieverEnd(documents, runId) {\n        const run = this.runMap.get(runId);\n        if (!run || run?.run_type !== \"retriever\") {\n            throw new Error(\"No retriever run to end\");\n        }\n        run.end_time = Date.now();\n        run.outputs = {\n            documents\n        };\n        run.events.push({\n            name: \"end\",\n            time: new Date(run.end_time).toISOString()\n        });\n        await this.onRetrieverEnd?.(run);\n        await this._endTrace(run);\n    }\n    async handleRetrieverError(error, runId) {\n        const run = this.runMap.get(runId);\n        if (!run || run?.run_type !== \"retriever\") {\n            throw new Error(\"No retriever run to end\");\n        }\n        run.end_time = Date.now();\n        run.error = error.message;\n        run.events.push({\n            name: \"error\",\n            time: new Date(run.end_time).toISOString()\n        });\n        await this.onRetrieverError?.(run);\n        await this._endTrace(run);\n    }\n    async handleText(text, runId) {\n        const run = this.runMap.get(runId);\n        if (!run || run?.run_type !== \"chain\") {\n            return;\n        }\n        run.events.push({\n            name: \"text\",\n            time: new Date().toISOString(),\n            kwargs: {\n                text\n            }\n        });\n        await this.onText?.(run);\n    }\n    async handleLLMNewToken(token, idx, runId, _parentRunId, _tags, fields) {\n        const run = this.runMap.get(runId);\n        if (!run || run?.run_type !== \"llm\") {\n            return;\n        }\n        run.events.push({\n            name: \"new_token\",\n            time: new Date().toISOString(),\n            kwargs: {\n                token,\n                idx,\n                chunk: fields?.chunk\n            }\n        });\n        await this.onLLMNewToken?.(run);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/callbacks/handlers/tracer.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/callbacks/handlers/tracer_langchain.js":
/*!****************************************************************************!*\
  !*** ./node_modules/langchain/dist/callbacks/handlers/tracer_langchain.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LangChainTracer: () => (/* binding */ LangChainTracer)\n/* harmony export */ });\n/* harmony import */ var langsmith__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! langsmith */ \"(rsc)/./node_modules/langsmith/index.js\");\n/* harmony import */ var _util_env_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/env.js */ \"(rsc)/./node_modules/langchain/dist/util/env.js\");\n/* harmony import */ var _tracer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tracer.js */ \"(rsc)/./node_modules/langchain/dist/callbacks/handlers/tracer.js\");\n\n\n\nclass LangChainTracer extends _tracer_js__WEBPACK_IMPORTED_MODULE_2__.BaseTracer {\n    constructor(fields = {}){\n        super(fields);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"langchain_tracer\"\n        });\n        Object.defineProperty(this, \"projectName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"exampleId\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"client\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        const { exampleId, projectName, client } = fields;\n        this.projectName = projectName ?? (0,_util_env_js__WEBPACK_IMPORTED_MODULE_1__.getEnvironmentVariable)(\"LANGCHAIN_PROJECT\") ?? (0,_util_env_js__WEBPACK_IMPORTED_MODULE_1__.getEnvironmentVariable)(\"LANGCHAIN_SESSION\");\n        this.exampleId = exampleId;\n        this.client = client ?? new langsmith__WEBPACK_IMPORTED_MODULE_0__.Client({});\n    }\n    async _convertToCreate(run, example_id = undefined) {\n        return {\n            ...run,\n            extra: {\n                ...run.extra,\n                runtime: await (0,_util_env_js__WEBPACK_IMPORTED_MODULE_1__.getRuntimeEnvironment)()\n            },\n            child_runs: undefined,\n            session_name: this.projectName,\n            reference_example_id: run.parent_run_id ? undefined : example_id\n        };\n    }\n    async persistRun(_run) {}\n    async _persistRunSingle(run) {\n        const persistedRun = await this._convertToCreate(run, this.exampleId);\n        await this.client.createRun(persistedRun);\n    }\n    async _updateRunSingle(run) {\n        const runUpdate = {\n            end_time: run.end_time,\n            error: run.error,\n            outputs: run.outputs,\n            events: run.events,\n            inputs: run.inputs\n        };\n        await this.client.updateRun(run.id, runUpdate);\n    }\n    async onRetrieverStart(run) {\n        await this._persistRunSingle(run);\n    }\n    async onRetrieverEnd(run) {\n        await this._updateRunSingle(run);\n    }\n    async onRetrieverError(run) {\n        await this._updateRunSingle(run);\n    }\n    async onLLMStart(run) {\n        await this._persistRunSingle(run);\n    }\n    async onLLMEnd(run) {\n        await this._updateRunSingle(run);\n    }\n    async onLLMError(run) {\n        await this._updateRunSingle(run);\n    }\n    async onChainStart(run) {\n        await this._persistRunSingle(run);\n    }\n    async onChainEnd(run) {\n        await this._updateRunSingle(run);\n    }\n    async onChainError(run) {\n        await this._updateRunSingle(run);\n    }\n    async onToolStart(run) {\n        await this._persistRunSingle(run);\n    }\n    async onToolEnd(run) {\n        await this._updateRunSingle(run);\n    }\n    async onToolError(run) {\n        await this._updateRunSingle(run);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/callbacks/handlers/tracer_langchain.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/callbacks/handlers/tracer_langchain_v1.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/langchain/dist/callbacks/handlers/tracer_langchain_v1.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LangChainTracerV1: () => (/* binding */ LangChainTracerV1)\n/* harmony export */ });\n/* harmony import */ var _memory_base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../memory/base.js */ \"(rsc)/./node_modules/langchain/dist/memory/base.js\");\n/* harmony import */ var _util_env_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/env.js */ \"(rsc)/./node_modules/langchain/dist/util/env.js\");\n/* harmony import */ var _tracer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tracer.js */ \"(rsc)/./node_modules/langchain/dist/callbacks/handlers/tracer.js\");\n\n\n\nclass LangChainTracerV1 extends _tracer_js__WEBPACK_IMPORTED_MODULE_2__.BaseTracer {\n    constructor(){\n        super();\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"langchain_tracer\"\n        });\n        Object.defineProperty(this, \"endpoint\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: (0,_util_env_js__WEBPACK_IMPORTED_MODULE_1__.getEnvironmentVariable)(\"LANGCHAIN_ENDPOINT\") || \"http://localhost:1984\"\n        });\n        Object.defineProperty(this, \"headers\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: {\n                \"Content-Type\": \"application/json\"\n            }\n        });\n        Object.defineProperty(this, \"session\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        const apiKey = (0,_util_env_js__WEBPACK_IMPORTED_MODULE_1__.getEnvironmentVariable)(\"LANGCHAIN_API_KEY\");\n        if (apiKey) {\n            this.headers[\"x-api-key\"] = apiKey;\n        }\n    }\n    async newSession(sessionName) {\n        const sessionCreate = {\n            start_time: Date.now(),\n            name: sessionName\n        };\n        const session = await this.persistSession(sessionCreate);\n        this.session = session;\n        return session;\n    }\n    async loadSession(sessionName) {\n        const endpoint = `${this.endpoint}/sessions?name=${sessionName}`;\n        return this._handleSessionResponse(endpoint);\n    }\n    async loadDefaultSession() {\n        const endpoint = `${this.endpoint}/sessions?name=default`;\n        return this._handleSessionResponse(endpoint);\n    }\n    async convertV2RunToRun(run) {\n        const session = this.session ?? await this.loadDefaultSession();\n        const serialized = run.serialized;\n        let runResult;\n        if (run.run_type === \"llm\") {\n            const prompts = run.inputs.prompts ? run.inputs.prompts : run.inputs.messages.map((x)=>(0,_memory_base_js__WEBPACK_IMPORTED_MODULE_0__.getBufferString)(x));\n            const llmRun = {\n                uuid: run.id,\n                start_time: run.start_time,\n                end_time: run.end_time,\n                execution_order: run.execution_order,\n                child_execution_order: run.child_execution_order,\n                serialized,\n                type: run.run_type,\n                session_id: session.id,\n                prompts,\n                response: run.outputs\n            };\n            runResult = llmRun;\n        } else if (run.run_type === \"chain\") {\n            const child_runs = await Promise.all(run.child_runs.map((child_run)=>this.convertV2RunToRun(child_run)));\n            const chainRun = {\n                uuid: run.id,\n                start_time: run.start_time,\n                end_time: run.end_time,\n                execution_order: run.execution_order,\n                child_execution_order: run.child_execution_order,\n                serialized,\n                type: run.run_type,\n                session_id: session.id,\n                inputs: run.inputs,\n                outputs: run.outputs,\n                child_llm_runs: child_runs.filter((child_run)=>child_run.type === \"llm\"),\n                child_chain_runs: child_runs.filter((child_run)=>child_run.type === \"chain\"),\n                child_tool_runs: child_runs.filter((child_run)=>child_run.type === \"tool\")\n            };\n            runResult = chainRun;\n        } else if (run.run_type === \"tool\") {\n            const child_runs = await Promise.all(run.child_runs.map((child_run)=>this.convertV2RunToRun(child_run)));\n            const toolRun = {\n                uuid: run.id,\n                start_time: run.start_time,\n                end_time: run.end_time,\n                execution_order: run.execution_order,\n                child_execution_order: run.child_execution_order,\n                serialized,\n                type: run.run_type,\n                session_id: session.id,\n                tool_input: run.inputs.input,\n                output: run.outputs?.output,\n                action: JSON.stringify(serialized),\n                child_llm_runs: child_runs.filter((child_run)=>child_run.type === \"llm\"),\n                child_chain_runs: child_runs.filter((child_run)=>child_run.type === \"chain\"),\n                child_tool_runs: child_runs.filter((child_run)=>child_run.type === \"tool\")\n            };\n            runResult = toolRun;\n        } else {\n            throw new Error(`Unknown run type: ${run.run_type}`);\n        }\n        return runResult;\n    }\n    async persistRun(run) {\n        let endpoint;\n        let v1Run;\n        if (run.run_type !== undefined) {\n            v1Run = await this.convertV2RunToRun(run);\n        } else {\n            v1Run = run;\n        }\n        if (v1Run.type === \"llm\") {\n            endpoint = `${this.endpoint}/llm-runs`;\n        } else if (v1Run.type === \"chain\") {\n            endpoint = `${this.endpoint}/chain-runs`;\n        } else {\n            endpoint = `${this.endpoint}/tool-runs`;\n        }\n        const response = await fetch(endpoint, {\n            method: \"POST\",\n            headers: this.headers,\n            body: JSON.stringify(v1Run)\n        });\n        if (!response.ok) {\n            console.error(`Failed to persist run: ${response.status} ${response.statusText}`);\n        }\n    }\n    async persistSession(sessionCreate) {\n        const endpoint = `${this.endpoint}/sessions`;\n        const response = await fetch(endpoint, {\n            method: \"POST\",\n            headers: this.headers,\n            body: JSON.stringify(sessionCreate)\n        });\n        if (!response.ok) {\n            console.error(`Failed to persist session: ${response.status} ${response.statusText}, using default session.`);\n            return {\n                id: 1,\n                ...sessionCreate\n            };\n        }\n        return {\n            id: (await response.json()).id,\n            ...sessionCreate\n        };\n    }\n    async _handleSessionResponse(endpoint) {\n        const response = await fetch(endpoint, {\n            method: \"GET\",\n            headers: this.headers\n        });\n        let tracerSession;\n        if (!response.ok) {\n            console.error(`Failed to load session: ${response.status} ${response.statusText}`);\n            tracerSession = {\n                id: 1,\n                start_time: Date.now()\n            };\n            this.session = tracerSession;\n            return tracerSession;\n        }\n        const resp = await response.json();\n        if (resp.length === 0) {\n            tracerSession = {\n                id: 1,\n                start_time: Date.now()\n            };\n            this.session = tracerSession;\n            return tracerSession;\n        }\n        [tracerSession] = resp;\n        this.session = tracerSession;\n        return tracerSession;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/callbacks/handlers/tracer_langchain_v1.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/callbacks/manager.js":
/*!**********************************************************!*\
  !*** ./node_modules/langchain/dist/callbacks/manager.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseCallbackManager: () => (/* binding */ BaseCallbackManager),\n/* harmony export */   CallbackManager: () => (/* binding */ CallbackManager),\n/* harmony export */   CallbackManagerForChainRun: () => (/* binding */ CallbackManagerForChainRun),\n/* harmony export */   CallbackManagerForLLMRun: () => (/* binding */ CallbackManagerForLLMRun),\n/* harmony export */   CallbackManagerForRetrieverRun: () => (/* binding */ CallbackManagerForRetrieverRun),\n/* harmony export */   CallbackManagerForToolRun: () => (/* binding */ CallbackManagerForToolRun),\n/* harmony export */   TraceGroup: () => (/* binding */ TraceGroup),\n/* harmony export */   parseCallbackConfigArg: () => (/* binding */ parseCallbackConfigArg),\n/* harmony export */   traceAsGroup: () => (/* binding */ traceAsGroup)\n/* harmony export */ });\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! uuid */ \"(rsc)/./node_modules/uuid/dist/esm-node/v4.js\");\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/langchain/dist/callbacks/base.js\");\n/* harmony import */ var _handlers_console_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./handlers/console.js */ \"(rsc)/./node_modules/langchain/dist/callbacks/handlers/console.js\");\n/* harmony import */ var _handlers_initialize_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./handlers/initialize.js */ \"(rsc)/./node_modules/langchain/dist/callbacks/handlers/initialize.js\");\n/* harmony import */ var _memory_base_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../memory/base.js */ \"(rsc)/./node_modules/langchain/dist/memory/base.js\");\n/* harmony import */ var _util_env_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util/env.js */ \"(rsc)/./node_modules/langchain/dist/util/env.js\");\n/* harmony import */ var _handlers_tracer_langchain_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./handlers/tracer_langchain.js */ \"(rsc)/./node_modules/langchain/dist/callbacks/handlers/tracer_langchain.js\");\n/* harmony import */ var _promises_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./promises.js */ \"(rsc)/./node_modules/langchain/dist/callbacks/promises.js\");\n\n\n\n\n\n\n\n\nfunction parseCallbackConfigArg(arg) {\n    if (!arg) {\n        return {};\n    } else if (Array.isArray(arg) || \"name\" in arg) {\n        return {\n            callbacks: arg\n        };\n    } else {\n        return arg;\n    }\n}\n/**\n * Manage callbacks from different components of LangChain.\n */ class BaseCallbackManager {\n    setHandler(handler) {\n        return this.setHandlers([\n            handler\n        ]);\n    }\n}\n/**\n * Base class for run manager in LangChain.\n */ class BaseRunManager {\n    constructor(runId, handlers, inheritableHandlers, tags, inheritableTags, metadata, inheritableMetadata, _parentRunId){\n        Object.defineProperty(this, \"runId\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: runId\n        });\n        Object.defineProperty(this, \"handlers\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: handlers\n        });\n        Object.defineProperty(this, \"inheritableHandlers\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: inheritableHandlers\n        });\n        Object.defineProperty(this, \"tags\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: tags\n        });\n        Object.defineProperty(this, \"inheritableTags\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: inheritableTags\n        });\n        Object.defineProperty(this, \"metadata\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: metadata\n        });\n        Object.defineProperty(this, \"inheritableMetadata\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: inheritableMetadata\n        });\n        Object.defineProperty(this, \"_parentRunId\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: _parentRunId\n        });\n    }\n    async handleText(text) {\n        await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_6__.consumeCallback)(async ()=>{\n                try {\n                    await handler.handleText?.(text, this.runId, this._parentRunId, this.tags);\n                } catch (err) {\n                    console.error(`Error in handler ${handler.constructor.name}, handleText: ${err}`);\n                }\n            }, handler.awaitHandlers)));\n    }\n}\n/**\n * Manages callbacks for retriever runs.\n */ class CallbackManagerForRetrieverRun extends BaseRunManager {\n    getChild(tag) {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        const manager = new CallbackManager(this.runId);\n        manager.setHandlers(this.inheritableHandlers);\n        manager.addTags(this.inheritableTags);\n        manager.addMetadata(this.inheritableMetadata);\n        if (tag) {\n            manager.addTags([\n                tag\n            ], false);\n        }\n        return manager;\n    }\n    async handleRetrieverEnd(documents) {\n        await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_6__.consumeCallback)(async ()=>{\n                if (!handler.ignoreRetriever) {\n                    try {\n                        await handler.handleRetrieverEnd?.(documents, this.runId, this._parentRunId, this.tags);\n                    } catch (err) {\n                        console.error(`Error in handler ${handler.constructor.name}, handleRetriever`);\n                    }\n                }\n            }, handler.awaitHandlers)));\n    }\n    async handleRetrieverError(err) {\n        await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_6__.consumeCallback)(async ()=>{\n                if (!handler.ignoreRetriever) {\n                    try {\n                        await handler.handleRetrieverError?.(err, this.runId, this._parentRunId, this.tags);\n                    } catch (error) {\n                        console.error(`Error in handler ${handler.constructor.name}, handleRetrieverError: ${error}`);\n                    }\n                }\n            }, handler.awaitHandlers)));\n    }\n}\nclass CallbackManagerForLLMRun extends BaseRunManager {\n    async handleLLMNewToken(token, idx, _runId, _parentRunId, _tags, fields) {\n        await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_6__.consumeCallback)(async ()=>{\n                if (!handler.ignoreLLM) {\n                    try {\n                        await handler.handleLLMNewToken?.(token, idx ?? {\n                            prompt: 0,\n                            completion: 0\n                        }, this.runId, this._parentRunId, this.tags, fields);\n                    } catch (err) {\n                        console.error(`Error in handler ${handler.constructor.name}, handleLLMNewToken: ${err}`);\n                    }\n                }\n            }, handler.awaitHandlers)));\n    }\n    async handleLLMError(err) {\n        await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_6__.consumeCallback)(async ()=>{\n                if (!handler.ignoreLLM) {\n                    try {\n                        await handler.handleLLMError?.(err, this.runId, this._parentRunId, this.tags);\n                    } catch (err) {\n                        console.error(`Error in handler ${handler.constructor.name}, handleLLMError: ${err}`);\n                    }\n                }\n            }, handler.awaitHandlers)));\n    }\n    async handleLLMEnd(output) {\n        await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_6__.consumeCallback)(async ()=>{\n                if (!handler.ignoreLLM) {\n                    try {\n                        await handler.handleLLMEnd?.(output, this.runId, this._parentRunId, this.tags);\n                    } catch (err) {\n                        console.error(`Error in handler ${handler.constructor.name}, handleLLMEnd: ${err}`);\n                    }\n                }\n            }, handler.awaitHandlers)));\n    }\n}\nclass CallbackManagerForChainRun extends BaseRunManager {\n    getChild(tag) {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        const manager = new CallbackManager(this.runId);\n        manager.setHandlers(this.inheritableHandlers);\n        manager.addTags(this.inheritableTags);\n        manager.addMetadata(this.inheritableMetadata);\n        if (tag) {\n            manager.addTags([\n                tag\n            ], false);\n        }\n        return manager;\n    }\n    async handleChainError(err, _runId, _parentRunId, _tags, kwargs) {\n        await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_6__.consumeCallback)(async ()=>{\n                if (!handler.ignoreChain) {\n                    try {\n                        await handler.handleChainError?.(err, this.runId, this._parentRunId, this.tags, kwargs);\n                    } catch (err) {\n                        console.error(`Error in handler ${handler.constructor.name}, handleChainError: ${err}`);\n                    }\n                }\n            }, handler.awaitHandlers)));\n    }\n    async handleChainEnd(output, _runId, _parentRunId, _tags, kwargs) {\n        await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_6__.consumeCallback)(async ()=>{\n                if (!handler.ignoreChain) {\n                    try {\n                        await handler.handleChainEnd?.(output, this.runId, this._parentRunId, this.tags, kwargs);\n                    } catch (err) {\n                        console.error(`Error in handler ${handler.constructor.name}, handleChainEnd: ${err}`);\n                    }\n                }\n            }, handler.awaitHandlers)));\n    }\n    async handleAgentAction(action) {\n        await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_6__.consumeCallback)(async ()=>{\n                if (!handler.ignoreAgent) {\n                    try {\n                        await handler.handleAgentAction?.(action, this.runId, this._parentRunId, this.tags);\n                    } catch (err) {\n                        console.error(`Error in handler ${handler.constructor.name}, handleAgentAction: ${err}`);\n                    }\n                }\n            }, handler.awaitHandlers)));\n    }\n    async handleAgentEnd(action) {\n        await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_6__.consumeCallback)(async ()=>{\n                if (!handler.ignoreAgent) {\n                    try {\n                        await handler.handleAgentEnd?.(action, this.runId, this._parentRunId, this.tags);\n                    } catch (err) {\n                        console.error(`Error in handler ${handler.constructor.name}, handleAgentEnd: ${err}`);\n                    }\n                }\n            }, handler.awaitHandlers)));\n    }\n}\nclass CallbackManagerForToolRun extends BaseRunManager {\n    getChild(tag) {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        const manager = new CallbackManager(this.runId);\n        manager.setHandlers(this.inheritableHandlers);\n        manager.addTags(this.inheritableTags);\n        manager.addMetadata(this.inheritableMetadata);\n        if (tag) {\n            manager.addTags([\n                tag\n            ], false);\n        }\n        return manager;\n    }\n    async handleToolError(err) {\n        await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_6__.consumeCallback)(async ()=>{\n                if (!handler.ignoreAgent) {\n                    try {\n                        await handler.handleToolError?.(err, this.runId, this._parentRunId, this.tags);\n                    } catch (err) {\n                        console.error(`Error in handler ${handler.constructor.name}, handleToolError: ${err}`);\n                    }\n                }\n            }, handler.awaitHandlers)));\n    }\n    async handleToolEnd(output) {\n        await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_6__.consumeCallback)(async ()=>{\n                if (!handler.ignoreAgent) {\n                    try {\n                        await handler.handleToolEnd?.(output, this.runId, this._parentRunId, this.tags);\n                    } catch (err) {\n                        console.error(`Error in handler ${handler.constructor.name}, handleToolEnd: ${err}`);\n                    }\n                }\n            }, handler.awaitHandlers)));\n    }\n}\nclass CallbackManager extends BaseCallbackManager {\n    constructor(parentRunId){\n        super();\n        Object.defineProperty(this, \"handlers\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"inheritableHandlers\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"tags\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        Object.defineProperty(this, \"inheritableTags\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        Object.defineProperty(this, \"metadata\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: {}\n        });\n        Object.defineProperty(this, \"inheritableMetadata\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: {}\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"callback_manager\"\n        });\n        Object.defineProperty(this, \"_parentRunId\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.handlers = [];\n        this.inheritableHandlers = [];\n        this._parentRunId = parentRunId;\n    }\n    async handleLLMStart(llm, prompts, _runId = undefined, _parentRunId = undefined, extraParams = undefined) {\n        return Promise.all(prompts.map(async (prompt)=>{\n            const runId = (0,uuid__WEBPACK_IMPORTED_MODULE_7__[\"default\"])();\n            await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_6__.consumeCallback)(async ()=>{\n                    if (!handler.ignoreLLM) {\n                        try {\n                            await handler.handleLLMStart?.(llm, [\n                                prompt\n                            ], runId, this._parentRunId, extraParams, this.tags, this.metadata);\n                        } catch (err) {\n                            console.error(`Error in handler ${handler.constructor.name}, handleLLMStart: ${err}`);\n                        }\n                    }\n                }, handler.awaitHandlers)));\n            return new CallbackManagerForLLMRun(runId, this.handlers, this.inheritableHandlers, this.tags, this.inheritableTags, this.metadata, this.inheritableMetadata, this._parentRunId);\n        }));\n    }\n    async handleChatModelStart(llm, messages, _runId = undefined, _parentRunId = undefined, extraParams = undefined) {\n        return Promise.all(messages.map(async (messageGroup)=>{\n            const runId = (0,uuid__WEBPACK_IMPORTED_MODULE_7__[\"default\"])();\n            await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_6__.consumeCallback)(async ()=>{\n                    if (!handler.ignoreLLM) {\n                        try {\n                            if (handler.handleChatModelStart) await handler.handleChatModelStart?.(llm, [\n                                messageGroup\n                            ], runId, this._parentRunId, extraParams, this.tags, this.metadata);\n                            else if (handler.handleLLMStart) {\n                                const messageString = (0,_memory_base_js__WEBPACK_IMPORTED_MODULE_3__.getBufferString)(messageGroup);\n                                await handler.handleLLMStart?.(llm, [\n                                    messageString\n                                ], runId, this._parentRunId, extraParams, this.tags, this.metadata);\n                            }\n                        } catch (err) {\n                            console.error(`Error in handler ${handler.constructor.name}, handleLLMStart: ${err}`);\n                        }\n                    }\n                }, handler.awaitHandlers)));\n            return new CallbackManagerForLLMRun(runId, this.handlers, this.inheritableHandlers, this.tags, this.inheritableTags, this.metadata, this.inheritableMetadata, this._parentRunId);\n        }));\n    }\n    async handleChainStart(chain, inputs, runId = (0,uuid__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(), runType = undefined) {\n        await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_6__.consumeCallback)(async ()=>{\n                if (!handler.ignoreChain) {\n                    try {\n                        await handler.handleChainStart?.(chain, inputs, runId, this._parentRunId, this.tags, this.metadata, runType);\n                    } catch (err) {\n                        console.error(`Error in handler ${handler.constructor.name}, handleChainStart: ${err}`);\n                    }\n                }\n            }, handler.awaitHandlers)));\n        return new CallbackManagerForChainRun(runId, this.handlers, this.inheritableHandlers, this.tags, this.inheritableTags, this.metadata, this.inheritableMetadata, this._parentRunId);\n    }\n    async handleToolStart(tool, input, runId = (0,uuid__WEBPACK_IMPORTED_MODULE_7__[\"default\"])()) {\n        await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_6__.consumeCallback)(async ()=>{\n                if (!handler.ignoreAgent) {\n                    try {\n                        await handler.handleToolStart?.(tool, input, runId, this._parentRunId, this.tags, this.metadata);\n                    } catch (err) {\n                        console.error(`Error in handler ${handler.constructor.name}, handleToolStart: ${err}`);\n                    }\n                }\n            }, handler.awaitHandlers)));\n        return new CallbackManagerForToolRun(runId, this.handlers, this.inheritableHandlers, this.tags, this.inheritableTags, this.metadata, this.inheritableMetadata, this._parentRunId);\n    }\n    async handleRetrieverStart(retriever, query, runId = (0,uuid__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(), _parentRunId = undefined) {\n        await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_6__.consumeCallback)(async ()=>{\n                if (!handler.ignoreRetriever) {\n                    try {\n                        await handler.handleRetrieverStart?.(retriever, query, runId, this._parentRunId, this.tags, this.metadata);\n                    } catch (err) {\n                        console.error(`Error in handler ${handler.constructor.name}, handleRetrieverStart: ${err}`);\n                    }\n                }\n            }, handler.awaitHandlers)));\n        return new CallbackManagerForRetrieverRun(runId, this.handlers, this.inheritableHandlers, this.tags, this.inheritableTags, this.metadata, this.inheritableMetadata, this._parentRunId);\n    }\n    addHandler(handler, inherit = true) {\n        this.handlers.push(handler);\n        if (inherit) {\n            this.inheritableHandlers.push(handler);\n        }\n    }\n    removeHandler(handler) {\n        this.handlers = this.handlers.filter((_handler)=>_handler !== handler);\n        this.inheritableHandlers = this.inheritableHandlers.filter((_handler)=>_handler !== handler);\n    }\n    setHandlers(handlers, inherit = true) {\n        this.handlers = [];\n        this.inheritableHandlers = [];\n        for (const handler of handlers){\n            this.addHandler(handler, inherit);\n        }\n    }\n    addTags(tags, inherit = true) {\n        this.removeTags(tags); // Remove duplicates\n        this.tags.push(...tags);\n        if (inherit) {\n            this.inheritableTags.push(...tags);\n        }\n    }\n    removeTags(tags) {\n        this.tags = this.tags.filter((tag)=>!tags.includes(tag));\n        this.inheritableTags = this.inheritableTags.filter((tag)=>!tags.includes(tag));\n    }\n    addMetadata(metadata, inherit = true) {\n        this.metadata = {\n            ...this.metadata,\n            ...metadata\n        };\n        if (inherit) {\n            this.inheritableMetadata = {\n                ...this.inheritableMetadata,\n                ...metadata\n            };\n        }\n    }\n    removeMetadata(metadata) {\n        for (const key of Object.keys(metadata)){\n            delete this.metadata[key];\n            delete this.inheritableMetadata[key];\n        }\n    }\n    copy(additionalHandlers = [], inherit = true) {\n        const manager = new CallbackManager(this._parentRunId);\n        for (const handler of this.handlers){\n            const inheritable = this.inheritableHandlers.includes(handler);\n            manager.addHandler(handler, inheritable);\n        }\n        for (const tag of this.tags){\n            const inheritable = this.inheritableTags.includes(tag);\n            manager.addTags([\n                tag\n            ], inheritable);\n        }\n        for (const key of Object.keys(this.metadata)){\n            const inheritable = Object.keys(this.inheritableMetadata).includes(key);\n            manager.addMetadata({\n                [key]: this.metadata[key]\n            }, inheritable);\n        }\n        for (const handler of additionalHandlers){\n            if (// Prevent multiple copies of console_callback_handler\n            manager.handlers.filter((h)=>h.name === \"console_callback_handler\").some((h)=>h.name === handler.name)) {\n                continue;\n            }\n            manager.addHandler(handler, inherit);\n        }\n        return manager;\n    }\n    static fromHandlers(handlers) {\n        class Handler extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseCallbackHandler {\n            constructor(){\n                super();\n                Object.defineProperty(this, \"name\", {\n                    enumerable: true,\n                    configurable: true,\n                    writable: true,\n                    value: (0,uuid__WEBPACK_IMPORTED_MODULE_7__[\"default\"])()\n                });\n                Object.assign(this, handlers);\n            }\n        }\n        const manager = new this();\n        manager.addHandler(new Handler());\n        return manager;\n    }\n    static async configure(inheritableHandlers, localHandlers, inheritableTags, localTags, inheritableMetadata, localMetadata, options) {\n        let callbackManager;\n        if (inheritableHandlers || localHandlers) {\n            if (Array.isArray(inheritableHandlers) || !inheritableHandlers) {\n                callbackManager = new CallbackManager();\n                callbackManager.setHandlers(inheritableHandlers?.map(ensureHandler) ?? [], true);\n            } else {\n                callbackManager = inheritableHandlers;\n            }\n            callbackManager = callbackManager.copy(Array.isArray(localHandlers) ? localHandlers.map(ensureHandler) : localHandlers?.handlers, false);\n        }\n        const verboseEnabled = (0,_util_env_js__WEBPACK_IMPORTED_MODULE_4__.getEnvironmentVariable)(\"LANGCHAIN_VERBOSE\") || options?.verbose;\n        const tracingV2Enabled = (0,_util_env_js__WEBPACK_IMPORTED_MODULE_4__.getEnvironmentVariable)(\"LANGCHAIN_TRACING_V2\") === \"true\";\n        const tracingEnabled = tracingV2Enabled || ((0,_util_env_js__WEBPACK_IMPORTED_MODULE_4__.getEnvironmentVariable)(\"LANGCHAIN_TRACING\") ?? false);\n        if (verboseEnabled || tracingEnabled) {\n            if (!callbackManager) {\n                callbackManager = new CallbackManager();\n            }\n            if (verboseEnabled && !callbackManager.handlers.some((handler)=>handler.name === _handlers_console_js__WEBPACK_IMPORTED_MODULE_1__.ConsoleCallbackHandler.prototype.name)) {\n                const consoleHandler = new _handlers_console_js__WEBPACK_IMPORTED_MODULE_1__.ConsoleCallbackHandler();\n                callbackManager.addHandler(consoleHandler, true);\n            }\n            if (tracingEnabled && !callbackManager.handlers.some((handler)=>handler.name === \"langchain_tracer\")) {\n                if (tracingV2Enabled) {\n                    callbackManager.addHandler(await (0,_handlers_initialize_js__WEBPACK_IMPORTED_MODULE_2__.getTracingV2CallbackHandler)(), true);\n                } else {\n                    const session = (0,_util_env_js__WEBPACK_IMPORTED_MODULE_4__.getEnvironmentVariable)(\"LANGCHAIN_PROJECT\") && (0,_util_env_js__WEBPACK_IMPORTED_MODULE_4__.getEnvironmentVariable)(\"LANGCHAIN_SESSION\");\n                    callbackManager.addHandler(await (0,_handlers_initialize_js__WEBPACK_IMPORTED_MODULE_2__.getTracingCallbackHandler)(session), true);\n                }\n            }\n        }\n        if (inheritableTags || localTags) {\n            if (callbackManager) {\n                callbackManager.addTags(inheritableTags ?? []);\n                callbackManager.addTags(localTags ?? [], false);\n            }\n        }\n        if (inheritableMetadata || localMetadata) {\n            if (callbackManager) {\n                callbackManager.addMetadata(inheritableMetadata ?? {});\n                callbackManager.addMetadata(localMetadata ?? {}, false);\n            }\n        }\n        return callbackManager;\n    }\n}\nfunction ensureHandler(handler) {\n    if (\"name\" in handler) {\n        return handler;\n    }\n    return _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseCallbackHandler.fromMethods(handler);\n}\nclass TraceGroup {\n    constructor(groupName, options){\n        Object.defineProperty(this, \"groupName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: groupName\n        });\n        Object.defineProperty(this, \"options\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: options\n        });\n        Object.defineProperty(this, \"runManager\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n    }\n    async getTraceGroupCallbackManager(group_name, inputs, options) {\n        const cb = new _handlers_tracer_langchain_js__WEBPACK_IMPORTED_MODULE_5__.LangChainTracer(options);\n        const cm = await CallbackManager.configure([\n            cb\n        ]);\n        const runManager = await cm?.handleChainStart({\n            lc: 1,\n            type: \"not_implemented\",\n            id: [\n                \"langchain\",\n                \"callbacks\",\n                \"groups\",\n                group_name\n            ]\n        }, inputs ?? {});\n        if (!runManager) {\n            throw new Error(\"Failed to create run group callback manager.\");\n        }\n        return runManager;\n    }\n    async start(inputs) {\n        if (!this.runManager) {\n            this.runManager = await this.getTraceGroupCallbackManager(this.groupName, inputs, this.options);\n        }\n        return this.runManager.getChild();\n    }\n    async error(err) {\n        if (this.runManager) {\n            await this.runManager.handleChainError(err);\n            this.runManager = undefined;\n        }\n    }\n    async end(output) {\n        if (this.runManager) {\n            await this.runManager.handleChainEnd(output ?? {});\n            this.runManager = undefined;\n        }\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _coerceToDict(value, defaultKey) {\n    return value && !Array.isArray(value) && typeof value === \"object\" ? value : {\n        [defaultKey]: value\n    };\n}\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nasync function traceAsGroup(groupOptions, enclosedCode, ...args) {\n    const traceGroup = new TraceGroup(groupOptions.name, groupOptions);\n    const callbackManager = await traceGroup.start({\n        ...args\n    });\n    try {\n        const result = await enclosedCode(callbackManager, ...args);\n        await traceGroup.end(_coerceToDict(result, \"output\"));\n        return result;\n    } catch (err) {\n        await traceGroup.error(err);\n        throw err;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/callbacks/manager.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/callbacks/promises.js":
/*!***********************************************************!*\
  !*** ./node_modules/langchain/dist/callbacks/promises.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   awaitAllCallbacks: () => (/* binding */ awaitAllCallbacks),\n/* harmony export */   consumeCallback: () => (/* binding */ consumeCallback)\n/* harmony export */ });\n/* harmony import */ var p_queue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! p-queue */ \"(rsc)/./node_modules/p-queue/dist/index.js\");\n\nlet queue;\n/**\n * Creates a queue using the p-queue library. The queue is configured to\n * auto-start and has a concurrency of 1, meaning it will process tasks\n * one at a time.\n */ function createQueue() {\n    const PQueue =  true ? p_queue__WEBPACK_IMPORTED_MODULE_0__[\"default\"] : p_queue__WEBPACK_IMPORTED_MODULE_0__;\n    return new PQueue({\n        autoStart: true,\n        concurrency: 1\n    });\n}\n/**\n * Consume a promise, either adding it to the queue or waiting for it to resolve\n * @param promise Promise to consume\n * @param wait Whether to wait for the promise to resolve or resolve immediately\n */ async function consumeCallback(promiseFn, wait) {\n    if (wait === true) {\n        await promiseFn();\n    } else {\n        if (typeof queue === \"undefined\") {\n            queue = createQueue();\n        }\n        void queue.add(promiseFn);\n    }\n}\n/**\n * Waits for all promises in the queue to resolve. If the queue is\n * undefined, it immediately resolves a promise.\n */ function awaitAllCallbacks() {\n    return typeof queue !== \"undefined\" ? queue.onIdle() : Promise.resolve();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvY2FsbGJhY2tzL3Byb21pc2VzLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFnQztBQUNoQyxJQUFJQztBQUNKOzs7O0NBSUMsR0FDRCxTQUFTQztJQUNMLE1BQU1DLFNBQVMsS0FBc0JILEdBQUdBLCtDQUFpQixHQUFHQSxvQ0FBU0E7SUFDckUsT0FBTyxJQUFJRyxPQUFPO1FBQ2RFLFdBQVc7UUFDWEMsYUFBYTtJQUNqQjtBQUNKO0FBQ0E7Ozs7Q0FJQyxHQUNNLGVBQWVDLGdCQUFnQkMsU0FBUyxFQUFFQyxJQUFJO0lBQ2pELElBQUlBLFNBQVMsTUFBTTtRQUNmLE1BQU1EO0lBQ1YsT0FDSztRQUNELElBQUksT0FBT1AsVUFBVSxhQUFhO1lBQzlCQSxRQUFRQztRQUNaO1FBQ0EsS0FBS0QsTUFBTVMsR0FBRyxDQUFDRjtJQUNuQjtBQUNKO0FBQ0E7OztDQUdDLEdBQ00sU0FBU0c7SUFDWixPQUFPLE9BQU9WLFVBQVUsY0FBY0EsTUFBTVcsTUFBTSxLQUFLQyxRQUFRQyxPQUFPO0FBQzFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcXVpbGwvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvY2FsbGJhY2tzL3Byb21pc2VzLmpzPzU3ZTUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFBRdWV1ZU1vZCBmcm9tIFwicC1xdWV1ZVwiO1xubGV0IHF1ZXVlO1xuLyoqXG4gKiBDcmVhdGVzIGEgcXVldWUgdXNpbmcgdGhlIHAtcXVldWUgbGlicmFyeS4gVGhlIHF1ZXVlIGlzIGNvbmZpZ3VyZWQgdG9cbiAqIGF1dG8tc3RhcnQgYW5kIGhhcyBhIGNvbmN1cnJlbmN5IG9mIDEsIG1lYW5pbmcgaXQgd2lsbCBwcm9jZXNzIHRhc2tzXG4gKiBvbmUgYXQgYSB0aW1lLlxuICovXG5mdW5jdGlvbiBjcmVhdGVRdWV1ZSgpIHtcbiAgICBjb25zdCBQUXVldWUgPSBcImRlZmF1bHRcIiBpbiBQUXVldWVNb2QgPyBQUXVldWVNb2QuZGVmYXVsdCA6IFBRdWV1ZU1vZDtcbiAgICByZXR1cm4gbmV3IFBRdWV1ZSh7XG4gICAgICAgIGF1dG9TdGFydDogdHJ1ZSxcbiAgICAgICAgY29uY3VycmVuY3k6IDEsXG4gICAgfSk7XG59XG4vKipcbiAqIENvbnN1bWUgYSBwcm9taXNlLCBlaXRoZXIgYWRkaW5nIGl0IHRvIHRoZSBxdWV1ZSBvciB3YWl0aW5nIGZvciBpdCB0byByZXNvbHZlXG4gKiBAcGFyYW0gcHJvbWlzZSBQcm9taXNlIHRvIGNvbnN1bWVcbiAqIEBwYXJhbSB3YWl0IFdoZXRoZXIgdG8gd2FpdCBmb3IgdGhlIHByb21pc2UgdG8gcmVzb2x2ZSBvciByZXNvbHZlIGltbWVkaWF0ZWx5XG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjb25zdW1lQ2FsbGJhY2socHJvbWlzZUZuLCB3YWl0KSB7XG4gICAgaWYgKHdhaXQgPT09IHRydWUpIHtcbiAgICAgICAgYXdhaXQgcHJvbWlzZUZuKCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBpZiAodHlwZW9mIHF1ZXVlID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICBxdWV1ZSA9IGNyZWF0ZVF1ZXVlKCk7XG4gICAgICAgIH1cbiAgICAgICAgdm9pZCBxdWV1ZS5hZGQocHJvbWlzZUZuKTtcbiAgICB9XG59XG4vKipcbiAqIFdhaXRzIGZvciBhbGwgcHJvbWlzZXMgaW4gdGhlIHF1ZXVlIHRvIHJlc29sdmUuIElmIHRoZSBxdWV1ZSBpc1xuICogdW5kZWZpbmVkLCBpdCBpbW1lZGlhdGVseSByZXNvbHZlcyBhIHByb21pc2UuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhd2FpdEFsbENhbGxiYWNrcygpIHtcbiAgICByZXR1cm4gdHlwZW9mIHF1ZXVlICE9PSBcInVuZGVmaW5lZFwiID8gcXVldWUub25JZGxlKCkgOiBQcm9taXNlLnJlc29sdmUoKTtcbn1cbiJdLCJuYW1lcyI6WyJQUXVldWVNb2QiLCJxdWV1ZSIsImNyZWF0ZVF1ZXVlIiwiUFF1ZXVlIiwiZGVmYXVsdCIsImF1dG9TdGFydCIsImNvbmN1cnJlbmN5IiwiY29uc3VtZUNhbGxiYWNrIiwicHJvbWlzZUZuIiwid2FpdCIsImFkZCIsImF3YWl0QWxsQ2FsbGJhY2tzIiwib25JZGxlIiwiUHJvbWlzZSIsInJlc29sdmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/callbacks/promises.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/document.js":
/*!*************************************************!*\
  !*** ./node_modules/langchain/dist/document.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Document: () => (/* binding */ Document)\n/* harmony export */ });\n/**\n * Interface for interacting with a document.\n */ class Document {\n    constructor(fields){\n        Object.defineProperty(this, \"pageContent\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"metadata\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.pageContent = fields.pageContent ? fields.pageContent.toString() : this.pageContent;\n        this.metadata = fields.metadata ?? {};\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvZG9jdW1lbnQuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBOztDQUVDLEdBQ00sTUFBTUE7SUFDVEMsWUFBWUMsTUFBTSxDQUFFO1FBQ2hCQyxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLGVBQWU7WUFDdkNDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU8sS0FBSztRQUNoQjtRQUNBTCxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLFlBQVk7WUFDcENDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU8sS0FBSztRQUNoQjtRQUNBLElBQUksQ0FBQ0MsV0FBVyxHQUFHUCxPQUFPTyxXQUFXLEdBQy9CUCxPQUFPTyxXQUFXLENBQUNDLFFBQVEsS0FDM0IsSUFBSSxDQUFDRCxXQUFXO1FBQ3RCLElBQUksQ0FBQ0UsUUFBUSxHQUFHVCxPQUFPUyxRQUFRLElBQUksQ0FBQztJQUN4QztBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcXVpbGwvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvZG9jdW1lbnQuanM/OWU1NiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEludGVyZmFjZSBmb3IgaW50ZXJhY3Rpbmcgd2l0aCBhIGRvY3VtZW50LlxuICovXG5leHBvcnQgY2xhc3MgRG9jdW1lbnQge1xuICAgIGNvbnN0cnVjdG9yKGZpZWxkcykge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJwYWdlQ29udGVudFwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJtZXRhZGF0YVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnBhZ2VDb250ZW50ID0gZmllbGRzLnBhZ2VDb250ZW50XG4gICAgICAgICAgICA/IGZpZWxkcy5wYWdlQ29udGVudC50b1N0cmluZygpXG4gICAgICAgICAgICA6IHRoaXMucGFnZUNvbnRlbnQ7XG4gICAgICAgIHRoaXMubWV0YWRhdGEgPSBmaWVsZHMubWV0YWRhdGEgPz8ge307XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbIkRvY3VtZW50IiwiY29uc3RydWN0b3IiLCJmaWVsZHMiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsInZhbHVlIiwicGFnZUNvbnRlbnQiLCJ0b1N0cmluZyIsIm1ldGFkYXRhIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/document.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/document_loaders/base.js":
/*!**************************************************************!*\
  !*** ./node_modules/langchain/dist/document_loaders/base.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseDocumentLoader: () => (/* binding */ BaseDocumentLoader)\n/* harmony export */ });\n/* harmony import */ var _text_splitter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../text_splitter.js */ \"(rsc)/./node_modules/langchain/dist/text_splitter.js\");\n\n/**\n * Abstract class that provides a default implementation for the\n * loadAndSplit() method from the DocumentLoader interface. The load()\n * method is left abstract and needs to be implemented by subclasses.\n */ class BaseDocumentLoader {\n    /**\n     * Loads the documents and splits them using a specified text splitter.\n     * @param textSplitter The TextSplitter instance to use for splitting the loaded documents. Defaults to a RecursiveCharacterTextSplitter instance.\n     * @returns A Promise that resolves with an array of Document instances, each split according to the provided TextSplitter.\n     */ async loadAndSplit(splitter = new _text_splitter_js__WEBPACK_IMPORTED_MODULE_0__.RecursiveCharacterTextSplitter()) {\n        const docs = await this.load();\n        return splitter.splitDocuments(docs);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvZG9jdW1lbnRfbG9hZGVycy9iYXNlLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXNFO0FBQ3RFOzs7O0NBSUMsR0FDTSxNQUFNQztJQUNUOzs7O0tBSUMsR0FDRCxNQUFNQyxhQUFhQyxXQUFXLElBQUlILDZFQUE4QkEsRUFBRSxFQUFFO1FBQ2hFLE1BQU1JLE9BQU8sTUFBTSxJQUFJLENBQUNDLElBQUk7UUFDNUIsT0FBT0YsU0FBU0csY0FBYyxDQUFDRjtJQUNuQztBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcXVpbGwvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvZG9jdW1lbnRfbG9hZGVycy9iYXNlLmpzPzI0YTEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmVjdXJzaXZlQ2hhcmFjdGVyVGV4dFNwbGl0dGVyLCB9IGZyb20gXCIuLi90ZXh0X3NwbGl0dGVyLmpzXCI7XG4vKipcbiAqIEFic3RyYWN0IGNsYXNzIHRoYXQgcHJvdmlkZXMgYSBkZWZhdWx0IGltcGxlbWVudGF0aW9uIGZvciB0aGVcbiAqIGxvYWRBbmRTcGxpdCgpIG1ldGhvZCBmcm9tIHRoZSBEb2N1bWVudExvYWRlciBpbnRlcmZhY2UuIFRoZSBsb2FkKClcbiAqIG1ldGhvZCBpcyBsZWZ0IGFic3RyYWN0IGFuZCBuZWVkcyB0byBiZSBpbXBsZW1lbnRlZCBieSBzdWJjbGFzc2VzLlxuICovXG5leHBvcnQgY2xhc3MgQmFzZURvY3VtZW50TG9hZGVyIHtcbiAgICAvKipcbiAgICAgKiBMb2FkcyB0aGUgZG9jdW1lbnRzIGFuZCBzcGxpdHMgdGhlbSB1c2luZyBhIHNwZWNpZmllZCB0ZXh0IHNwbGl0dGVyLlxuICAgICAqIEBwYXJhbSB0ZXh0U3BsaXR0ZXIgVGhlIFRleHRTcGxpdHRlciBpbnN0YW5jZSB0byB1c2UgZm9yIHNwbGl0dGluZyB0aGUgbG9hZGVkIGRvY3VtZW50cy4gRGVmYXVsdHMgdG8gYSBSZWN1cnNpdmVDaGFyYWN0ZXJUZXh0U3BsaXR0ZXIgaW5zdGFuY2UuXG4gICAgICogQHJldHVybnMgQSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCBhbiBhcnJheSBvZiBEb2N1bWVudCBpbnN0YW5jZXMsIGVhY2ggc3BsaXQgYWNjb3JkaW5nIHRvIHRoZSBwcm92aWRlZCBUZXh0U3BsaXR0ZXIuXG4gICAgICovXG4gICAgYXN5bmMgbG9hZEFuZFNwbGl0KHNwbGl0dGVyID0gbmV3IFJlY3Vyc2l2ZUNoYXJhY3RlclRleHRTcGxpdHRlcigpKSB7XG4gICAgICAgIGNvbnN0IGRvY3MgPSBhd2FpdCB0aGlzLmxvYWQoKTtcbiAgICAgICAgcmV0dXJuIHNwbGl0dGVyLnNwbGl0RG9jdW1lbnRzKGRvY3MpO1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6WyJSZWN1cnNpdmVDaGFyYWN0ZXJUZXh0U3BsaXR0ZXIiLCJCYXNlRG9jdW1lbnRMb2FkZXIiLCJsb2FkQW5kU3BsaXQiLCJzcGxpdHRlciIsImRvY3MiLCJsb2FkIiwic3BsaXREb2N1bWVudHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/document_loaders/base.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/document_loaders/fs/buffer.js":
/*!*******************************************************************!*\
  !*** ./node_modules/langchain/dist/document_loaders/fs/buffer.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BufferLoader: () => (/* binding */ BufferLoader)\n/* harmony export */ });\n/* harmony import */ var _util_env_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../util/env.js */ \"(rsc)/./node_modules/langchain/dist/util/env.js\");\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../base.js */ \"(rsc)/./node_modules/langchain/dist/document_loaders/base.js\");\n\n\n/**\n * Abstract class that extends the `BaseDocumentLoader` class. It\n * represents a document loader that loads documents from a buffer. The\n * `load()` method is implemented to read the buffer contents and metadata\n * based on the type of `filePathOrBlob`, and then calls the `parse()`\n * method to parse the buffer and return the documents.\n */ class BufferLoader extends _base_js__WEBPACK_IMPORTED_MODULE_1__.BaseDocumentLoader {\n    constructor(filePathOrBlob){\n        super();\n        Object.defineProperty(this, \"filePathOrBlob\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: filePathOrBlob\n        });\n    }\n    /**\n     * Method that reads the buffer contents and metadata based on the type of\n     * `filePathOrBlob`, and then calls the `parse()` method to parse the\n     * buffer and return the documents.\n     * @returns Promise that resolves with an array of `Document` objects.\n     */ async load() {\n        let buffer;\n        let metadata;\n        if (typeof this.filePathOrBlob === \"string\") {\n            const { readFile } = await BufferLoader.imports();\n            buffer = await readFile(this.filePathOrBlob);\n            metadata = {\n                source: this.filePathOrBlob\n            };\n        } else {\n            buffer = await this.filePathOrBlob.arrayBuffer().then((ab)=>Buffer.from(ab));\n            metadata = {\n                source: \"blob\",\n                blobType: this.filePathOrBlob.type\n            };\n        }\n        return this.parse(buffer, metadata);\n    }\n    /**\n     * Static method that imports the `readFile` function from the\n     * `fs/promises` module in Node.js. It is used to dynamically import the\n     * function when needed. If the import fails, it throws an error\n     * indicating that the `fs/promises` module is not available in the\n     * current environment.\n     * @returns Promise that resolves with an object containing the `readFile` function.\n     */ static async imports() {\n        try {\n            const { readFile } = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! node:fs/promises */ \"node:fs/promises\", 19));\n            return {\n                readFile\n            };\n        } catch (e) {\n            console.error(e);\n            throw new Error(`Failed to load fs/promises. TextLoader available only on environment 'node'. It appears you are running environment '${(0,_util_env_js__WEBPACK_IMPORTED_MODULE_0__.getEnv)()}'. See https://<link to docs> for alternatives.`);\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvZG9jdW1lbnRfbG9hZGVycy9mcy9idWZmZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQTJDO0FBQ0s7QUFDaEQ7Ozs7OztDQU1DLEdBQ00sTUFBTUUscUJBQXFCRCx3REFBa0JBO0lBQ2hERSxZQUFZQyxjQUFjLENBQUU7UUFDeEIsS0FBSztRQUNMQyxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLGtCQUFrQjtZQUMxQ0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBT047UUFDWDtJQUNKO0lBQ0E7Ozs7O0tBS0MsR0FDRCxNQUFNTyxPQUFPO1FBQ1QsSUFBSUM7UUFDSixJQUFJQztRQUNKLElBQUksT0FBTyxJQUFJLENBQUNULGNBQWMsS0FBSyxVQUFVO1lBQ3pDLE1BQU0sRUFBRVUsUUFBUSxFQUFFLEdBQUcsTUFBTVosYUFBYWEsT0FBTztZQUMvQ0gsU0FBUyxNQUFNRSxTQUFTLElBQUksQ0FBQ1YsY0FBYztZQUMzQ1MsV0FBVztnQkFBRUcsUUFBUSxJQUFJLENBQUNaLGNBQWM7WUFBQztRQUM3QyxPQUNLO1lBQ0RRLFNBQVMsTUFBTSxJQUFJLENBQUNSLGNBQWMsQ0FDN0JhLFdBQVcsR0FDWEMsSUFBSSxDQUFDLENBQUNDLEtBQU9DLE9BQU9DLElBQUksQ0FBQ0Y7WUFDOUJOLFdBQVc7Z0JBQUVHLFFBQVE7Z0JBQVFNLFVBQVUsSUFBSSxDQUFDbEIsY0FBYyxDQUFDbUIsSUFBSTtZQUFDO1FBQ3BFO1FBQ0EsT0FBTyxJQUFJLENBQUNDLEtBQUssQ0FBQ1osUUFBUUM7SUFDOUI7SUFDQTs7Ozs7OztLQU9DLEdBQ0QsYUFBYUUsVUFBVTtRQUNuQixJQUFJO1lBQ0EsTUFBTSxFQUFFRCxRQUFRLEVBQUUsR0FBRyxNQUFNLHNJQUEwQjtZQUNyRCxPQUFPO2dCQUFFQTtZQUFTO1FBQ3RCLEVBQ0EsT0FBT1csR0FBRztZQUNOQyxRQUFRQyxLQUFLLENBQUNGO1lBQ2QsTUFBTSxJQUFJRyxNQUFNLENBQUMscUhBQXFILEVBQUU1QixvREFBTUEsR0FBRywrQ0FBK0MsQ0FBQztRQUNyTTtJQUNKO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9xdWlsbC8uL25vZGVfbW9kdWxlcy9sYW5nY2hhaW4vZGlzdC9kb2N1bWVudF9sb2FkZXJzL2ZzL2J1ZmZlci5qcz84YTQ4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdldEVudiB9IGZyb20gXCIuLi8uLi91dGlsL2Vudi5qc1wiO1xuaW1wb3J0IHsgQmFzZURvY3VtZW50TG9hZGVyIH0gZnJvbSBcIi4uL2Jhc2UuanNcIjtcbi8qKlxuICogQWJzdHJhY3QgY2xhc3MgdGhhdCBleHRlbmRzIHRoZSBgQmFzZURvY3VtZW50TG9hZGVyYCBjbGFzcy4gSXRcbiAqIHJlcHJlc2VudHMgYSBkb2N1bWVudCBsb2FkZXIgdGhhdCBsb2FkcyBkb2N1bWVudHMgZnJvbSBhIGJ1ZmZlci4gVGhlXG4gKiBgbG9hZCgpYCBtZXRob2QgaXMgaW1wbGVtZW50ZWQgdG8gcmVhZCB0aGUgYnVmZmVyIGNvbnRlbnRzIGFuZCBtZXRhZGF0YVxuICogYmFzZWQgb24gdGhlIHR5cGUgb2YgYGZpbGVQYXRoT3JCbG9iYCwgYW5kIHRoZW4gY2FsbHMgdGhlIGBwYXJzZSgpYFxuICogbWV0aG9kIHRvIHBhcnNlIHRoZSBidWZmZXIgYW5kIHJldHVybiB0aGUgZG9jdW1lbnRzLlxuICovXG5leHBvcnQgY2xhc3MgQnVmZmVyTG9hZGVyIGV4dGVuZHMgQmFzZURvY3VtZW50TG9hZGVyIHtcbiAgICBjb25zdHJ1Y3RvcihmaWxlUGF0aE9yQmxvYikge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJmaWxlUGF0aE9yQmxvYlwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogZmlsZVBhdGhPckJsb2JcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE1ldGhvZCB0aGF0IHJlYWRzIHRoZSBidWZmZXIgY29udGVudHMgYW5kIG1ldGFkYXRhIGJhc2VkIG9uIHRoZSB0eXBlIG9mXG4gICAgICogYGZpbGVQYXRoT3JCbG9iYCwgYW5kIHRoZW4gY2FsbHMgdGhlIGBwYXJzZSgpYCBtZXRob2QgdG8gcGFyc2UgdGhlXG4gICAgICogYnVmZmVyIGFuZCByZXR1cm4gdGhlIGRvY3VtZW50cy5cbiAgICAgKiBAcmV0dXJucyBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCBhbiBhcnJheSBvZiBgRG9jdW1lbnRgIG9iamVjdHMuXG4gICAgICovXG4gICAgYXN5bmMgbG9hZCgpIHtcbiAgICAgICAgbGV0IGJ1ZmZlcjtcbiAgICAgICAgbGV0IG1ldGFkYXRhO1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMuZmlsZVBhdGhPckJsb2IgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgcmVhZEZpbGUgfSA9IGF3YWl0IEJ1ZmZlckxvYWRlci5pbXBvcnRzKCk7XG4gICAgICAgICAgICBidWZmZXIgPSBhd2FpdCByZWFkRmlsZSh0aGlzLmZpbGVQYXRoT3JCbG9iKTtcbiAgICAgICAgICAgIG1ldGFkYXRhID0geyBzb3VyY2U6IHRoaXMuZmlsZVBhdGhPckJsb2IgfTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGJ1ZmZlciA9IGF3YWl0IHRoaXMuZmlsZVBhdGhPckJsb2JcbiAgICAgICAgICAgICAgICAuYXJyYXlCdWZmZXIoKVxuICAgICAgICAgICAgICAgIC50aGVuKChhYikgPT4gQnVmZmVyLmZyb20oYWIpKTtcbiAgICAgICAgICAgIG1ldGFkYXRhID0geyBzb3VyY2U6IFwiYmxvYlwiLCBibG9iVHlwZTogdGhpcy5maWxlUGF0aE9yQmxvYi50eXBlIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2UoYnVmZmVyLCBtZXRhZGF0YSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFN0YXRpYyBtZXRob2QgdGhhdCBpbXBvcnRzIHRoZSBgcmVhZEZpbGVgIGZ1bmN0aW9uIGZyb20gdGhlXG4gICAgICogYGZzL3Byb21pc2VzYCBtb2R1bGUgaW4gTm9kZS5qcy4gSXQgaXMgdXNlZCB0byBkeW5hbWljYWxseSBpbXBvcnQgdGhlXG4gICAgICogZnVuY3Rpb24gd2hlbiBuZWVkZWQuIElmIHRoZSBpbXBvcnQgZmFpbHMsIGl0IHRocm93cyBhbiBlcnJvclxuICAgICAqIGluZGljYXRpbmcgdGhhdCB0aGUgYGZzL3Byb21pc2VzYCBtb2R1bGUgaXMgbm90IGF2YWlsYWJsZSBpbiB0aGVcbiAgICAgKiBjdXJyZW50IGVudmlyb25tZW50LlxuICAgICAqIEByZXR1cm5zIFByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIGFuIG9iamVjdCBjb250YWluaW5nIHRoZSBgcmVhZEZpbGVgIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIHN0YXRpYyBhc3luYyBpbXBvcnRzKCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgeyByZWFkRmlsZSB9ID0gYXdhaXQgaW1wb3J0KFwibm9kZTpmcy9wcm9taXNlc1wiKTtcbiAgICAgICAgICAgIHJldHVybiB7IHJlYWRGaWxlIH07XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byBsb2FkIGZzL3Byb21pc2VzLiBUZXh0TG9hZGVyIGF2YWlsYWJsZSBvbmx5IG9uIGVudmlyb25tZW50ICdub2RlJy4gSXQgYXBwZWFycyB5b3UgYXJlIHJ1bm5pbmcgZW52aXJvbm1lbnQgJyR7Z2V0RW52KCl9Jy4gU2VlIGh0dHBzOi8vPGxpbmsgdG8gZG9jcz4gZm9yIGFsdGVybmF0aXZlcy5gKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdLCJuYW1lcyI6WyJnZXRFbnYiLCJCYXNlRG9jdW1lbnRMb2FkZXIiLCJCdWZmZXJMb2FkZXIiLCJjb25zdHJ1Y3RvciIsImZpbGVQYXRoT3JCbG9iIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJ2YWx1ZSIsImxvYWQiLCJidWZmZXIiLCJtZXRhZGF0YSIsInJlYWRGaWxlIiwiaW1wb3J0cyIsInNvdXJjZSIsImFycmF5QnVmZmVyIiwidGhlbiIsImFiIiwiQnVmZmVyIiwiZnJvbSIsImJsb2JUeXBlIiwidHlwZSIsInBhcnNlIiwiZSIsImNvbnNvbGUiLCJlcnJvciIsIkVycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/document_loaders/fs/buffer.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/document_loaders/fs/pdf.js":
/*!****************************************************************!*\
  !*** ./node_modules/langchain/dist/document_loaders/fs/pdf.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PDFLoader: () => (/* binding */ PDFLoader)\n/* harmony export */ });\n/* harmony import */ var _document_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../document.js */ \"(rsc)/./node_modules/langchain/dist/document.js\");\n/* harmony import */ var _buffer_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./buffer.js */ \"(rsc)/./node_modules/langchain/dist/document_loaders/fs/buffer.js\");\n\n\n/**\n * A class that extends the `BufferLoader` class. It represents a document\n * loader that loads documents from PDF files.\n */ class PDFLoader extends _buffer_js__WEBPACK_IMPORTED_MODULE_1__.BufferLoader {\n    constructor(filePathOrBlob, { splitPages = true, pdfjs = PDFLoaderImports } = {}){\n        super(filePathOrBlob);\n        Object.defineProperty(this, \"splitPages\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"pdfjs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.splitPages = splitPages;\n        this.pdfjs = pdfjs;\n    }\n    /**\n     * A method that takes a `raw` buffer and `metadata` as parameters and\n     * returns a promise that resolves to an array of `Document` instances. It\n     * uses the `getDocument` function from the PDF.js library to load the PDF\n     * from the buffer. It then iterates over each page of the PDF, retrieves\n     * the text content using the `getTextContent` method, and joins the text\n     * items to form the page content. It creates a new `Document` instance\n     * for each page with the extracted text content and metadata, and adds it\n     * to the `documents` array. If `splitPages` is `true`, it returns the\n     * array of `Document` instances. Otherwise, if there are no documents, it\n     * returns an empty array. Otherwise, it concatenates the page content of\n     * all documents and creates a single `Document` instance with the\n     * concatenated content.\n     * @param raw The buffer to be parsed.\n     * @param metadata The metadata of the document.\n     * @returns A promise that resolves to an array of `Document` instances.\n     */ async parse(raw, metadata) {\n        const { getDocument, version } = await this.pdfjs();\n        const pdf = await getDocument({\n            data: new Uint8Array(raw.buffer),\n            useWorkerFetch: false,\n            isEvalSupported: false,\n            useSystemFonts: true\n        }).promise;\n        const meta = await pdf.getMetadata().catch(()=>null);\n        const documents = [];\n        for(let i = 1; i <= pdf.numPages; i += 1){\n            const page = await pdf.getPage(i);\n            const content = await page.getTextContent();\n            if (content.items.length === 0) {\n                continue;\n            }\n            const text = content.items.map((item)=>item.str).join(\"\\n\");\n            documents.push(new _document_js__WEBPACK_IMPORTED_MODULE_0__.Document({\n                pageContent: text,\n                metadata: {\n                    ...metadata,\n                    pdf: {\n                        version,\n                        info: meta?.info,\n                        metadata: meta?.metadata,\n                        totalPages: pdf.numPages\n                    },\n                    loc: {\n                        pageNumber: i\n                    }\n                }\n            }));\n        }\n        if (this.splitPages) {\n            return documents;\n        }\n        if (documents.length === 0) {\n            return [];\n        }\n        return [\n            new _document_js__WEBPACK_IMPORTED_MODULE_0__.Document({\n                pageContent: documents.map((doc)=>doc.pageContent).join(\"\\n\\n\"),\n                metadata: {\n                    ...metadata,\n                    pdf: {\n                        version,\n                        info: meta?.info,\n                        metadata: meta?.metadata,\n                        totalPages: pdf.numPages\n                    }\n                }\n            })\n        ];\n    }\n}\nasync function PDFLoaderImports() {\n    try {\n        const { default: mod } = await __webpack_require__.e(/*! import() */ \"vendor-chunks/pdf-parse\").then(__webpack_require__.t.bind(__webpack_require__, /*! pdf-parse/lib/pdf.js/v1.10.100/build/pdf.js */ \"(rsc)/./node_modules/pdf-parse/lib/pdf.js/v1.10.100/build/pdf.js\", 19));\n        const { getDocument, version } = mod;\n        return {\n            getDocument,\n            version\n        };\n    } catch (e) {\n        console.error(e);\n        throw new Error(\"Failed to load pdf-parse. Please install it with eg. `npm install pdf-parse`.\");\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/document_loaders/fs/pdf.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/embeddings/base.js":
/*!********************************************************!*\
  !*** ./node_modules/langchain/dist/embeddings/base.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Embeddings: () => (/* binding */ Embeddings)\n/* harmony export */ });\n/* harmony import */ var _util_async_caller_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/async_caller.js */ \"(rsc)/./node_modules/langchain/dist/util/async_caller.js\");\n\n/**\n * An abstract class that provides methods for embedding documents and\n * queries using LangChain.\n */ class Embeddings {\n    constructor(params){\n        /**\n         * The async caller should be used by subclasses to make any async calls,\n         * which will thus benefit from the concurrency and retry logic.\n         */ Object.defineProperty(this, \"caller\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.caller = new _util_async_caller_js__WEBPACK_IMPORTED_MODULE_0__.AsyncCaller(params ?? {});\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvZW1iZWRkaW5ncy9iYXNlLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXNEO0FBQ3REOzs7Q0FHQyxHQUNNLE1BQU1DO0lBQ1RDLFlBQVlDLE1BQU0sQ0FBRTtRQUNoQjs7O1NBR0MsR0FDREMsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxVQUFVO1lBQ2xDQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPLEtBQUs7UUFDaEI7UUFDQSxJQUFJLENBQUNDLE1BQU0sR0FBRyxJQUFJViw4REFBV0EsQ0FBQ0csVUFBVSxDQUFDO0lBQzdDO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9xdWlsbC8uL25vZGVfbW9kdWxlcy9sYW5nY2hhaW4vZGlzdC9lbWJlZGRpbmdzL2Jhc2UuanM/YTYwOCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBc3luY0NhbGxlciB9IGZyb20gXCIuLi91dGlsL2FzeW5jX2NhbGxlci5qc1wiO1xuLyoqXG4gKiBBbiBhYnN0cmFjdCBjbGFzcyB0aGF0IHByb3ZpZGVzIG1ldGhvZHMgZm9yIGVtYmVkZGluZyBkb2N1bWVudHMgYW5kXG4gKiBxdWVyaWVzIHVzaW5nIExhbmdDaGFpbi5cbiAqL1xuZXhwb3J0IGNsYXNzIEVtYmVkZGluZ3Mge1xuICAgIGNvbnN0cnVjdG9yKHBhcmFtcykge1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGFzeW5jIGNhbGxlciBzaG91bGQgYmUgdXNlZCBieSBzdWJjbGFzc2VzIHRvIG1ha2UgYW55IGFzeW5jIGNhbGxzLFxuICAgICAgICAgKiB3aGljaCB3aWxsIHRodXMgYmVuZWZpdCBmcm9tIHRoZSBjb25jdXJyZW5jeSBhbmQgcmV0cnkgbG9naWMuXG4gICAgICAgICAqL1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJjYWxsZXJcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5jYWxsZXIgPSBuZXcgQXN5bmNDYWxsZXIocGFyYW1zID8/IHt9KTtcbiAgICB9XG59XG4iXSwibmFtZXMiOlsiQXN5bmNDYWxsZXIiLCJFbWJlZGRpbmdzIiwiY29uc3RydWN0b3IiLCJwYXJhbXMiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsInZhbHVlIiwiY2FsbGVyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/embeddings/base.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/embeddings/openai.js":
/*!**********************************************************!*\
  !*** ./node_modules/langchain/dist/embeddings/openai.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OpenAIEmbeddings: () => (/* binding */ OpenAIEmbeddings)\n/* harmony export */ });\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai */ \"(rsc)/./node_modules/langchain/node_modules/openai/index.mjs\");\n/* harmony import */ var _util_env_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/env.js */ \"(rsc)/./node_modules/langchain/dist/util/env.js\");\n/* harmony import */ var _util_chunk_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/chunk.js */ \"(rsc)/./node_modules/langchain/dist/util/chunk.js\");\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/langchain/dist/embeddings/base.js\");\n/* harmony import */ var _util_azure_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util/azure.js */ \"(rsc)/./node_modules/langchain/dist/util/azure.js\");\n/* harmony import */ var _util_openai_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../util/openai.js */ \"(rsc)/./node_modules/langchain/dist/util/openai.js\");\n\n\n\n\n\n\n/**\n * Class for generating embeddings using the OpenAI API. Extends the\n * Embeddings class and implements OpenAIEmbeddingsParams and\n * AzureOpenAIInput.\n */ class OpenAIEmbeddings extends _base_js__WEBPACK_IMPORTED_MODULE_3__.Embeddings {\n    constructor(fields, configuration){\n        const fieldsWithDefaults = {\n            maxConcurrency: 2,\n            ...fields\n        };\n        super(fieldsWithDefaults);\n        Object.defineProperty(this, \"modelName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"text-embedding-ada-002\"\n        });\n        Object.defineProperty(this, \"batchSize\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 512\n        });\n        Object.defineProperty(this, \"stripNewLines\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"timeout\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"azureOpenAIApiVersion\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"azureOpenAIApiKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"azureOpenAIApiInstanceName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"azureOpenAIApiDeploymentName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"azureOpenAIBasePath\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"client\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"clientConfig\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        let apiKey = fieldsWithDefaults?.openAIApiKey ?? (0,_util_env_js__WEBPACK_IMPORTED_MODULE_1__.getEnvironmentVariable)(\"OPENAI_API_KEY\");\n        const azureApiKey = fieldsWithDefaults?.azureOpenAIApiKey ?? (0,_util_env_js__WEBPACK_IMPORTED_MODULE_1__.getEnvironmentVariable)(\"AZURE_OPENAI_API_KEY\");\n        if (!azureApiKey && !apiKey) {\n            throw new Error(\"OpenAI or Azure OpenAI API key not found\");\n        }\n        const azureApiInstanceName = fieldsWithDefaults?.azureOpenAIApiInstanceName ?? (0,_util_env_js__WEBPACK_IMPORTED_MODULE_1__.getEnvironmentVariable)(\"AZURE_OPENAI_API_INSTANCE_NAME\");\n        const azureApiDeploymentName = (fieldsWithDefaults?.azureOpenAIApiEmbeddingsDeploymentName || fieldsWithDefaults?.azureOpenAIApiDeploymentName) ?? ((0,_util_env_js__WEBPACK_IMPORTED_MODULE_1__.getEnvironmentVariable)(\"AZURE_OPENAI_API_EMBEDDINGS_DEPLOYMENT_NAME\") || (0,_util_env_js__WEBPACK_IMPORTED_MODULE_1__.getEnvironmentVariable)(\"AZURE_OPENAI_API_DEPLOYMENT_NAME\"));\n        const azureApiVersion = fieldsWithDefaults?.azureOpenAIApiVersion ?? (0,_util_env_js__WEBPACK_IMPORTED_MODULE_1__.getEnvironmentVariable)(\"AZURE_OPENAI_API_VERSION\");\n        this.azureOpenAIBasePath = fieldsWithDefaults?.azureOpenAIBasePath ?? (0,_util_env_js__WEBPACK_IMPORTED_MODULE_1__.getEnvironmentVariable)(\"AZURE_OPENAI_BASE_PATH\");\n        this.modelName = fieldsWithDefaults?.modelName ?? this.modelName;\n        this.batchSize = fieldsWithDefaults?.batchSize ?? (azureApiKey ? 1 : this.batchSize);\n        this.stripNewLines = fieldsWithDefaults?.stripNewLines ?? this.stripNewLines;\n        this.timeout = fieldsWithDefaults?.timeout;\n        this.azureOpenAIApiVersion = azureApiVersion;\n        this.azureOpenAIApiKey = azureApiKey;\n        this.azureOpenAIApiInstanceName = azureApiInstanceName;\n        this.azureOpenAIApiDeploymentName = azureApiDeploymentName;\n        if (this.azureOpenAIApiKey) {\n            if (!this.azureOpenAIApiInstanceName && !this.azureOpenAIBasePath) {\n                throw new Error(\"Azure OpenAI API instance name not found\");\n            }\n            if (!this.azureOpenAIApiDeploymentName) {\n                throw new Error(\"Azure OpenAI API deployment name not found\");\n            }\n            if (!this.azureOpenAIApiVersion) {\n                throw new Error(\"Azure OpenAI API version not found\");\n            }\n            apiKey = apiKey ?? \"\";\n        }\n        this.clientConfig = {\n            apiKey,\n            baseURL: configuration?.basePath,\n            dangerouslyAllowBrowser: true,\n            defaultHeaders: configuration?.baseOptions?.headers,\n            defaultQuery: configuration?.baseOptions?.params,\n            ...configuration\n        };\n    }\n    /**\n     * Method to generate embeddings for an array of documents. Splits the\n     * documents into batches and makes requests to the OpenAI API to generate\n     * embeddings.\n     * @param texts Array of documents to generate embeddings for.\n     * @returns Promise that resolves to a 2D array of embeddings for each document.\n     */ async embedDocuments(texts) {\n        const batches = (0,_util_chunk_js__WEBPACK_IMPORTED_MODULE_2__.chunkArray)(this.stripNewLines ? texts.map((t)=>t.replace(/\\n/g, \" \")) : texts, this.batchSize);\n        const batchRequests = batches.map((batch)=>this.embeddingWithRetry({\n                model: this.modelName,\n                input: batch\n            }));\n        const batchResponses = await Promise.all(batchRequests);\n        const embeddings = [];\n        for(let i = 0; i < batchResponses.length; i += 1){\n            const batch = batches[i];\n            const { data: batchResponse } = batchResponses[i];\n            for(let j = 0; j < batch.length; j += 1){\n                embeddings.push(batchResponse[j].embedding);\n            }\n        }\n        return embeddings;\n    }\n    /**\n     * Method to generate an embedding for a single document. Calls the\n     * embeddingWithRetry method with the document as the input.\n     * @param text Document to generate an embedding for.\n     * @returns Promise that resolves to an embedding for the document.\n     */ async embedQuery(text) {\n        const { data } = await this.embeddingWithRetry({\n            model: this.modelName,\n            input: this.stripNewLines ? text.replace(/\\n/g, \" \") : text\n        });\n        return data[0].embedding;\n    }\n    /**\n     * Private method to make a request to the OpenAI API to generate\n     * embeddings. Handles the retry logic and returns the response from the\n     * API.\n     * @param request Request to send to the OpenAI API.\n     * @returns Promise that resolves to the response from the API.\n     */ async embeddingWithRetry(request) {\n        if (!this.client) {\n            const openAIEndpointConfig = {\n                azureOpenAIApiDeploymentName: this.azureOpenAIApiDeploymentName,\n                azureOpenAIApiInstanceName: this.azureOpenAIApiInstanceName,\n                azureOpenAIApiKey: this.azureOpenAIApiKey,\n                azureOpenAIBasePath: this.azureOpenAIBasePath,\n                baseURL: this.clientConfig.baseURL\n            };\n            const endpoint = (0,_util_azure_js__WEBPACK_IMPORTED_MODULE_4__.getEndpoint)(openAIEndpointConfig);\n            const params = {\n                ...this.clientConfig,\n                baseURL: endpoint,\n                timeout: this.timeout,\n                maxRetries: 0\n            };\n            if (!params.baseURL) {\n                delete params.baseURL;\n            }\n            this.client = new openai__WEBPACK_IMPORTED_MODULE_0__.OpenAI(params);\n        }\n        const requestOptions = {};\n        if (this.azureOpenAIApiKey) {\n            requestOptions.headers = {\n                \"api-key\": this.azureOpenAIApiKey,\n                ...requestOptions.headers\n            };\n            requestOptions.query = {\n                \"api-version\": this.azureOpenAIApiVersion,\n                ...requestOptions.query\n            };\n        }\n        return this.caller.call(async ()=>{\n            try {\n                const res = await this.client.embeddings.create(request, requestOptions);\n                return res;\n            } catch (e) {\n                const error = (0,_util_openai_js__WEBPACK_IMPORTED_MODULE_5__.wrapOpenAIClientError)(e);\n                throw error;\n            }\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/embeddings/openai.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/load/map_keys.js":
/*!******************************************************!*\
  !*** ./node_modules/langchain/dist/load/map_keys.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   keyFromJson: () => (/* binding */ keyFromJson),\n/* harmony export */   keyToJson: () => (/* binding */ keyToJson),\n/* harmony export */   mapKeys: () => (/* binding */ mapKeys)\n/* harmony export */ });\n/* harmony import */ var decamelize__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! decamelize */ \"(rsc)/./node_modules/decamelize/index.js\");\n/* harmony import */ var camelcase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! camelcase */ \"(rsc)/./node_modules/camelcase/index.js\");\n\n\nfunction keyToJson(key, map) {\n    return map?.[key] || decamelize__WEBPACK_IMPORTED_MODULE_0__(key);\n}\nfunction keyFromJson(key, map) {\n    return map?.[key] || camelcase__WEBPACK_IMPORTED_MODULE_1__(key);\n}\nfunction mapKeys(fields, mapper, map) {\n    const mapped = {};\n    for(const key in fields){\n        if (Object.hasOwn(fields, key)) {\n            mapped[mapper(key, map)] = fields[key];\n        }\n    }\n    return mapped;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvbG9hZC9tYXBfa2V5cy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFtQztBQUNEO0FBQzNCLFNBQVNFLFVBQVVDLEdBQUcsRUFBRUMsR0FBRztJQUM5QixPQUFPQSxLQUFLLENBQUNELElBQUksSUFBSUgsdUNBQVNBLENBQUNHO0FBQ25DO0FBQ08sU0FBU0UsWUFBWUYsR0FBRyxFQUFFQyxHQUFHO0lBQ2hDLE9BQU9BLEtBQUssQ0FBQ0QsSUFBSSxJQUFJRixzQ0FBU0EsQ0FBQ0U7QUFDbkM7QUFDTyxTQUFTRyxRQUFRQyxNQUFNLEVBQUVDLE1BQU0sRUFBRUosR0FBRztJQUN2QyxNQUFNSyxTQUFTLENBQUM7SUFDaEIsSUFBSyxNQUFNTixPQUFPSSxPQUFRO1FBQ3RCLElBQUlHLE9BQU9DLE1BQU0sQ0FBQ0osUUFBUUosTUFBTTtZQUM1Qk0sTUFBTSxDQUFDRCxPQUFPTCxLQUFLQyxLQUFLLEdBQUdHLE1BQU0sQ0FBQ0osSUFBSTtRQUMxQztJQUNKO0lBQ0EsT0FBT007QUFDWCIsInNvdXJjZXMiOlsid2VicGFjazovL3F1aWxsLy4vbm9kZV9tb2R1bGVzL2xhbmdjaGFpbi9kaXN0L2xvYWQvbWFwX2tleXMuanM/NTA5MSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgc25ha2VDYXNlIGZyb20gXCJkZWNhbWVsaXplXCI7XG5pbXBvcnQgY2FtZWxDYXNlIGZyb20gXCJjYW1lbGNhc2VcIjtcbmV4cG9ydCBmdW5jdGlvbiBrZXlUb0pzb24oa2V5LCBtYXApIHtcbiAgICByZXR1cm4gbWFwPy5ba2V5XSB8fCBzbmFrZUNhc2Uoa2V5KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBrZXlGcm9tSnNvbihrZXksIG1hcCkge1xuICAgIHJldHVybiBtYXA/LltrZXldIHx8IGNhbWVsQ2FzZShrZXkpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIG1hcEtleXMoZmllbGRzLCBtYXBwZXIsIG1hcCkge1xuICAgIGNvbnN0IG1hcHBlZCA9IHt9O1xuICAgIGZvciAoY29uc3Qga2V5IGluIGZpZWxkcykge1xuICAgICAgICBpZiAoT2JqZWN0Lmhhc093bihmaWVsZHMsIGtleSkpIHtcbiAgICAgICAgICAgIG1hcHBlZFttYXBwZXIoa2V5LCBtYXApXSA9IGZpZWxkc1trZXldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBtYXBwZWQ7XG59XG4iXSwibmFtZXMiOlsic25ha2VDYXNlIiwiY2FtZWxDYXNlIiwia2V5VG9Kc29uIiwia2V5IiwibWFwIiwia2V5RnJvbUpzb24iLCJtYXBLZXlzIiwiZmllbGRzIiwibWFwcGVyIiwibWFwcGVkIiwiT2JqZWN0IiwiaGFzT3duIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/load/map_keys.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/load/serializable.js":
/*!**********************************************************!*\
  !*** ./node_modules/langchain/dist/load/serializable.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Serializable: () => (/* binding */ Serializable),\n/* harmony export */   get_lc_unique_name: () => (/* binding */ get_lc_unique_name)\n/* harmony export */ });\n/* harmony import */ var _map_keys_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./map_keys.js */ \"(rsc)/./node_modules/langchain/dist/load/map_keys.js\");\n\nfunction shallowCopy(obj) {\n    return Array.isArray(obj) ? [\n        ...obj\n    ] : {\n        ...obj\n    };\n}\nfunction replaceSecrets(root, secretsMap) {\n    const result = shallowCopy(root);\n    for (const [path, secretId] of Object.entries(secretsMap)){\n        const [last, ...partsReverse] = path.split(\".\").reverse();\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        let current = result;\n        for (const part of partsReverse.reverse()){\n            if (current[part] === undefined) {\n                break;\n            }\n            current[part] = shallowCopy(current[part]);\n            current = current[part];\n        }\n        if (current[last] !== undefined) {\n            current[last] = {\n                lc: 1,\n                type: \"secret\",\n                id: [\n                    secretId\n                ]\n            };\n        }\n    }\n    return result;\n}\n/**\n * Get a unique name for the module, rather than parent class implementations.\n * Should not be subclassed, subclass lc_name above instead.\n */ function get_lc_unique_name(// eslint-disable-next-line @typescript-eslint/no-use-before-define\nserializableClass) {\n    // \"super\" here would refer to the parent class of Serializable,\n    // when we want the parent class of the module actually calling this method.\n    const parentClass = Object.getPrototypeOf(serializableClass);\n    const lcNameIsSubclassed = typeof serializableClass.lc_name === \"function\" && (typeof parentClass.lc_name !== \"function\" || serializableClass.lc_name() !== parentClass.lc_name());\n    if (lcNameIsSubclassed) {\n        return serializableClass.lc_name();\n    } else {\n        return serializableClass.name;\n    }\n}\nclass Serializable {\n    /**\n     * The name of the serializable. Override to provide an alias or\n     * to preserve the serialized module name in minified environments.\n     *\n     * Implemented as a static method to support loading logic.\n     */ static lc_name() {\n        return this.name;\n    }\n    /**\n     * The final serialized identifier for the module.\n     */ get lc_id() {\n        return [\n            ...this.lc_namespace,\n            get_lc_unique_name(this.constructor)\n        ];\n    }\n    /**\n     * A map of secrets, which will be omitted from serialization.\n     * Keys are paths to the secret in constructor args, e.g. \"foo.bar.baz\".\n     * Values are the secret ids, which will be used when deserializing.\n     */ get lc_secrets() {\n        return undefined;\n    }\n    /**\n     * A map of additional attributes to merge with constructor args.\n     * Keys are the attribute names, e.g. \"foo\".\n     * Values are the attribute values, which will be serialized.\n     * These attributes need to be accepted by the constructor as arguments.\n     */ get lc_attributes() {\n        return undefined;\n    }\n    /**\n     * A map of aliases for constructor args.\n     * Keys are the attribute names, e.g. \"foo\".\n     * Values are the alias that will replace the key in serialization.\n     * This is used to eg. make argument names match Python.\n     */ get lc_aliases() {\n        return undefined;\n    }\n    constructor(kwargs, ..._args){\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"lc_kwargs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.lc_kwargs = kwargs || {};\n    }\n    toJSON() {\n        if (!this.lc_serializable) {\n            return this.toJSONNotImplemented();\n        }\n        if (// eslint-disable-next-line no-instanceof/no-instanceof\n        this.lc_kwargs instanceof Serializable || typeof this.lc_kwargs !== \"object\" || Array.isArray(this.lc_kwargs)) {\n            // We do not support serialization of classes with arg not a POJO\n            // I'm aware the check above isn't as strict as it could be\n            return this.toJSONNotImplemented();\n        }\n        const aliases = {};\n        const secrets = {};\n        const kwargs = Object.keys(this.lc_kwargs).reduce((acc, key)=>{\n            acc[key] = key in this ? this[key] : this.lc_kwargs[key];\n            return acc;\n        }, {});\n        // get secrets, attributes and aliases from all superclasses\n        for(// eslint-disable-next-line @typescript-eslint/no-this-alias\n        let current = Object.getPrototypeOf(this); current; current = Object.getPrototypeOf(current)){\n            Object.assign(aliases, Reflect.get(current, \"lc_aliases\", this));\n            Object.assign(secrets, Reflect.get(current, \"lc_secrets\", this));\n            Object.assign(kwargs, Reflect.get(current, \"lc_attributes\", this));\n        }\n        // include all secrets used, even if not in kwargs,\n        // will be replaced with sentinel value in replaceSecrets\n        Object.keys(secrets).forEach((keyPath)=>{\n            // eslint-disable-next-line @typescript-eslint/no-this-alias, @typescript-eslint/no-explicit-any\n            let read = this;\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            let write = kwargs;\n            const [last, ...partsReverse] = keyPath.split(\".\").reverse();\n            for (const key of partsReverse.reverse()){\n                if (!(key in read) || read[key] === undefined) return;\n                if (!(key in write) || write[key] === undefined) {\n                    if (typeof read[key] === \"object\" && read[key] != null) {\n                        write[key] = {};\n                    } else if (Array.isArray(read[key])) {\n                        write[key] = [];\n                    }\n                }\n                read = read[key];\n                write = write[key];\n            }\n            if (last in read && read[last] !== undefined) {\n                write[last] = write[last] || read[last];\n            }\n        });\n        return {\n            lc: 1,\n            type: \"constructor\",\n            id: this.lc_id,\n            kwargs: (0,_map_keys_js__WEBPACK_IMPORTED_MODULE_0__.mapKeys)(Object.keys(secrets).length ? replaceSecrets(kwargs, secrets) : kwargs, _map_keys_js__WEBPACK_IMPORTED_MODULE_0__.keyToJson, aliases)\n        };\n    }\n    toJSONNotImplemented() {\n        return {\n            lc: 1,\n            type: \"not_implemented\",\n            id: this.lc_id\n        };\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/load/serializable.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/memory/base.js":
/*!****************************************************!*\
  !*** ./node_modules/langchain/dist/memory/base.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseMemory: () => (/* binding */ BaseMemory),\n/* harmony export */   getBufferString: () => (/* binding */ getBufferString),\n/* harmony export */   getInputValue: () => (/* binding */ getInputValue),\n/* harmony export */   getOutputValue: () => (/* binding */ getOutputValue),\n/* harmony export */   getPromptInputKey: () => (/* binding */ getPromptInputKey)\n/* harmony export */ });\n/**\n * Abstract base class for memory in LangChain's Chains. Memory refers to\n * the state in Chains. It can be used to store information about past\n * executions of a Chain and inject that information into the inputs of\n * future executions of the Chain.\n */ class BaseMemory {\n}\nconst getValue = (values, key)=>{\n    if (key !== undefined) {\n        return values[key];\n    }\n    const keys = Object.keys(values);\n    if (keys.length === 1) {\n        return values[keys[0]];\n    }\n};\n/**\n * This function is used by memory classes to select the input value\n * to use for the memory. If there is only one input value, it is used.\n * If there are multiple input values, the inputKey must be specified.\n */ const getInputValue = (inputValues, inputKey)=>{\n    const value = getValue(inputValues, inputKey);\n    if (!value) {\n        const keys = Object.keys(inputValues);\n        throw new Error(`input values have ${keys.length} keys, you must specify an input key or pass only 1 key as input`);\n    }\n    return value;\n};\n/**\n * This function is used by memory classes to select the output value\n * to use for the memory. If there is only one output value, it is used.\n * If there are multiple output values, the outputKey must be specified.\n * If no outputKey is specified, an error is thrown.\n */ const getOutputValue = (outputValues, outputKey)=>{\n    const value = getValue(outputValues, outputKey);\n    if (!value) {\n        const keys = Object.keys(outputValues);\n        throw new Error(`output values have ${keys.length} keys, you must specify an output key or pass only 1 key as output`);\n    }\n    return value;\n};\n/**\n * This function is used by memory classes to get a string representation\n * of the chat message history, based on the message content and role.\n */ function getBufferString(messages, humanPrefix = \"Human\", aiPrefix = \"AI\") {\n    const string_messages = [];\n    for (const m of messages){\n        let role;\n        if (m._getType() === \"human\") {\n            role = humanPrefix;\n        } else if (m._getType() === \"ai\") {\n            role = aiPrefix;\n        } else if (m._getType() === \"system\") {\n            role = \"System\";\n        } else if (m._getType() === \"function\") {\n            role = \"Function\";\n        } else if (m._getType() === \"generic\") {\n            role = m.role;\n        } else {\n            throw new Error(`Got unsupported message type: ${m}`);\n        }\n        const nameStr = m.name ? `${m.name}, ` : \"\";\n        string_messages.push(`${role}: ${nameStr}${m.content}`);\n    }\n    return string_messages.join(\"\\n\");\n}\n/**\n * Function used by memory classes to get the key of the prompt input,\n * excluding any keys that are memory variables or the \"stop\" key. If\n * there is not exactly one prompt input key, an error is thrown.\n */ function getPromptInputKey(inputs, memoryVariables) {\n    const promptInputKeys = Object.keys(inputs).filter((key)=>!memoryVariables.includes(key) && key !== \"stop\");\n    if (promptInputKeys.length !== 1) {\n        throw new Error(`One input key expected, but got ${promptInputKeys.length}`);\n    }\n    return promptInputKeys[0];\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvbWVtb3J5L2Jhc2UuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTs7Ozs7Q0FLQyxHQUNNLE1BQU1BO0FBQ2I7QUFDQSxNQUFNQyxXQUFXLENBQUNDLFFBQVFDO0lBQ3RCLElBQUlBLFFBQVFDLFdBQVc7UUFDbkIsT0FBT0YsTUFBTSxDQUFDQyxJQUFJO0lBQ3RCO0lBQ0EsTUFBTUUsT0FBT0MsT0FBT0QsSUFBSSxDQUFDSDtJQUN6QixJQUFJRyxLQUFLRSxNQUFNLEtBQUssR0FBRztRQUNuQixPQUFPTCxNQUFNLENBQUNHLElBQUksQ0FBQyxFQUFFLENBQUM7SUFDMUI7QUFDSjtBQUNBOzs7O0NBSUMsR0FDTSxNQUFNRyxnQkFBZ0IsQ0FBQ0MsYUFBYUM7SUFDdkMsTUFBTUMsUUFBUVYsU0FBU1EsYUFBYUM7SUFDcEMsSUFBSSxDQUFDQyxPQUFPO1FBQ1IsTUFBTU4sT0FBT0MsT0FBT0QsSUFBSSxDQUFDSTtRQUN6QixNQUFNLElBQUlHLE1BQU0sQ0FBQyxrQkFBa0IsRUFBRVAsS0FBS0UsTUFBTSxDQUFDLGdFQUFnRSxDQUFDO0lBQ3RIO0lBQ0EsT0FBT0k7QUFDWCxFQUFFO0FBQ0Y7Ozs7O0NBS0MsR0FDTSxNQUFNRSxpQkFBaUIsQ0FBQ0MsY0FBY0M7SUFDekMsTUFBTUosUUFBUVYsU0FBU2EsY0FBY0M7SUFDckMsSUFBSSxDQUFDSixPQUFPO1FBQ1IsTUFBTU4sT0FBT0MsT0FBT0QsSUFBSSxDQUFDUztRQUN6QixNQUFNLElBQUlGLE1BQU0sQ0FBQyxtQkFBbUIsRUFBRVAsS0FBS0UsTUFBTSxDQUFDLGtFQUFrRSxDQUFDO0lBQ3pIO0lBQ0EsT0FBT0k7QUFDWCxFQUFFO0FBQ0Y7OztDQUdDLEdBQ00sU0FBU0ssZ0JBQWdCQyxRQUFRLEVBQUVDLGNBQWMsT0FBTyxFQUFFQyxXQUFXLElBQUk7SUFDNUUsTUFBTUMsa0JBQWtCLEVBQUU7SUFDMUIsS0FBSyxNQUFNQyxLQUFLSixTQUFVO1FBQ3RCLElBQUlLO1FBQ0osSUFBSUQsRUFBRUUsUUFBUSxPQUFPLFNBQVM7WUFDMUJELE9BQU9KO1FBQ1gsT0FDSyxJQUFJRyxFQUFFRSxRQUFRLE9BQU8sTUFBTTtZQUM1QkQsT0FBT0g7UUFDWCxPQUNLLElBQUlFLEVBQUVFLFFBQVEsT0FBTyxVQUFVO1lBQ2hDRCxPQUFPO1FBQ1gsT0FDSyxJQUFJRCxFQUFFRSxRQUFRLE9BQU8sWUFBWTtZQUNsQ0QsT0FBTztRQUNYLE9BQ0ssSUFBSUQsRUFBRUUsUUFBUSxPQUFPLFdBQVc7WUFDakNELE9BQU9ELEVBQUVDLElBQUk7UUFDakIsT0FDSztZQUNELE1BQU0sSUFBSVYsTUFBTSxDQUFDLDhCQUE4QixFQUFFUyxFQUFFLENBQUM7UUFDeEQ7UUFDQSxNQUFNRyxVQUFVSCxFQUFFSSxJQUFJLEdBQUcsQ0FBQyxFQUFFSixFQUFFSSxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUc7UUFDekNMLGdCQUFnQk0sSUFBSSxDQUFDLENBQUMsRUFBRUosS0FBSyxFQUFFLEVBQUVFLFFBQVEsRUFBRUgsRUFBRU0sT0FBTyxDQUFDLENBQUM7SUFDMUQ7SUFDQSxPQUFPUCxnQkFBZ0JRLElBQUksQ0FBQztBQUNoQztBQUNBOzs7O0NBSUMsR0FDTSxTQUFTQyxrQkFBa0JDLE1BQU0sRUFBRUMsZUFBZTtJQUNyRCxNQUFNQyxrQkFBa0IxQixPQUFPRCxJQUFJLENBQUN5QixRQUFRRyxNQUFNLENBQUMsQ0FBQzlCLE1BQVEsQ0FBQzRCLGdCQUFnQkcsUUFBUSxDQUFDL0IsUUFBUUEsUUFBUTtJQUN0RyxJQUFJNkIsZ0JBQWdCekIsTUFBTSxLQUFLLEdBQUc7UUFDOUIsTUFBTSxJQUFJSyxNQUFNLENBQUMsZ0NBQWdDLEVBQUVvQixnQkFBZ0J6QixNQUFNLENBQUMsQ0FBQztJQUMvRTtJQUNBLE9BQU95QixlQUFlLENBQUMsRUFBRTtBQUM3QiIsInNvdXJjZXMiOlsid2VicGFjazovL3F1aWxsLy4vbm9kZV9tb2R1bGVzL2xhbmdjaGFpbi9kaXN0L21lbW9yeS9iYXNlLmpzPzRhYWEiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBBYnN0cmFjdCBiYXNlIGNsYXNzIGZvciBtZW1vcnkgaW4gTGFuZ0NoYWluJ3MgQ2hhaW5zLiBNZW1vcnkgcmVmZXJzIHRvXG4gKiB0aGUgc3RhdGUgaW4gQ2hhaW5zLiBJdCBjYW4gYmUgdXNlZCB0byBzdG9yZSBpbmZvcm1hdGlvbiBhYm91dCBwYXN0XG4gKiBleGVjdXRpb25zIG9mIGEgQ2hhaW4gYW5kIGluamVjdCB0aGF0IGluZm9ybWF0aW9uIGludG8gdGhlIGlucHV0cyBvZlxuICogZnV0dXJlIGV4ZWN1dGlvbnMgb2YgdGhlIENoYWluLlxuICovXG5leHBvcnQgY2xhc3MgQmFzZU1lbW9yeSB7XG59XG5jb25zdCBnZXRWYWx1ZSA9ICh2YWx1ZXMsIGtleSkgPT4ge1xuICAgIGlmIChrZXkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gdmFsdWVzW2tleV07XG4gICAgfVxuICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyh2YWx1ZXMpO1xuICAgIGlmIChrZXlzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICByZXR1cm4gdmFsdWVzW2tleXNbMF1dO1xuICAgIH1cbn07XG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gaXMgdXNlZCBieSBtZW1vcnkgY2xhc3NlcyB0byBzZWxlY3QgdGhlIGlucHV0IHZhbHVlXG4gKiB0byB1c2UgZm9yIHRoZSBtZW1vcnkuIElmIHRoZXJlIGlzIG9ubHkgb25lIGlucHV0IHZhbHVlLCBpdCBpcyB1c2VkLlxuICogSWYgdGhlcmUgYXJlIG11bHRpcGxlIGlucHV0IHZhbHVlcywgdGhlIGlucHV0S2V5IG11c3QgYmUgc3BlY2lmaWVkLlxuICovXG5leHBvcnQgY29uc3QgZ2V0SW5wdXRWYWx1ZSA9IChpbnB1dFZhbHVlcywgaW5wdXRLZXkpID0+IHtcbiAgICBjb25zdCB2YWx1ZSA9IGdldFZhbHVlKGlucHV0VmFsdWVzLCBpbnB1dEtleSk7XG4gICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoaW5wdXRWYWx1ZXMpO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGlucHV0IHZhbHVlcyBoYXZlICR7a2V5cy5sZW5ndGh9IGtleXMsIHlvdSBtdXN0IHNwZWNpZnkgYW4gaW5wdXQga2V5IG9yIHBhc3Mgb25seSAxIGtleSBhcyBpbnB1dGApO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG59O1xuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgYnkgbWVtb3J5IGNsYXNzZXMgdG8gc2VsZWN0IHRoZSBvdXRwdXQgdmFsdWVcbiAqIHRvIHVzZSBmb3IgdGhlIG1lbW9yeS4gSWYgdGhlcmUgaXMgb25seSBvbmUgb3V0cHV0IHZhbHVlLCBpdCBpcyB1c2VkLlxuICogSWYgdGhlcmUgYXJlIG11bHRpcGxlIG91dHB1dCB2YWx1ZXMsIHRoZSBvdXRwdXRLZXkgbXVzdCBiZSBzcGVjaWZpZWQuXG4gKiBJZiBubyBvdXRwdXRLZXkgaXMgc3BlY2lmaWVkLCBhbiBlcnJvciBpcyB0aHJvd24uXG4gKi9cbmV4cG9ydCBjb25zdCBnZXRPdXRwdXRWYWx1ZSA9IChvdXRwdXRWYWx1ZXMsIG91dHB1dEtleSkgPT4ge1xuICAgIGNvbnN0IHZhbHVlID0gZ2V0VmFsdWUob3V0cHV0VmFsdWVzLCBvdXRwdXRLZXkpO1xuICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKG91dHB1dFZhbHVlcyk7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgb3V0cHV0IHZhbHVlcyBoYXZlICR7a2V5cy5sZW5ndGh9IGtleXMsIHlvdSBtdXN0IHNwZWNpZnkgYW4gb3V0cHV0IGtleSBvciBwYXNzIG9ubHkgMSBrZXkgYXMgb3V0cHV0YCk7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbn07XG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gaXMgdXNlZCBieSBtZW1vcnkgY2xhc3NlcyB0byBnZXQgYSBzdHJpbmcgcmVwcmVzZW50YXRpb25cbiAqIG9mIHRoZSBjaGF0IG1lc3NhZ2UgaGlzdG9yeSwgYmFzZWQgb24gdGhlIG1lc3NhZ2UgY29udGVudCBhbmQgcm9sZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEJ1ZmZlclN0cmluZyhtZXNzYWdlcywgaHVtYW5QcmVmaXggPSBcIkh1bWFuXCIsIGFpUHJlZml4ID0gXCJBSVwiKSB7XG4gICAgY29uc3Qgc3RyaW5nX21lc3NhZ2VzID0gW107XG4gICAgZm9yIChjb25zdCBtIG9mIG1lc3NhZ2VzKSB7XG4gICAgICAgIGxldCByb2xlO1xuICAgICAgICBpZiAobS5fZ2V0VHlwZSgpID09PSBcImh1bWFuXCIpIHtcbiAgICAgICAgICAgIHJvbGUgPSBodW1hblByZWZpeDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChtLl9nZXRUeXBlKCkgPT09IFwiYWlcIikge1xuICAgICAgICAgICAgcm9sZSA9IGFpUHJlZml4O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG0uX2dldFR5cGUoKSA9PT0gXCJzeXN0ZW1cIikge1xuICAgICAgICAgICAgcm9sZSA9IFwiU3lzdGVtXCI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobS5fZ2V0VHlwZSgpID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIHJvbGUgPSBcIkZ1bmN0aW9uXCI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobS5fZ2V0VHlwZSgpID09PSBcImdlbmVyaWNcIikge1xuICAgICAgICAgICAgcm9sZSA9IG0ucm9sZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgR290IHVuc3VwcG9ydGVkIG1lc3NhZ2UgdHlwZTogJHttfWApO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG5hbWVTdHIgPSBtLm5hbWUgPyBgJHttLm5hbWV9LCBgIDogXCJcIjtcbiAgICAgICAgc3RyaW5nX21lc3NhZ2VzLnB1c2goYCR7cm9sZX06ICR7bmFtZVN0cn0ke20uY29udGVudH1gKTtcbiAgICB9XG4gICAgcmV0dXJuIHN0cmluZ19tZXNzYWdlcy5qb2luKFwiXFxuXCIpO1xufVxuLyoqXG4gKiBGdW5jdGlvbiB1c2VkIGJ5IG1lbW9yeSBjbGFzc2VzIHRvIGdldCB0aGUga2V5IG9mIHRoZSBwcm9tcHQgaW5wdXQsXG4gKiBleGNsdWRpbmcgYW55IGtleXMgdGhhdCBhcmUgbWVtb3J5IHZhcmlhYmxlcyBvciB0aGUgXCJzdG9wXCIga2V5LiBJZlxuICogdGhlcmUgaXMgbm90IGV4YWN0bHkgb25lIHByb21wdCBpbnB1dCBrZXksIGFuIGVycm9yIGlzIHRocm93bi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFByb21wdElucHV0S2V5KGlucHV0cywgbWVtb3J5VmFyaWFibGVzKSB7XG4gICAgY29uc3QgcHJvbXB0SW5wdXRLZXlzID0gT2JqZWN0LmtleXMoaW5wdXRzKS5maWx0ZXIoKGtleSkgPT4gIW1lbW9yeVZhcmlhYmxlcy5pbmNsdWRlcyhrZXkpICYmIGtleSAhPT0gXCJzdG9wXCIpO1xuICAgIGlmIChwcm9tcHRJbnB1dEtleXMubGVuZ3RoICE9PSAxKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgT25lIGlucHV0IGtleSBleHBlY3RlZCwgYnV0IGdvdCAke3Byb21wdElucHV0S2V5cy5sZW5ndGh9YCk7XG4gICAgfVxuICAgIHJldHVybiBwcm9tcHRJbnB1dEtleXNbMF07XG59XG4iXSwibmFtZXMiOlsiQmFzZU1lbW9yeSIsImdldFZhbHVlIiwidmFsdWVzIiwia2V5IiwidW5kZWZpbmVkIiwia2V5cyIsIk9iamVjdCIsImxlbmd0aCIsImdldElucHV0VmFsdWUiLCJpbnB1dFZhbHVlcyIsImlucHV0S2V5IiwidmFsdWUiLCJFcnJvciIsImdldE91dHB1dFZhbHVlIiwib3V0cHV0VmFsdWVzIiwib3V0cHV0S2V5IiwiZ2V0QnVmZmVyU3RyaW5nIiwibWVzc2FnZXMiLCJodW1hblByZWZpeCIsImFpUHJlZml4Iiwic3RyaW5nX21lc3NhZ2VzIiwibSIsInJvbGUiLCJfZ2V0VHlwZSIsIm5hbWVTdHIiLCJuYW1lIiwicHVzaCIsImNvbnRlbnQiLCJqb2luIiwiZ2V0UHJvbXB0SW5wdXRLZXkiLCJpbnB1dHMiLCJtZW1vcnlWYXJpYWJsZXMiLCJwcm9tcHRJbnB1dEtleXMiLCJmaWx0ZXIiLCJpbmNsdWRlcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/memory/base.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/schema/document.js":
/*!********************************************************!*\
  !*** ./node_modules/langchain/dist/schema/document.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseDocumentTransformer: () => (/* binding */ BaseDocumentTransformer),\n/* harmony export */   MappingDocumentTransformer: () => (/* binding */ MappingDocumentTransformer)\n/* harmony export */ });\n/* harmony import */ var _runnable_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./runnable/index.js */ \"(rsc)/./node_modules/langchain/dist/schema/runnable/index.js\");\n\n/**\n * Abstract base class for document transformation systems.\n *\n * A document transformation system takes an array of Documents and returns an\n * array of transformed Documents. These arrays do not necessarily have to have\n * the same length.\n *\n * One example of this is a text splitter that splits a large document into\n * many smaller documents.\n */ class BaseDocumentTransformer extends _runnable_index_js__WEBPACK_IMPORTED_MODULE_0__.Runnable {\n    constructor(){\n        super(...arguments);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain\",\n                \"document_transformers\"\n            ]\n        });\n    }\n    /**\n     * Method to invoke the document transformation. This method calls the\n     * transformDocuments method with the provided input.\n     * @param input The input documents to be transformed.\n     * @param _options Optional configuration object to customize the behavior of callbacks.\n     * @returns A Promise that resolves to the transformed documents.\n     */ invoke(input, _options) {\n        return this.transformDocuments(input);\n    }\n}\n/**\n * Class for document transformers that return exactly one transformed document\n * for each input document.\n */ class MappingDocumentTransformer extends BaseDocumentTransformer {\n    async transformDocuments(documents) {\n        const newDocuments = [];\n        for (const document of documents){\n            const transformedDocument = await this._transformDocument(document);\n            newDocuments.push(transformedDocument);\n        }\n        return newDocuments;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3Qvc2NoZW1hL2RvY3VtZW50LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUErQztBQUMvQzs7Ozs7Ozs7O0NBU0MsR0FDTSxNQUFNQyxnQ0FBZ0NELHdEQUFRQTtJQUNqREUsYUFBYztRQUNWLEtBQUssSUFBSUM7UUFDVEMsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxnQkFBZ0I7WUFDeENDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU87Z0JBQUM7Z0JBQWE7YUFBd0I7UUFDakQ7SUFDSjtJQUNBOzs7Ozs7S0FNQyxHQUNEQyxPQUFPQyxLQUFLLEVBQUVDLFFBQVEsRUFBRTtRQUNwQixPQUFPLElBQUksQ0FBQ0Msa0JBQWtCLENBQUNGO0lBQ25DO0FBQ0o7QUFDQTs7O0NBR0MsR0FDTSxNQUFNRyxtQ0FBbUNiO0lBQzVDLE1BQU1ZLG1CQUFtQkUsU0FBUyxFQUFFO1FBQ2hDLE1BQU1DLGVBQWUsRUFBRTtRQUN2QixLQUFLLE1BQU1DLFlBQVlGLFVBQVc7WUFDOUIsTUFBTUcsc0JBQXNCLE1BQU0sSUFBSSxDQUFDQyxrQkFBa0IsQ0FBQ0Y7WUFDMURELGFBQWFJLElBQUksQ0FBQ0Y7UUFDdEI7UUFDQSxPQUFPRjtJQUNYO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9xdWlsbC8uL25vZGVfbW9kdWxlcy9sYW5nY2hhaW4vZGlzdC9zY2hlbWEvZG9jdW1lbnQuanM/NzJiZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSdW5uYWJsZSB9IGZyb20gXCIuL3J1bm5hYmxlL2luZGV4LmpzXCI7XG4vKipcbiAqIEFic3RyYWN0IGJhc2UgY2xhc3MgZm9yIGRvY3VtZW50IHRyYW5zZm9ybWF0aW9uIHN5c3RlbXMuXG4gKlxuICogQSBkb2N1bWVudCB0cmFuc2Zvcm1hdGlvbiBzeXN0ZW0gdGFrZXMgYW4gYXJyYXkgb2YgRG9jdW1lbnRzIGFuZCByZXR1cm5zIGFuXG4gKiBhcnJheSBvZiB0cmFuc2Zvcm1lZCBEb2N1bWVudHMuIFRoZXNlIGFycmF5cyBkbyBub3QgbmVjZXNzYXJpbHkgaGF2ZSB0byBoYXZlXG4gKiB0aGUgc2FtZSBsZW5ndGguXG4gKlxuICogT25lIGV4YW1wbGUgb2YgdGhpcyBpcyBhIHRleHQgc3BsaXR0ZXIgdGhhdCBzcGxpdHMgYSBsYXJnZSBkb2N1bWVudCBpbnRvXG4gKiBtYW55IHNtYWxsZXIgZG9jdW1lbnRzLlxuICovXG5leHBvcnQgY2xhc3MgQmFzZURvY3VtZW50VHJhbnNmb3JtZXIgZXh0ZW5kcyBSdW5uYWJsZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImxjX25hbWVzcGFjZVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogW1wibGFuZ2NoYWluXCIsIFwiZG9jdW1lbnRfdHJhbnNmb3JtZXJzXCJdXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBNZXRob2QgdG8gaW52b2tlIHRoZSBkb2N1bWVudCB0cmFuc2Zvcm1hdGlvbi4gVGhpcyBtZXRob2QgY2FsbHMgdGhlXG4gICAgICogdHJhbnNmb3JtRG9jdW1lbnRzIG1ldGhvZCB3aXRoIHRoZSBwcm92aWRlZCBpbnB1dC5cbiAgICAgKiBAcGFyYW0gaW5wdXQgVGhlIGlucHV0IGRvY3VtZW50cyB0byBiZSB0cmFuc2Zvcm1lZC5cbiAgICAgKiBAcGFyYW0gX29wdGlvbnMgT3B0aW9uYWwgY29uZmlndXJhdGlvbiBvYmplY3QgdG8gY3VzdG9taXplIHRoZSBiZWhhdmlvciBvZiBjYWxsYmFja3MuXG4gICAgICogQHJldHVybnMgQSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gdGhlIHRyYW5zZm9ybWVkIGRvY3VtZW50cy5cbiAgICAgKi9cbiAgICBpbnZva2UoaW5wdXQsIF9vcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRyYW5zZm9ybURvY3VtZW50cyhpbnB1dCk7XG4gICAgfVxufVxuLyoqXG4gKiBDbGFzcyBmb3IgZG9jdW1lbnQgdHJhbnNmb3JtZXJzIHRoYXQgcmV0dXJuIGV4YWN0bHkgb25lIHRyYW5zZm9ybWVkIGRvY3VtZW50XG4gKiBmb3IgZWFjaCBpbnB1dCBkb2N1bWVudC5cbiAqL1xuZXhwb3J0IGNsYXNzIE1hcHBpbmdEb2N1bWVudFRyYW5zZm9ybWVyIGV4dGVuZHMgQmFzZURvY3VtZW50VHJhbnNmb3JtZXIge1xuICAgIGFzeW5jIHRyYW5zZm9ybURvY3VtZW50cyhkb2N1bWVudHMpIHtcbiAgICAgICAgY29uc3QgbmV3RG9jdW1lbnRzID0gW107XG4gICAgICAgIGZvciAoY29uc3QgZG9jdW1lbnQgb2YgZG9jdW1lbnRzKSB7XG4gICAgICAgICAgICBjb25zdCB0cmFuc2Zvcm1lZERvY3VtZW50ID0gYXdhaXQgdGhpcy5fdHJhbnNmb3JtRG9jdW1lbnQoZG9jdW1lbnQpO1xuICAgICAgICAgICAgbmV3RG9jdW1lbnRzLnB1c2godHJhbnNmb3JtZWREb2N1bWVudCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ld0RvY3VtZW50cztcbiAgICB9XG59XG4iXSwibmFtZXMiOlsiUnVubmFibGUiLCJCYXNlRG9jdW1lbnRUcmFuc2Zvcm1lciIsImNvbnN0cnVjdG9yIiwiYXJndW1lbnRzIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJ2YWx1ZSIsImludm9rZSIsImlucHV0IiwiX29wdGlvbnMiLCJ0cmFuc2Zvcm1Eb2N1bWVudHMiLCJNYXBwaW5nRG9jdW1lbnRUcmFuc2Zvcm1lciIsImRvY3VtZW50cyIsIm5ld0RvY3VtZW50cyIsImRvY3VtZW50IiwidHJhbnNmb3JtZWREb2N1bWVudCIsIl90cmFuc2Zvcm1Eb2N1bWVudCIsInB1c2giXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/schema/document.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/schema/retriever.js":
/*!*********************************************************!*\
  !*** ./node_modules/langchain/dist/schema/retriever.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseRetriever: () => (/* binding */ BaseRetriever)\n/* harmony export */ });\n/* harmony import */ var _callbacks_manager_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../callbacks/manager.js */ \"(rsc)/./node_modules/langchain/dist/callbacks/manager.js\");\n/* harmony import */ var _runnable_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./runnable/index.js */ \"(rsc)/./node_modules/langchain/dist/schema/runnable/index.js\");\n\n\n/**\n * Abstract base class for a Document retrieval system. A retrieval system\n * is defined as something that can take string queries and return the\n * most 'relevant' Documents from some source.\n */ class BaseRetriever extends _runnable_index_js__WEBPACK_IMPORTED_MODULE_1__.Runnable {\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"callbacks\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"tags\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"metadata\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"verbose\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.callbacks = fields?.callbacks;\n        this.tags = fields?.tags ?? [];\n        this.metadata = fields?.metadata ?? {};\n        this.verbose = fields?.verbose ?? false;\n    }\n    /**\n     * TODO: This should be an abstract method, but we'd like to avoid breaking\n     * changes to people currently using subclassed custom retrievers.\n     * Change it on next major release.\n     */ _getRelevantDocuments(_query, _callbacks) {\n        throw new Error(\"Not implemented!\");\n    }\n    async invoke(input, options) {\n        return this.getRelevantDocuments(input, options);\n    }\n    /**\n     * Main method used to retrieve relevant documents. It takes a query\n     * string and an optional configuration object, and returns a promise that\n     * resolves to an array of `Document` objects. This method handles the\n     * retrieval process, including starting and ending callbacks, and error\n     * handling.\n     * @param query The query string to retrieve relevant documents for.\n     * @param config Optional configuration object for the retrieval process.\n     * @returns A promise that resolves to an array of `Document` objects.\n     */ async getRelevantDocuments(query, config) {\n        const parsedConfig = (0,_callbacks_manager_js__WEBPACK_IMPORTED_MODULE_0__.parseCallbackConfigArg)(config);\n        const callbackManager_ = await _callbacks_manager_js__WEBPACK_IMPORTED_MODULE_0__.CallbackManager.configure(parsedConfig.callbacks, this.callbacks, parsedConfig.tags, this.tags, parsedConfig.metadata, this.metadata, {\n            verbose: this.verbose\n        });\n        const runManager = await callbackManager_?.handleRetrieverStart(this.toJSON(), query);\n        try {\n            const results = await this._getRelevantDocuments(query, runManager);\n            await runManager?.handleRetrieverEnd(results);\n            return results;\n        } catch (error) {\n            await runManager?.handleRetrieverError(error);\n            throw error;\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3Qvc2NoZW1hL3JldHJpZXZlci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBbUY7QUFDcEM7QUFDL0M7Ozs7Q0FJQyxHQUNNLE1BQU1HLHNCQUFzQkQsd0RBQVFBO0lBQ3ZDRSxZQUFZQyxNQUFNLENBQUU7UUFDaEIsS0FBSyxDQUFDQTtRQUNOQyxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLGFBQWE7WUFDckNDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU8sS0FBSztRQUNoQjtRQUNBTCxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLFFBQVE7WUFDaENDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU8sS0FBSztRQUNoQjtRQUNBTCxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLFlBQVk7WUFDcENDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU8sS0FBSztRQUNoQjtRQUNBTCxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLFdBQVc7WUFDbkNDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU8sS0FBSztRQUNoQjtRQUNBLElBQUksQ0FBQ0MsU0FBUyxHQUFHUCxRQUFRTztRQUN6QixJQUFJLENBQUNDLElBQUksR0FBR1IsUUFBUVEsUUFBUSxFQUFFO1FBQzlCLElBQUksQ0FBQ0MsUUFBUSxHQUFHVCxRQUFRUyxZQUFZLENBQUM7UUFDckMsSUFBSSxDQUFDQyxPQUFPLEdBQUdWLFFBQVFVLFdBQVc7SUFDdEM7SUFDQTs7OztLQUlDLEdBQ0RDLHNCQUFzQkMsTUFBTSxFQUFFQyxVQUFVLEVBQUU7UUFDdEMsTUFBTSxJQUFJQyxNQUFNO0lBQ3BCO0lBQ0EsTUFBTUMsT0FBT0MsS0FBSyxFQUFFQyxPQUFPLEVBQUU7UUFDekIsT0FBTyxJQUFJLENBQUNDLG9CQUFvQixDQUFDRixPQUFPQztJQUM1QztJQUNBOzs7Ozs7Ozs7S0FTQyxHQUNELE1BQU1DLHFCQUFxQkMsS0FBSyxFQUFFQyxNQUFNLEVBQUU7UUFDdEMsTUFBTUMsZUFBZXpCLDZFQUFzQkEsQ0FBQ3dCO1FBQzVDLE1BQU1FLG1CQUFtQixNQUFNM0Isa0VBQWVBLENBQUM0QixTQUFTLENBQUNGLGFBQWFkLFNBQVMsRUFBRSxJQUFJLENBQUNBLFNBQVMsRUFBRWMsYUFBYWIsSUFBSSxFQUFFLElBQUksQ0FBQ0EsSUFBSSxFQUFFYSxhQUFhWixRQUFRLEVBQUUsSUFBSSxDQUFDQSxRQUFRLEVBQUU7WUFBRUMsU0FBUyxJQUFJLENBQUNBLE9BQU87UUFBQztRQUM3TCxNQUFNYyxhQUFhLE1BQU1GLGtCQUFrQkcscUJBQXFCLElBQUksQ0FBQ0MsTUFBTSxJQUFJUDtRQUMvRSxJQUFJO1lBQ0EsTUFBTVEsVUFBVSxNQUFNLElBQUksQ0FBQ2hCLHFCQUFxQixDQUFDUSxPQUFPSztZQUN4RCxNQUFNQSxZQUFZSSxtQkFBbUJEO1lBQ3JDLE9BQU9BO1FBQ1gsRUFDQSxPQUFPRSxPQUFPO1lBQ1YsTUFBTUwsWUFBWU0scUJBQXFCRDtZQUN2QyxNQUFNQTtRQUNWO0lBQ0o7QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL3F1aWxsLy4vbm9kZV9tb2R1bGVzL2xhbmdjaGFpbi9kaXN0L3NjaGVtYS9yZXRyaWV2ZXIuanM/ODhjNSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDYWxsYmFja01hbmFnZXIsIHBhcnNlQ2FsbGJhY2tDb25maWdBcmcsIH0gZnJvbSBcIi4uL2NhbGxiYWNrcy9tYW5hZ2VyLmpzXCI7XG5pbXBvcnQgeyBSdW5uYWJsZSB9IGZyb20gXCIuL3J1bm5hYmxlL2luZGV4LmpzXCI7XG4vKipcbiAqIEFic3RyYWN0IGJhc2UgY2xhc3MgZm9yIGEgRG9jdW1lbnQgcmV0cmlldmFsIHN5c3RlbS4gQSByZXRyaWV2YWwgc3lzdGVtXG4gKiBpcyBkZWZpbmVkIGFzIHNvbWV0aGluZyB0aGF0IGNhbiB0YWtlIHN0cmluZyBxdWVyaWVzIGFuZCByZXR1cm4gdGhlXG4gKiBtb3N0ICdyZWxldmFudCcgRG9jdW1lbnRzIGZyb20gc29tZSBzb3VyY2UuXG4gKi9cbmV4cG9ydCBjbGFzcyBCYXNlUmV0cmlldmVyIGV4dGVuZHMgUnVubmFibGUge1xuICAgIGNvbnN0cnVjdG9yKGZpZWxkcykge1xuICAgICAgICBzdXBlcihmaWVsZHMpO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJjYWxsYmFja3NcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwidGFnc1wiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJtZXRhZGF0YVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJ2ZXJib3NlXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuY2FsbGJhY2tzID0gZmllbGRzPy5jYWxsYmFja3M7XG4gICAgICAgIHRoaXMudGFncyA9IGZpZWxkcz8udGFncyA/PyBbXTtcbiAgICAgICAgdGhpcy5tZXRhZGF0YSA9IGZpZWxkcz8ubWV0YWRhdGEgPz8ge307XG4gICAgICAgIHRoaXMudmVyYm9zZSA9IGZpZWxkcz8udmVyYm9zZSA/PyBmYWxzZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVE9ETzogVGhpcyBzaG91bGQgYmUgYW4gYWJzdHJhY3QgbWV0aG9kLCBidXQgd2UnZCBsaWtlIHRvIGF2b2lkIGJyZWFraW5nXG4gICAgICogY2hhbmdlcyB0byBwZW9wbGUgY3VycmVudGx5IHVzaW5nIHN1YmNsYXNzZWQgY3VzdG9tIHJldHJpZXZlcnMuXG4gICAgICogQ2hhbmdlIGl0IG9uIG5leHQgbWFqb3IgcmVsZWFzZS5cbiAgICAgKi9cbiAgICBfZ2V0UmVsZXZhbnREb2N1bWVudHMoX3F1ZXJ5LCBfY2FsbGJhY2tzKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vdCBpbXBsZW1lbnRlZCFcIik7XG4gICAgfVxuICAgIGFzeW5jIGludm9rZShpbnB1dCwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRSZWxldmFudERvY3VtZW50cyhpbnB1dCwgb3B0aW9ucyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE1haW4gbWV0aG9kIHVzZWQgdG8gcmV0cmlldmUgcmVsZXZhbnQgZG9jdW1lbnRzLiBJdCB0YWtlcyBhIHF1ZXJ5XG4gICAgICogc3RyaW5nIGFuZCBhbiBvcHRpb25hbCBjb25maWd1cmF0aW9uIG9iamVjdCwgYW5kIHJldHVybnMgYSBwcm9taXNlIHRoYXRcbiAgICAgKiByZXNvbHZlcyB0byBhbiBhcnJheSBvZiBgRG9jdW1lbnRgIG9iamVjdHMuIFRoaXMgbWV0aG9kIGhhbmRsZXMgdGhlXG4gICAgICogcmV0cmlldmFsIHByb2Nlc3MsIGluY2x1ZGluZyBzdGFydGluZyBhbmQgZW5kaW5nIGNhbGxiYWNrcywgYW5kIGVycm9yXG4gICAgICogaGFuZGxpbmcuXG4gICAgICogQHBhcmFtIHF1ZXJ5IFRoZSBxdWVyeSBzdHJpbmcgdG8gcmV0cmlldmUgcmVsZXZhbnQgZG9jdW1lbnRzIGZvci5cbiAgICAgKiBAcGFyYW0gY29uZmlnIE9wdGlvbmFsIGNvbmZpZ3VyYXRpb24gb2JqZWN0IGZvciB0aGUgcmV0cmlldmFsIHByb2Nlc3MuXG4gICAgICogQHJldHVybnMgQSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gYW4gYXJyYXkgb2YgYERvY3VtZW50YCBvYmplY3RzLlxuICAgICAqL1xuICAgIGFzeW5jIGdldFJlbGV2YW50RG9jdW1lbnRzKHF1ZXJ5LCBjb25maWcpIHtcbiAgICAgICAgY29uc3QgcGFyc2VkQ29uZmlnID0gcGFyc2VDYWxsYmFja0NvbmZpZ0FyZyhjb25maWcpO1xuICAgICAgICBjb25zdCBjYWxsYmFja01hbmFnZXJfID0gYXdhaXQgQ2FsbGJhY2tNYW5hZ2VyLmNvbmZpZ3VyZShwYXJzZWRDb25maWcuY2FsbGJhY2tzLCB0aGlzLmNhbGxiYWNrcywgcGFyc2VkQ29uZmlnLnRhZ3MsIHRoaXMudGFncywgcGFyc2VkQ29uZmlnLm1ldGFkYXRhLCB0aGlzLm1ldGFkYXRhLCB7IHZlcmJvc2U6IHRoaXMudmVyYm9zZSB9KTtcbiAgICAgICAgY29uc3QgcnVuTWFuYWdlciA9IGF3YWl0IGNhbGxiYWNrTWFuYWdlcl8/LmhhbmRsZVJldHJpZXZlclN0YXJ0KHRoaXMudG9KU09OKCksIHF1ZXJ5KTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdHMgPSBhd2FpdCB0aGlzLl9nZXRSZWxldmFudERvY3VtZW50cyhxdWVyeSwgcnVuTWFuYWdlcik7XG4gICAgICAgICAgICBhd2FpdCBydW5NYW5hZ2VyPy5oYW5kbGVSZXRyaWV2ZXJFbmQocmVzdWx0cyk7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0cztcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGF3YWl0IHJ1bk1hbmFnZXI/LmhhbmRsZVJldHJpZXZlckVycm9yKGVycm9yKTtcbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbIkNhbGxiYWNrTWFuYWdlciIsInBhcnNlQ2FsbGJhY2tDb25maWdBcmciLCJSdW5uYWJsZSIsIkJhc2VSZXRyaWV2ZXIiLCJjb25zdHJ1Y3RvciIsImZpZWxkcyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwidmFsdWUiLCJjYWxsYmFja3MiLCJ0YWdzIiwibWV0YWRhdGEiLCJ2ZXJib3NlIiwiX2dldFJlbGV2YW50RG9jdW1lbnRzIiwiX3F1ZXJ5IiwiX2NhbGxiYWNrcyIsIkVycm9yIiwiaW52b2tlIiwiaW5wdXQiLCJvcHRpb25zIiwiZ2V0UmVsZXZhbnREb2N1bWVudHMiLCJxdWVyeSIsImNvbmZpZyIsInBhcnNlZENvbmZpZyIsImNhbGxiYWNrTWFuYWdlcl8iLCJjb25maWd1cmUiLCJydW5NYW5hZ2VyIiwiaGFuZGxlUmV0cmlldmVyU3RhcnQiLCJ0b0pTT04iLCJyZXN1bHRzIiwiaGFuZGxlUmV0cmlldmVyRW5kIiwiZXJyb3IiLCJoYW5kbGVSZXRyaWV2ZXJFcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/schema/retriever.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/schema/runnable/base.js":
/*!*************************************************************!*\
  !*** ./node_modules/langchain/dist/schema/runnable/base.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Runnable: () => (/* binding */ Runnable),\n/* harmony export */   RunnableBinding: () => (/* binding */ RunnableBinding),\n/* harmony export */   RunnableEach: () => (/* binding */ RunnableEach),\n/* harmony export */   RunnableLambda: () => (/* binding */ RunnableLambda),\n/* harmony export */   RunnableMap: () => (/* binding */ RunnableMap),\n/* harmony export */   RunnableRetry: () => (/* binding */ RunnableRetry),\n/* harmony export */   RunnableSequence: () => (/* binding */ RunnableSequence),\n/* harmony export */   RunnableWithFallbacks: () => (/* binding */ RunnableWithFallbacks),\n/* harmony export */   _coerceToRunnable: () => (/* binding */ _coerceToRunnable)\n/* harmony export */ });\n/* harmony import */ var p_retry__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! p-retry */ \"(rsc)/./node_modules/p-retry/index.js\");\n/* harmony import */ var _callbacks_manager_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../callbacks/manager.js */ \"(rsc)/./node_modules/langchain/dist/callbacks/manager.js\");\n/* harmony import */ var _load_serializable_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../load/serializable.js */ \"(rsc)/./node_modules/langchain/dist/load/serializable.js\");\n/* harmony import */ var _util_stream_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../util/stream.js */ \"(rsc)/./node_modules/langchain/dist/util/stream.js\");\n/* harmony import */ var _config_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./config.js */ \"(rsc)/./node_modules/langchain/dist/schema/runnable/config.js\");\n/* harmony import */ var _util_async_caller_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../util/async_caller.js */ \"(rsc)/./node_modules/langchain/dist/util/async_caller.js\");\n\n\n\n\n\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _coerceToDict(value, defaultKey) {\n    return value && !Array.isArray(value) && typeof value === \"object\" ? value : {\n        [defaultKey]: value\n    };\n}\n/**\n * A Runnable is a generic unit of work that can be invoked, batched, streamed, and/or\n * transformed.\n */ class Runnable extends _load_serializable_js__WEBPACK_IMPORTED_MODULE_2__.Serializable {\n    constructor(){\n        super(...arguments);\n        Object.defineProperty(this, \"lc_runnable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n    }\n    /**\n     * Bind arguments to a Runnable, returning a new Runnable.\n     * @param kwargs\n     * @returns A new RunnableBinding that, when invoked, will apply the bound args.\n     */ bind(kwargs) {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        return new RunnableBinding({\n            bound: this,\n            kwargs,\n            config: {}\n        });\n    }\n    /**\n     * Return a new Runnable that maps a list of inputs to a list of outputs,\n     * by calling invoke() with each input.\n     */ map() {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        return new RunnableEach({\n            bound: this\n        });\n    }\n    /**\n     * Add retry logic to an existing runnable.\n     * @param kwargs\n     * @returns A new RunnableRetry that, when invoked, will retry according to the parameters.\n     */ withRetry(fields) {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        return new RunnableRetry({\n            bound: this,\n            kwargs: {},\n            config: {},\n            maxAttemptNumber: fields?.stopAfterAttempt,\n            ...fields\n        });\n    }\n    /**\n     * Bind config to a Runnable, returning a new Runnable.\n     * @param config New configuration parameters to attach to the new runnable.\n     * @returns A new RunnableBinding with a config matching what's passed.\n     */ withConfig(config) {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        return new RunnableBinding({\n            bound: this,\n            config,\n            kwargs: {}\n        });\n    }\n    /**\n     * Create a new runnable from the current one that will try invoking\n     * other passed fallback runnables if the initial invocation fails.\n     * @param fields.fallbacks Other runnables to call if the runnable errors.\n     * @returns A new RunnableWithFallbacks.\n     */ withFallbacks(fields) {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        return new RunnableWithFallbacks({\n            runnable: this,\n            fallbacks: fields.fallbacks\n        });\n    }\n    _getOptionsList(options, length = 0) {\n        if (Array.isArray(options)) {\n            if (options.length !== length) {\n                throw new Error(`Passed \"options\" must be an array with the same length as the inputs, but got ${options.length} options for ${length} inputs`);\n            }\n            return options;\n        }\n        return Array.from({\n            length\n        }, ()=>options);\n    }\n    async batch(inputs, options, batchOptions) {\n        const configList = this._getOptionsList(options ?? {}, inputs.length);\n        const caller = new _util_async_caller_js__WEBPACK_IMPORTED_MODULE_5__.AsyncCaller({\n            maxConcurrency: batchOptions?.maxConcurrency,\n            onFailedAttempt: (e)=>{\n                throw e;\n            }\n        });\n        const batchCalls = inputs.map((input, i)=>caller.call(async ()=>{\n                try {\n                    const result = await this.invoke(input, configList[i]);\n                    return result;\n                } catch (e) {\n                    if (batchOptions?.returnExceptions) {\n                        return e;\n                    }\n                    throw e;\n                }\n            }));\n        return Promise.all(batchCalls);\n    }\n    /**\n     * Default streaming implementation.\n     * Subclasses should override this method if they support streaming output.\n     * @param input\n     * @param options\n     */ async *_streamIterator(input, options) {\n        yield this.invoke(input, options);\n    }\n    /**\n     * Stream output in chunks.\n     * @param input\n     * @param options\n     * @returns A readable stream that is also an iterable.\n     */ async stream(input, options) {\n        return _util_stream_js__WEBPACK_IMPORTED_MODULE_3__.IterableReadableStream.fromAsyncGenerator(this._streamIterator(input, options));\n    }\n    _separateRunnableConfigFromCallOptions(options = {}) {\n        const runnableConfig = {\n            callbacks: options.callbacks,\n            tags: options.tags,\n            metadata: options.metadata\n        };\n        const callOptions = {\n            ...options\n        };\n        delete callOptions.callbacks;\n        delete callOptions.tags;\n        delete callOptions.metadata;\n        return [\n            runnableConfig,\n            callOptions\n        ];\n    }\n    async _callWithConfig(func, input, options) {\n        const callbackManager_ = await (0,_config_js__WEBPACK_IMPORTED_MODULE_4__.getCallbackMangerForConfig)(options);\n        const runManager = await callbackManager_?.handleChainStart(this.toJSON(), _coerceToDict(input, \"input\"), undefined, options?.runType);\n        let output;\n        try {\n            output = await func.bind(this)(input, options, runManager);\n        } catch (e) {\n            await runManager?.handleChainError(e);\n            throw e;\n        }\n        await runManager?.handleChainEnd(_coerceToDict(output, \"output\"));\n        return output;\n    }\n    /**\n     * Internal method that handles batching and configuration for a runnable\n     * It takes a function, input values, and optional configuration, and\n     * returns a promise that resolves to the output values.\n     * @param func The function to be executed for each input value.\n     * @param input The input values to be processed.\n     * @param config Optional configuration for the function execution.\n     * @returns A promise that resolves to the output values.\n     */ async _batchWithConfig(func, inputs, options, batchOptions) {\n        const configs = this._getOptionsList(options ?? {}, inputs.length);\n        const callbackManagers = await Promise.all(configs.map(_config_js__WEBPACK_IMPORTED_MODULE_4__.getCallbackMangerForConfig));\n        const runManagers = await Promise.all(callbackManagers.map((callbackManager, i)=>callbackManager?.handleChainStart(this.toJSON(), _coerceToDict(inputs[i], \"input\"))));\n        let outputs;\n        try {\n            outputs = await func(inputs, configs, runManagers, batchOptions);\n        } catch (e) {\n            await Promise.all(runManagers.map((runManager)=>runManager?.handleChainError(e)));\n            throw e;\n        }\n        await Promise.all(runManagers.map((runManager)=>runManager?.handleChainEnd(_coerceToDict(outputs, \"output\"))));\n        return outputs;\n    }\n    /**\n     * Helper method to transform an Iterator of Input values into an Iterator of\n     * Output values, with callbacks.\n     * Use this to implement `stream()` or `transform()` in Runnable subclasses.\n     */ async *_transformStreamWithConfig(inputGenerator, transformer, options) {\n        let finalInput;\n        let finalInputSupported = true;\n        let finalOutput;\n        let finalOutputSupported = true;\n        const callbackManager_ = await (0,_config_js__WEBPACK_IMPORTED_MODULE_4__.getCallbackMangerForConfig)(options);\n        let runManager;\n        const serializedRepresentation = this.toJSON();\n        async function* wrapInputForTracing() {\n            for await (const chunk of inputGenerator){\n                if (!runManager) {\n                    // Start the run manager AFTER the iterator starts to preserve\n                    // tracing order\n                    runManager = await callbackManager_?.handleChainStart(serializedRepresentation, {\n                        input: \"\"\n                    }, undefined, options?.runType);\n                }\n                if (finalInputSupported) {\n                    if (finalInput === undefined) {\n                        finalInput = chunk;\n                    } else {\n                        try {\n                            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                            finalInput = finalInput.concat(chunk);\n                        } catch  {\n                            finalInput = undefined;\n                            finalInputSupported = false;\n                        }\n                    }\n                }\n                yield chunk;\n            }\n        }\n        const wrappedInputGenerator = wrapInputForTracing();\n        try {\n            const outputIterator = transformer(wrappedInputGenerator, runManager, options);\n            for await (const chunk of outputIterator){\n                yield chunk;\n                if (finalOutputSupported) {\n                    if (finalOutput === undefined) {\n                        finalOutput = chunk;\n                    } else {\n                        try {\n                            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                            finalOutput = finalOutput.concat(chunk);\n                        } catch  {\n                            finalOutput = undefined;\n                            finalOutputSupported = false;\n                        }\n                    }\n                }\n            }\n        } catch (e) {\n            await runManager?.handleChainError(e, undefined, undefined, undefined, {\n                inputs: _coerceToDict(finalInput, \"input\")\n            });\n            throw e;\n        }\n        await runManager?.handleChainEnd(finalOutput ?? {}, undefined, undefined, undefined, {\n            inputs: _coerceToDict(finalInput, \"input\")\n        });\n    }\n    _patchConfig(config = {}, callbackManager = undefined) {\n        return {\n            ...config,\n            callbacks: callbackManager\n        };\n    }\n    /**\n     * Create a new runnable sequence that runs each individual runnable in series,\n     * piping the output of one runnable into another runnable or runnable-like.\n     * @param coerceable A runnable, function, or object whose values are functions or runnables.\n     * @returns A new runnable sequence.\n     */ pipe(coerceable) {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        return new RunnableSequence({\n            first: this,\n            last: _coerceToRunnable(coerceable)\n        });\n    }\n    /**\n     * Default implementation of transform, which buffers input and then calls stream.\n     * Subclasses should override this method if they can start producing output while\n     * input is still being generated.\n     * @param generator\n     * @param options\n     */ async *transform(generator, options) {\n        let finalChunk;\n        for await (const chunk of generator){\n            if (!finalChunk) {\n                finalChunk = chunk;\n            } else {\n                // Make a best effort to gather, for any type that supports concat.\n                // This method should throw an error if gathering fails.\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                finalChunk = finalChunk.concat(chunk);\n            }\n        }\n        yield* this._streamIterator(finalChunk, options);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    static isRunnable(thing) {\n        return thing.lc_runnable;\n    }\n}\n/**\n * A runnable that delegates calls to another runnable with a set of kwargs.\n */ class RunnableBinding extends Runnable {\n    static lc_name() {\n        return \"RunnableBinding\";\n    }\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain\",\n                \"schema\",\n                \"runnable\"\n            ]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"bound\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"config\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"kwargs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.bound = fields.bound;\n        this.kwargs = fields.kwargs;\n        this.config = fields.config;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    _mergeConfig(options) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const copy = {\n            ...this.config\n        };\n        if (options) {\n            for (const key of Object.keys(options)){\n                if (key === \"metadata\") {\n                    copy[key] = {\n                        ...copy[key],\n                        ...options[key]\n                    };\n                } else if (key === \"tags\") {\n                    copy[key] = (copy[key] ?? []).concat(options[key] ?? []);\n                } else {\n                    copy[key] = options[key] ?? copy[key];\n                }\n            }\n        }\n        return copy;\n    }\n    bind(kwargs) {\n        return this.constructor({\n            bound: this.bound,\n            kwargs: {\n                ...this.kwargs,\n                ...kwargs\n            },\n            config: this.config\n        });\n    }\n    withConfig(config) {\n        return this.constructor({\n            bound: this.bound,\n            kwargs: this.kwargs,\n            config: {\n                ...this.config,\n                ...config\n            }\n        });\n    }\n    withRetry(fields) {\n        return this.constructor({\n            bound: this.bound.withRetry(fields),\n            kwargs: this.kwargs,\n            config: this.config\n        });\n    }\n    async invoke(input, options) {\n        return this.bound.invoke(input, this._mergeConfig({\n            ...options,\n            ...this.kwargs\n        }));\n    }\n    async batch(inputs, options, batchOptions) {\n        const mergedOptions = Array.isArray(options) ? options.map((individualOption)=>this._mergeConfig({\n                ...individualOption,\n                ...this.kwargs\n            })) : this._mergeConfig({\n            ...options,\n            ...this.kwargs\n        });\n        return this.bound.batch(inputs, mergedOptions, batchOptions);\n    }\n    async *_streamIterator(input, options) {\n        yield* this.bound._streamIterator(input, this._mergeConfig({\n            ...options,\n            ...this.kwargs\n        }));\n    }\n    async stream(input, options) {\n        return this.bound.stream(input, this._mergeConfig({\n            ...options,\n            ...this.kwargs\n        }));\n    }\n    async *transform(// eslint-disable-next-line @typescript-eslint/no-explicit-any\n    generator, options) {\n        yield* this.bound.transform(generator, this._mergeConfig({\n            ...options,\n            ...this.kwargs\n        }));\n    }\n    static isRunnableBinding(// eslint-disable-next-line @typescript-eslint/no-explicit-any\n    thing) {\n        return thing.bound && Runnable.isRunnable(thing.bound);\n    }\n}\n/**\n * A runnable that delegates calls to another runnable\n * with each element of the input sequence.\n */ class RunnableEach extends Runnable {\n    static lc_name() {\n        return \"RunnableEach\";\n    }\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain\",\n                \"schema\",\n                \"runnable\"\n            ]\n        });\n        Object.defineProperty(this, \"bound\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.bound = fields.bound;\n    }\n    /**\n     * Binds the runnable with the specified arguments.\n     * @param args The arguments to bind the runnable with.\n     * @returns A new instance of the `RunnableEach` class that is bound with the specified arguments.\n     */ bind(kwargs) {\n        return new RunnableEach({\n            bound: this.bound.bind(kwargs)\n        });\n    }\n    /**\n     * Invokes the runnable with the specified input and configuration.\n     * @param input The input to invoke the runnable with.\n     * @param config The configuration to invoke the runnable with.\n     * @returns A promise that resolves to the output of the runnable.\n     */ async invoke(inputs, config) {\n        return this._callWithConfig(this._invoke, inputs, config);\n    }\n    /**\n     * A helper method that is used to invoke the runnable with the specified input and configuration.\n     * @param input The input to invoke the runnable with.\n     * @param config The configuration to invoke the runnable with.\n     * @returns A promise that resolves to the output of the runnable.\n     */ async _invoke(inputs, config, runManager) {\n        return this.bound.batch(inputs, this._patchConfig(config, runManager?.getChild()));\n    }\n}\n/**\n * Base class for runnables that can be retried a\n * specified number of times.\n */ class RunnableRetry extends RunnableBinding {\n    static lc_name() {\n        return \"RunnableRetry\";\n    }\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain\",\n                \"schema\",\n                \"runnable\"\n            ]\n        });\n        Object.defineProperty(this, \"maxAttemptNumber\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 3\n        });\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        Object.defineProperty(this, \"onFailedAttempt\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: ()=>{}\n        });\n        this.maxAttemptNumber = fields.maxAttemptNumber ?? this.maxAttemptNumber;\n        this.onFailedAttempt = fields.onFailedAttempt ?? this.onFailedAttempt;\n    }\n    _patchConfigForRetry(attempt, config, runManager) {\n        const tag = attempt > 1 ? `retry:attempt:${attempt}` : undefined;\n        return this._patchConfig(config, runManager?.getChild(tag));\n    }\n    async _invoke(input, config, runManager) {\n        return p_retry__WEBPACK_IMPORTED_MODULE_0__((attemptNumber)=>super.invoke(input, this._patchConfigForRetry(attemptNumber, config, runManager)), {\n            onFailedAttempt: this.onFailedAttempt,\n            retries: Math.max(this.maxAttemptNumber - 1, 0),\n            randomize: true\n        });\n    }\n    /**\n     * Method that invokes the runnable with the specified input, run manager,\n     * and config. It handles the retry logic by catching any errors and\n     * recursively invoking itself with the updated config for the next retry\n     * attempt.\n     * @param input The input for the runnable.\n     * @param runManager The run manager for the runnable.\n     * @param config The config for the runnable.\n     * @returns A promise that resolves to the output of the runnable.\n     */ async invoke(input, config) {\n        return this._callWithConfig(this._invoke, input, config);\n    }\n    async _batch(inputs, configs, runManagers, batchOptions) {\n        const resultsMap = {};\n        try {\n            await p_retry__WEBPACK_IMPORTED_MODULE_0__(async (attemptNumber)=>{\n                const remainingIndexes = inputs.map((_, i)=>i).filter((i)=>resultsMap[i.toString()] === undefined || // eslint-disable-next-line no-instanceof/no-instanceof\n                    resultsMap[i.toString()] instanceof Error);\n                const remainingInputs = remainingIndexes.map((i)=>inputs[i]);\n                const patchedConfigs = remainingIndexes.map((i)=>this._patchConfigForRetry(attemptNumber, configs?.[i], runManagers?.[i]));\n                const results = await super.batch(remainingInputs, patchedConfigs, {\n                    ...batchOptions,\n                    returnExceptions: true\n                });\n                let firstException;\n                for(let i = 0; i < results.length; i += 1){\n                    const result = results[i];\n                    const resultMapIndex = remainingIndexes[i];\n                    // eslint-disable-next-line no-instanceof/no-instanceof\n                    if (result instanceof Error) {\n                        if (firstException === undefined) {\n                            firstException = result;\n                        }\n                    }\n                    resultsMap[resultMapIndex.toString()] = result;\n                }\n                if (firstException) {\n                    throw firstException;\n                }\n                return results;\n            }, {\n                onFailedAttempt: this.onFailedAttempt,\n                retries: Math.max(this.maxAttemptNumber - 1, 0),\n                randomize: true\n            });\n        } catch (e) {\n            if (batchOptions?.returnExceptions !== true) {\n                throw e;\n            }\n        }\n        return Object.keys(resultsMap).sort((a, b)=>parseInt(a, 10) - parseInt(b, 10)).map((key)=>resultsMap[parseInt(key, 10)]);\n    }\n    async batch(inputs, options, batchOptions) {\n        return this._batchWithConfig(this._batch.bind(this), inputs, options, batchOptions);\n    }\n}\n/**\n * A sequence of runnables, where the output of each is the input of the next.\n */ class RunnableSequence extends Runnable {\n    static lc_name() {\n        return \"RunnableSequence\";\n    }\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"first\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"middle\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        Object.defineProperty(this, \"last\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain\",\n                \"schema\",\n                \"runnable\"\n            ]\n        });\n        this.first = fields.first;\n        this.middle = fields.middle ?? this.middle;\n        this.last = fields.last;\n    }\n    get steps() {\n        return [\n            this.first,\n            ...this.middle,\n            this.last\n        ];\n    }\n    async invoke(input, options) {\n        const callbackManager_ = await (0,_config_js__WEBPACK_IMPORTED_MODULE_4__.getCallbackMangerForConfig)(options);\n        const runManager = await callbackManager_?.handleChainStart(this.toJSON(), _coerceToDict(input, \"input\"));\n        let nextStepInput = input;\n        let finalOutput;\n        try {\n            const initialSteps = [\n                this.first,\n                ...this.middle\n            ];\n            for(let i = 0; i < initialSteps.length; i += 1){\n                const step = initialSteps[i];\n                nextStepInput = await step.invoke(nextStepInput, this._patchConfig(options, runManager?.getChild(`seq:step:${i + 1}`)));\n            }\n            // TypeScript can't detect that the last output of the sequence returns RunOutput, so call it out of the loop here\n            finalOutput = await this.last.invoke(nextStepInput, this._patchConfig(options, runManager?.getChild(`seq:step:${this.steps.length}`)));\n        } catch (e) {\n            await runManager?.handleChainError(e);\n            throw e;\n        }\n        await runManager?.handleChainEnd(_coerceToDict(finalOutput, \"output\"));\n        return finalOutput;\n    }\n    async batch(inputs, options, batchOptions) {\n        const configList = this._getOptionsList(options ?? {}, inputs.length);\n        const callbackManagers = await Promise.all(configList.map(_config_js__WEBPACK_IMPORTED_MODULE_4__.getCallbackMangerForConfig));\n        const runManagers = await Promise.all(callbackManagers.map((callbackManager, i)=>callbackManager?.handleChainStart(this.toJSON(), _coerceToDict(inputs[i], \"input\"))));\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        let nextStepInputs = inputs;\n        let finalOutputs;\n        try {\n            const initialSteps = [\n                this.first,\n                ...this.middle\n            ];\n            for(let i = 0; i < initialSteps.length; i += 1){\n                const step = initialSteps[i];\n                nextStepInputs = await step.batch(nextStepInputs, runManagers.map((runManager, j)=>this._patchConfig(configList[j], runManager?.getChild(`seq:step:${i + 1}`))), batchOptions);\n            }\n            finalOutputs = await this.last.batch(nextStepInputs, runManagers.map((runManager)=>this._patchConfig(configList[this.steps.length - 1], runManager?.getChild(`seq:step:${this.steps.length}`))), batchOptions);\n        } catch (e) {\n            await Promise.all(runManagers.map((runManager)=>runManager?.handleChainError(e)));\n            throw e;\n        }\n        await Promise.all(runManagers.map((runManager, i)=>runManager?.handleChainEnd(_coerceToDict(finalOutputs[i], \"output\"))));\n        return finalOutputs;\n    }\n    async *_streamIterator(input, options) {\n        const callbackManager_ = await (0,_config_js__WEBPACK_IMPORTED_MODULE_4__.getCallbackMangerForConfig)(options);\n        const runManager = await callbackManager_?.handleChainStart(this.toJSON(), _coerceToDict(input, \"input\"));\n        let nextStepInput = input;\n        const steps = [\n            this.first,\n            ...this.middle,\n            this.last\n        ];\n        // Find the index of the last runnable in the sequence that doesn't have an overridden .transform() method\n        // and start streaming from there\n        const streamingStartStepIndex = Math.min(steps.length - 1, steps.length - [\n            ...steps\n        ].reverse().findIndex((step)=>{\n            const isDefaultImplementation = step.transform === Runnable.prototype.transform;\n            const boundRunnableIsDefaultImplementation = RunnableBinding.isRunnableBinding(step) && step.bound?.transform === Runnable.prototype.transform;\n            return isDefaultImplementation || boundRunnableIsDefaultImplementation;\n        }) - 1);\n        try {\n            const invokeSteps = steps.slice(0, streamingStartStepIndex);\n            for(let i = 0; i < invokeSteps.length; i += 1){\n                const step = invokeSteps[i];\n                nextStepInput = await step.invoke(nextStepInput, this._patchConfig(options, runManager?.getChild(`seq:step:${i + 1}`)));\n            }\n        } catch (e) {\n            await runManager?.handleChainError(e);\n            throw e;\n        }\n        let concatSupported = true;\n        let finalOutput;\n        try {\n            let finalGenerator = await steps[streamingStartStepIndex]._streamIterator(nextStepInput, this._patchConfig(options, runManager?.getChild(`seq:step:${streamingStartStepIndex + 1}`)));\n            const finalSteps = steps.slice(streamingStartStepIndex + 1);\n            for(let i = 0; i < finalSteps.length; i += 1){\n                const step = finalSteps[i];\n                finalGenerator = await step.transform(finalGenerator, this._patchConfig(options, runManager?.getChild(`seq:step:${streamingStartStepIndex + i + 2}`)));\n            }\n            for await (const chunk of finalGenerator){\n                yield chunk;\n                if (concatSupported) {\n                    if (finalOutput === undefined) {\n                        finalOutput = chunk;\n                    } else {\n                        try {\n                            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                            finalOutput = finalOutput.concat(chunk);\n                        } catch (e) {\n                            finalOutput = undefined;\n                            concatSupported = false;\n                        }\n                    }\n                }\n            }\n        } catch (e) {\n            await runManager?.handleChainError(e);\n            throw e;\n        }\n        await runManager?.handleChainEnd(_coerceToDict(finalOutput, \"output\"));\n    }\n    pipe(coerceable) {\n        if (RunnableSequence.isRunnableSequence(coerceable)) {\n            return new RunnableSequence({\n                first: this.first,\n                middle: this.middle.concat([\n                    this.last,\n                    coerceable.first,\n                    ...coerceable.middle\n                ]),\n                last: coerceable.last\n            });\n        } else {\n            return new RunnableSequence({\n                first: this.first,\n                middle: [\n                    ...this.middle,\n                    this.last\n                ],\n                last: _coerceToRunnable(coerceable)\n            });\n        }\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    static isRunnableSequence(thing) {\n        return Array.isArray(thing.middle) && Runnable.isRunnable(thing);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    static from([first, ...runnables]) {\n        return new RunnableSequence({\n            first: _coerceToRunnable(first),\n            middle: runnables.slice(0, -1).map(_coerceToRunnable),\n            last: _coerceToRunnable(runnables[runnables.length - 1])\n        });\n    }\n}\n/**\n * A runnable that runs a mapping of runnables in parallel,\n * and returns a mapping of their outputs.\n */ class RunnableMap extends Runnable {\n    static lc_name() {\n        return \"RunnableMap\";\n    }\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain\",\n                \"schema\",\n                \"runnable\"\n            ]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"steps\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.steps = {};\n        for (const [key, value] of Object.entries(fields.steps)){\n            this.steps[key] = _coerceToRunnable(value);\n        }\n    }\n    async invoke(input, options) {\n        const callbackManager_ = await (0,_config_js__WEBPACK_IMPORTED_MODULE_4__.getCallbackMangerForConfig)(options);\n        const runManager = await callbackManager_?.handleChainStart(this.toJSON(), {\n            input\n        });\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const output = {};\n        try {\n            for (const [key, runnable] of Object.entries(this.steps)){\n                const result = await runnable.invoke(input, this._patchConfig(options, runManager?.getChild()));\n                output[key] = result;\n            }\n        } catch (e) {\n            await runManager?.handleChainError(e);\n            throw e;\n        }\n        await runManager?.handleChainEnd(output);\n        return output;\n    }\n}\n/**\n * A runnable that runs a callable.\n */ class RunnableLambda extends Runnable {\n    static lc_name() {\n        return \"RunnableLambda\";\n    }\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain\",\n                \"schema\",\n                \"runnable\"\n            ]\n        });\n        Object.defineProperty(this, \"func\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.func = fields.func;\n    }\n    async _invoke(input, config, runManager) {\n        let output = await this.func(input);\n        if (output && Runnable.isRunnable(output)) {\n            output = await output.invoke(input, this._patchConfig(config, runManager?.getChild()));\n        }\n        return output;\n    }\n    async invoke(input, options) {\n        return this._callWithConfig(this._invoke, input, options);\n    }\n}\n/**\n * A Runnable that can fallback to other Runnables if it fails.\n */ class RunnableWithFallbacks extends Runnable {\n    static lc_name() {\n        return \"RunnableWithFallbacks\";\n    }\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain\",\n                \"schema\",\n                \"runnable\"\n            ]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"runnable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"fallbacks\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.runnable = fields.runnable;\n        this.fallbacks = fields.fallbacks;\n    }\n    *runnables() {\n        yield this.runnable;\n        for (const fallback of this.fallbacks){\n            yield fallback;\n        }\n    }\n    async invoke(input, options) {\n        const callbackManager_ = await _callbacks_manager_js__WEBPACK_IMPORTED_MODULE_1__.CallbackManager.configure(options?.callbacks, undefined, options?.tags, undefined, options?.metadata);\n        const runManager = await callbackManager_?.handleChainStart(this.toJSON(), _coerceToDict(input, \"input\"));\n        let firstError;\n        for (const runnable of this.runnables()){\n            try {\n                const output = await runnable.invoke(input, this._patchConfig(options, runManager?.getChild()));\n                await runManager?.handleChainEnd(_coerceToDict(output, \"output\"));\n                return output;\n            } catch (e) {\n                if (firstError === undefined) {\n                    firstError = e;\n                }\n            }\n        }\n        if (firstError === undefined) {\n            throw new Error(\"No error stored at end of fallback.\");\n        }\n        await runManager?.handleChainError(firstError);\n        throw firstError;\n    }\n    async batch(inputs, options, batchOptions) {\n        if (batchOptions?.returnExceptions) {\n            throw new Error(\"Not implemented.\");\n        }\n        const configList = this._getOptionsList(options ?? {}, inputs.length);\n        const callbackManagers = await Promise.all(configList.map((config)=>_callbacks_manager_js__WEBPACK_IMPORTED_MODULE_1__.CallbackManager.configure(config?.callbacks, undefined, config?.tags, undefined, config?.metadata)));\n        const runManagers = await Promise.all(callbackManagers.map((callbackManager, i)=>callbackManager?.handleChainStart(this.toJSON(), _coerceToDict(inputs[i], \"input\"))));\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        let firstError;\n        for (const runnable of this.runnables()){\n            try {\n                const outputs = await runnable.batch(inputs, runManagers.map((runManager, j)=>this._patchConfig(configList[j], runManager?.getChild())), batchOptions);\n                await Promise.all(runManagers.map((runManager, i)=>runManager?.handleChainEnd(_coerceToDict(outputs[i], \"output\"))));\n                return outputs;\n            } catch (e) {\n                if (firstError === undefined) {\n                    firstError = e;\n                }\n            }\n        }\n        if (!firstError) {\n            throw new Error(\"No error stored at end of fallbacks.\");\n        }\n        await Promise.all(runManagers.map((runManager)=>runManager?.handleChainError(firstError)));\n        throw firstError;\n    }\n}\n// TODO: Figure out why the compiler needs help eliminating Error as a RunOutput type\nfunction _coerceToRunnable(coerceable) {\n    if (typeof coerceable === \"function\") {\n        return new RunnableLambda({\n            func: coerceable\n        });\n    } else if (Runnable.isRunnable(coerceable)) {\n        return coerceable;\n    } else if (!Array.isArray(coerceable) && typeof coerceable === \"object\") {\n        const runnables = {};\n        for (const [key, value] of Object.entries(coerceable)){\n            runnables[key] = _coerceToRunnable(value);\n        }\n        return new RunnableMap({\n            steps: runnables\n        });\n    } else {\n        throw new Error(`Expected a Runnable, function or object.\\nInstead got an unsupported type.`);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/schema/runnable/base.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/schema/runnable/branch.js":
/*!***************************************************************!*\
  !*** ./node_modules/langchain/dist/schema/runnable/branch.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RunnableBranch: () => (/* binding */ RunnableBranch)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/langchain/dist/schema/runnable/base.js\");\n\n/**\n * Class that represents a runnable branch. The RunnableBranch is\n * initialized with an array of branches and a default branch. When invoked,\n * it evaluates the condition of each branch in order and executes the\n * corresponding branch if the condition is true. If none of the conditions\n * are true, it executes the default branch.\n */ // eslint-disable-next-line @typescript-eslint/no-explicit-any\nclass RunnableBranch extends _base_js__WEBPACK_IMPORTED_MODULE_0__.Runnable {\n    static lc_name() {\n        return \"RunnableBranch\";\n    }\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain\",\n                \"runnable\",\n                \"branch\"\n            ]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"default\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"branches\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.branches = fields.branches;\n        this.default = fields.default;\n    }\n    /**\n     * Convenience method for instantiating a RunnableBranch from\n     * RunnableLikes (objects, functions, or Runnables).\n     *\n     * Each item in the input except for the last one should be a\n     * tuple with two items. The first is a \"condition\" RunnableLike that\n     * returns \"true\" if the second RunnableLike in the tuple should run.\n     *\n     * The final item in the input should be a RunnableLike that acts as a\n     * default branch if no other branches match.\n     *\n     * @example\n     * ```ts\n     * import { RunnableBranch } from \"langchain/schema/runnable\";\n     *\n     * const branch = RunnableBranch.from([\n     *   [(x: number) => x > 0, (x: number) => x + 1],\n     *   [(x: number) => x < 0, (x: number) => x - 1],\n     *   (x: number) => x\n     * ]);\n     * ```\n     * @param branches An array where the every item except the last is a tuple of [condition, runnable]\n     *   pairs. The last item is a default runnable which is invoked if no other condition matches.\n     * @returns A new RunnableBranch.\n     */ // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    static from(branches) {\n        if (branches.length < 1) {\n            throw new Error(\"RunnableBranch requires at least one branch\");\n        }\n        const branchLikes = branches.slice(0, -1);\n        const coercedBranches = branchLikes.map(([condition, runnable])=>[\n                (0,_base_js__WEBPACK_IMPORTED_MODULE_0__._coerceToRunnable)(condition),\n                (0,_base_js__WEBPACK_IMPORTED_MODULE_0__._coerceToRunnable)(runnable)\n            ]);\n        const defaultBranch = (0,_base_js__WEBPACK_IMPORTED_MODULE_0__._coerceToRunnable)(branches[branches.length - 1]);\n        return new this({\n            branches: coercedBranches,\n            default: defaultBranch\n        });\n    }\n    async _invoke(input, config, runManager) {\n        let result;\n        for(let i = 0; i < this.branches.length; i += 1){\n            const [condition, branchRunnable] = this.branches[i];\n            const conditionValue = await condition.invoke(input, this._patchConfig(config, runManager?.getChild(`condition:${i + 1}`)));\n            if (conditionValue) {\n                result = await branchRunnable.invoke(input, this._patchConfig(config, runManager?.getChild(`branch:${i + 1}`)));\n                break;\n            }\n        }\n        if (!result) {\n            result = await this.default.invoke(input, this._patchConfig(config, runManager?.getChild(\"default\")));\n        }\n        return result;\n    }\n    async invoke(input, config = {}) {\n        return this._callWithConfig(this._invoke, input, config);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/schema/runnable/branch.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/schema/runnable/config.js":
/*!***************************************************************!*\
  !*** ./node_modules/langchain/dist/schema/runnable/config.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getCallbackMangerForConfig: () => (/* binding */ getCallbackMangerForConfig)\n/* harmony export */ });\n/* harmony import */ var _callbacks_manager_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../callbacks/manager.js */ \"(rsc)/./node_modules/langchain/dist/callbacks/manager.js\");\n\nasync function getCallbackMangerForConfig(config) {\n    return _callbacks_manager_js__WEBPACK_IMPORTED_MODULE_0__.CallbackManager.configure(config?.callbacks, undefined, config?.tags, undefined, config?.metadata);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3Qvc2NoZW1hL3J1bm5hYmxlL2NvbmZpZy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUE4RDtBQUN2RCxlQUFlQywyQkFBMkJDLE1BQU07SUFDbkQsT0FBT0Ysa0VBQWVBLENBQUNHLFNBQVMsQ0FBQ0QsUUFBUUUsV0FBV0MsV0FBV0gsUUFBUUksTUFBTUQsV0FBV0gsUUFBUUs7QUFDcEciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9xdWlsbC8uL25vZGVfbW9kdWxlcy9sYW5nY2hhaW4vZGlzdC9zY2hlbWEvcnVubmFibGUvY29uZmlnLmpzP2U4ZGMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2FsbGJhY2tNYW5hZ2VyLCB9IGZyb20gXCIuLi8uLi9jYWxsYmFja3MvbWFuYWdlci5qc1wiO1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldENhbGxiYWNrTWFuZ2VyRm9yQ29uZmlnKGNvbmZpZykge1xuICAgIHJldHVybiBDYWxsYmFja01hbmFnZXIuY29uZmlndXJlKGNvbmZpZz8uY2FsbGJhY2tzLCB1bmRlZmluZWQsIGNvbmZpZz8udGFncywgdW5kZWZpbmVkLCBjb25maWc/Lm1ldGFkYXRhKTtcbn1cbiJdLCJuYW1lcyI6WyJDYWxsYmFja01hbmFnZXIiLCJnZXRDYWxsYmFja01hbmdlckZvckNvbmZpZyIsImNvbmZpZyIsImNvbmZpZ3VyZSIsImNhbGxiYWNrcyIsInVuZGVmaW5lZCIsInRhZ3MiLCJtZXRhZGF0YSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/schema/runnable/config.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/schema/runnable/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/langchain/dist/schema/runnable/index.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RouterRunnable: () => (/* reexport safe */ _router_js__WEBPACK_IMPORTED_MODULE_2__.RouterRunnable),\n/* harmony export */   Runnable: () => (/* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_0__.Runnable),\n/* harmony export */   RunnableBinding: () => (/* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_0__.RunnableBinding),\n/* harmony export */   RunnableBranch: () => (/* reexport safe */ _branch_js__WEBPACK_IMPORTED_MODULE_3__.RunnableBranch),\n/* harmony export */   RunnableEach: () => (/* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_0__.RunnableEach),\n/* harmony export */   RunnableLambda: () => (/* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_0__.RunnableLambda),\n/* harmony export */   RunnableMap: () => (/* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_0__.RunnableMap),\n/* harmony export */   RunnablePassthrough: () => (/* reexport safe */ _passthrough_js__WEBPACK_IMPORTED_MODULE_1__.RunnablePassthrough),\n/* harmony export */   RunnableRetry: () => (/* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_0__.RunnableRetry),\n/* harmony export */   RunnableSequence: () => (/* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_0__.RunnableSequence),\n/* harmony export */   RunnableWithFallbacks: () => (/* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_0__.RunnableWithFallbacks)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/langchain/dist/schema/runnable/base.js\");\n/* harmony import */ var _passthrough_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./passthrough.js */ \"(rsc)/./node_modules/langchain/dist/schema/runnable/passthrough.js\");\n/* harmony import */ var _router_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./router.js */ \"(rsc)/./node_modules/langchain/dist/schema/runnable/router.js\");\n/* harmony import */ var _branch_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./branch.js */ \"(rsc)/./node_modules/langchain/dist/schema/runnable/branch.js\");\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3Qvc2NoZW1hL3J1bm5hYmxlL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUEwSjtBQUNuRztBQUNWO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9xdWlsbC8uL25vZGVfbW9kdWxlcy9sYW5nY2hhaW4vZGlzdC9zY2hlbWEvcnVubmFibGUvaW5kZXguanM/MTIwOSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgeyBSdW5uYWJsZSwgUnVubmFibGVCaW5kaW5nLCBSdW5uYWJsZUVhY2gsIFJ1bm5hYmxlUmV0cnksIFJ1bm5hYmxlU2VxdWVuY2UsIFJ1bm5hYmxlTWFwLCBSdW5uYWJsZUxhbWJkYSwgUnVubmFibGVXaXRoRmFsbGJhY2tzLCB9IGZyb20gXCIuL2Jhc2UuanNcIjtcbmV4cG9ydCB7IFJ1bm5hYmxlUGFzc3Rocm91Z2ggfSBmcm9tIFwiLi9wYXNzdGhyb3VnaC5qc1wiO1xuZXhwb3J0IHsgUm91dGVyUnVubmFibGUgfSBmcm9tIFwiLi9yb3V0ZXIuanNcIjtcbmV4cG9ydCB7IFJ1bm5hYmxlQnJhbmNoIH0gZnJvbSBcIi4vYnJhbmNoLmpzXCI7XG4iXSwibmFtZXMiOlsiUnVubmFibGUiLCJSdW5uYWJsZUJpbmRpbmciLCJSdW5uYWJsZUVhY2giLCJSdW5uYWJsZVJldHJ5IiwiUnVubmFibGVTZXF1ZW5jZSIsIlJ1bm5hYmxlTWFwIiwiUnVubmFibGVMYW1iZGEiLCJSdW5uYWJsZVdpdGhGYWxsYmFja3MiLCJSdW5uYWJsZVBhc3N0aHJvdWdoIiwiUm91dGVyUnVubmFibGUiLCJSdW5uYWJsZUJyYW5jaCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/schema/runnable/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/schema/runnable/passthrough.js":
/*!********************************************************************!*\
  !*** ./node_modules/langchain/dist/schema/runnable/passthrough.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RunnablePassthrough: () => (/* binding */ RunnablePassthrough)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/langchain/dist/schema/runnable/base.js\");\n\n/**\n * A runnable that passes through the input.\n */ class RunnablePassthrough extends _base_js__WEBPACK_IMPORTED_MODULE_0__.Runnable {\n    constructor(){\n        super(...arguments);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain\",\n                \"schema\",\n                \"runnable\"\n            ]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n    }\n    static lc_name() {\n        return \"RunnablePassthrough\";\n    }\n    async invoke(input, options) {\n        return this._callWithConfig((input)=>Promise.resolve(input), input, options);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3Qvc2NoZW1hL3J1bm5hYmxlL3Bhc3N0aHJvdWdoLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXFDO0FBQ3JDOztDQUVDLEdBQ00sTUFBTUMsNEJBQTRCRCw4Q0FBUUE7SUFDN0NFLGFBQWM7UUFDVixLQUFLLElBQUlDO1FBQ1RDLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsZ0JBQWdCO1lBQ3hDQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPO2dCQUFDO2dCQUFhO2dCQUFVO2FBQVc7UUFDOUM7UUFDQUwsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxtQkFBbUI7WUFDM0NDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU87UUFDWDtJQUNKO0lBQ0EsT0FBT0MsVUFBVTtRQUNiLE9BQU87SUFDWDtJQUNBLE1BQU1DLE9BQU9DLEtBQUssRUFBRUMsT0FBTyxFQUFFO1FBQ3pCLE9BQU8sSUFBSSxDQUFDQyxlQUFlLENBQUMsQ0FBQ0YsUUFBVUcsUUFBUUMsT0FBTyxDQUFDSixRQUFRQSxPQUFPQztJQUMxRTtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcXVpbGwvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3Qvc2NoZW1hL3J1bm5hYmxlL3Bhc3N0aHJvdWdoLmpzP2MyZmMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUnVubmFibGUgfSBmcm9tIFwiLi9iYXNlLmpzXCI7XG4vKipcbiAqIEEgcnVubmFibGUgdGhhdCBwYXNzZXMgdGhyb3VnaCB0aGUgaW5wdXQuXG4gKi9cbmV4cG9ydCBjbGFzcyBSdW5uYWJsZVBhc3N0aHJvdWdoIGV4dGVuZHMgUnVubmFibGUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJsY19uYW1lc3BhY2VcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IFtcImxhbmdjaGFpblwiLCBcInNjaGVtYVwiLCBcInJ1bm5hYmxlXCJdXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJsY19zZXJpYWxpemFibGVcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHN0YXRpYyBsY19uYW1lKCkge1xuICAgICAgICByZXR1cm4gXCJSdW5uYWJsZVBhc3N0aHJvdWdoXCI7XG4gICAgfVxuICAgIGFzeW5jIGludm9rZShpbnB1dCwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2FsbFdpdGhDb25maWcoKGlucHV0KSA9PiBQcm9taXNlLnJlc29sdmUoaW5wdXQpLCBpbnB1dCwgb3B0aW9ucyk7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbIlJ1bm5hYmxlIiwiUnVubmFibGVQYXNzdGhyb3VnaCIsImNvbnN0cnVjdG9yIiwiYXJndW1lbnRzIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJ2YWx1ZSIsImxjX25hbWUiLCJpbnZva2UiLCJpbnB1dCIsIm9wdGlvbnMiLCJfY2FsbFdpdGhDb25maWciLCJQcm9taXNlIiwicmVzb2x2ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/schema/runnable/passthrough.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/schema/runnable/router.js":
/*!***************************************************************!*\
  !*** ./node_modules/langchain/dist/schema/runnable/router.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RouterRunnable: () => (/* binding */ RouterRunnable)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/langchain/dist/schema/runnable/base.js\");\n\n/**\n * A runnable that routes to a set of runnables based on Input['key'].\n * Returns the output of the selected runnable.\n */ class RouterRunnable extends _base_js__WEBPACK_IMPORTED_MODULE_0__.Runnable {\n    static lc_name() {\n        return \"RouterRunnable\";\n    }\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain\",\n                \"schema\",\n                \"runnable\"\n            ]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"runnables\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.runnables = fields.runnables;\n    }\n    async invoke(input, options) {\n        const { key, input: actualInput } = input;\n        const runnable = this.runnables[key];\n        if (runnable === undefined) {\n            throw new Error(`No runnable associated with key \"${key}\".`);\n        }\n        return runnable.invoke(actualInput, options);\n    }\n    async batch(inputs, options, batchOptions) {\n        const keys = inputs.map((input)=>input.key);\n        const actualInputs = inputs.map((input)=>input.input);\n        const missingKey = keys.find((key)=>this.runnables[key] === undefined);\n        if (missingKey !== undefined) {\n            throw new Error(`One or more keys do not have a corresponding runnable.`);\n        }\n        const runnables = keys.map((key)=>this.runnables[key]);\n        const optionsList = this._getOptionsList(options ?? {}, inputs.length);\n        const batchSize = batchOptions?.maxConcurrency && batchOptions.maxConcurrency > 0 ? batchOptions?.maxConcurrency : inputs.length;\n        const batchResults = [];\n        for(let i = 0; i < actualInputs.length; i += batchSize){\n            const batchPromises = actualInputs.slice(i, i + batchSize).map((actualInput, i)=>runnables[i].invoke(actualInput, optionsList[i]));\n            const batchResult = await Promise.all(batchPromises);\n            batchResults.push(batchResult);\n        }\n        return batchResults.flat();\n    }\n    async stream(input, options) {\n        const { key, input: actualInput } = input;\n        const runnable = this.runnables[key];\n        if (runnable === undefined) {\n            throw new Error(`No runnable associated with key \"${key}\".`);\n        }\n        return runnable.stream(actualInput, options);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3Qvc2NoZW1hL3J1bm5hYmxlL3JvdXRlci5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFxQztBQUNyQzs7O0NBR0MsR0FDTSxNQUFNQyx1QkFBdUJELDhDQUFRQTtJQUN4QyxPQUFPRSxVQUFVO1FBQ2IsT0FBTztJQUNYO0lBQ0FDLFlBQVlDLE1BQU0sQ0FBRTtRQUNoQixLQUFLLENBQUNBO1FBQ05DLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsZ0JBQWdCO1lBQ3hDQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPO2dCQUFDO2dCQUFhO2dCQUFVO2FBQVc7UUFDOUM7UUFDQUwsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxtQkFBbUI7WUFDM0NDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU87UUFDWDtRQUNBTCxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLGFBQWE7WUFDckNDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU8sS0FBSztRQUNoQjtRQUNBLElBQUksQ0FBQ0MsU0FBUyxHQUFHUCxPQUFPTyxTQUFTO0lBQ3JDO0lBQ0EsTUFBTUMsT0FBT0MsS0FBSyxFQUFFQyxPQUFPLEVBQUU7UUFDekIsTUFBTSxFQUFFQyxHQUFHLEVBQUVGLE9BQU9HLFdBQVcsRUFBRSxHQUFHSDtRQUNwQyxNQUFNSSxXQUFXLElBQUksQ0FBQ04sU0FBUyxDQUFDSSxJQUFJO1FBQ3BDLElBQUlFLGFBQWFDLFdBQVc7WUFDeEIsTUFBTSxJQUFJQyxNQUFNLENBQUMsaUNBQWlDLEVBQUVKLElBQUksRUFBRSxDQUFDO1FBQy9EO1FBQ0EsT0FBT0UsU0FBU0wsTUFBTSxDQUFDSSxhQUFhRjtJQUN4QztJQUNBLE1BQU1NLE1BQU1DLE1BQU0sRUFBRVAsT0FBTyxFQUFFUSxZQUFZLEVBQUU7UUFDdkMsTUFBTUMsT0FBT0YsT0FBT0csR0FBRyxDQUFDLENBQUNYLFFBQVVBLE1BQU1FLEdBQUc7UUFDNUMsTUFBTVUsZUFBZUosT0FBT0csR0FBRyxDQUFDLENBQUNYLFFBQVVBLE1BQU1BLEtBQUs7UUFDdEQsTUFBTWEsYUFBYUgsS0FBS0ksSUFBSSxDQUFDLENBQUNaLE1BQVEsSUFBSSxDQUFDSixTQUFTLENBQUNJLElBQUksS0FBS0c7UUFDOUQsSUFBSVEsZUFBZVIsV0FBVztZQUMxQixNQUFNLElBQUlDLE1BQU0sQ0FBQyxzREFBc0QsQ0FBQztRQUM1RTtRQUNBLE1BQU1SLFlBQVlZLEtBQUtDLEdBQUcsQ0FBQyxDQUFDVCxNQUFRLElBQUksQ0FBQ0osU0FBUyxDQUFDSSxJQUFJO1FBQ3ZELE1BQU1hLGNBQWMsSUFBSSxDQUFDQyxlQUFlLENBQUNmLFdBQVcsQ0FBQyxHQUFHTyxPQUFPUyxNQUFNO1FBQ3JFLE1BQU1DLFlBQVlULGNBQWNVLGtCQUFrQlYsYUFBYVUsY0FBYyxHQUFHLElBQzFFVixjQUFjVSxpQkFDZFgsT0FBT1MsTUFBTTtRQUNuQixNQUFNRyxlQUFlLEVBQUU7UUFDdkIsSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUlULGFBQWFLLE1BQU0sRUFBRUksS0FBS0gsVUFBVztZQUNyRCxNQUFNSSxnQkFBZ0JWLGFBQ2pCVyxLQUFLLENBQUNGLEdBQUdBLElBQUlILFdBQ2JQLEdBQUcsQ0FBQyxDQUFDUixhQUFha0IsSUFBTXZCLFNBQVMsQ0FBQ3VCLEVBQUUsQ0FBQ3RCLE1BQU0sQ0FBQ0ksYUFBYVksV0FBVyxDQUFDTSxFQUFFO1lBQzVFLE1BQU1HLGNBQWMsTUFBTUMsUUFBUUMsR0FBRyxDQUFDSjtZQUN0Q0YsYUFBYU8sSUFBSSxDQUFDSDtRQUN0QjtRQUNBLE9BQU9KLGFBQWFRLElBQUk7SUFDNUI7SUFDQSxNQUFNQyxPQUFPN0IsS0FBSyxFQUFFQyxPQUFPLEVBQUU7UUFDekIsTUFBTSxFQUFFQyxHQUFHLEVBQUVGLE9BQU9HLFdBQVcsRUFBRSxHQUFHSDtRQUNwQyxNQUFNSSxXQUFXLElBQUksQ0FBQ04sU0FBUyxDQUFDSSxJQUFJO1FBQ3BDLElBQUlFLGFBQWFDLFdBQVc7WUFDeEIsTUFBTSxJQUFJQyxNQUFNLENBQUMsaUNBQWlDLEVBQUVKLElBQUksRUFBRSxDQUFDO1FBQy9EO1FBQ0EsT0FBT0UsU0FBU3lCLE1BQU0sQ0FBQzFCLGFBQWFGO0lBQ3hDO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9xdWlsbC8uL25vZGVfbW9kdWxlcy9sYW5nY2hhaW4vZGlzdC9zY2hlbWEvcnVubmFibGUvcm91dGVyLmpzP2Y1ZmEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUnVubmFibGUgfSBmcm9tIFwiLi9iYXNlLmpzXCI7XG4vKipcbiAqIEEgcnVubmFibGUgdGhhdCByb3V0ZXMgdG8gYSBzZXQgb2YgcnVubmFibGVzIGJhc2VkIG9uIElucHV0WydrZXknXS5cbiAqIFJldHVybnMgdGhlIG91dHB1dCBvZiB0aGUgc2VsZWN0ZWQgcnVubmFibGUuXG4gKi9cbmV4cG9ydCBjbGFzcyBSb3V0ZXJSdW5uYWJsZSBleHRlbmRzIFJ1bm5hYmxlIHtcbiAgICBzdGF0aWMgbGNfbmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIFwiUm91dGVyUnVubmFibGVcIjtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoZmllbGRzKSB7XG4gICAgICAgIHN1cGVyKGZpZWxkcyk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImxjX25hbWVzcGFjZVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogW1wibGFuZ2NoYWluXCIsIFwic2NoZW1hXCIsIFwicnVubmFibGVcIl1cbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImxjX3NlcmlhbGl6YWJsZVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwicnVubmFibGVzXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMucnVubmFibGVzID0gZmllbGRzLnJ1bm5hYmxlcztcbiAgICB9XG4gICAgYXN5bmMgaW52b2tlKGlucHV0LCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHsga2V5LCBpbnB1dDogYWN0dWFsSW5wdXQgfSA9IGlucHV0O1xuICAgICAgICBjb25zdCBydW5uYWJsZSA9IHRoaXMucnVubmFibGVzW2tleV07XG4gICAgICAgIGlmIChydW5uYWJsZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYE5vIHJ1bm5hYmxlIGFzc29jaWF0ZWQgd2l0aCBrZXkgXCIke2tleX1cIi5gKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcnVubmFibGUuaW52b2tlKGFjdHVhbElucHV0LCBvcHRpb25zKTtcbiAgICB9XG4gICAgYXN5bmMgYmF0Y2goaW5wdXRzLCBvcHRpb25zLCBiYXRjaE9wdGlvbnMpIHtcbiAgICAgICAgY29uc3Qga2V5cyA9IGlucHV0cy5tYXAoKGlucHV0KSA9PiBpbnB1dC5rZXkpO1xuICAgICAgICBjb25zdCBhY3R1YWxJbnB1dHMgPSBpbnB1dHMubWFwKChpbnB1dCkgPT4gaW5wdXQuaW5wdXQpO1xuICAgICAgICBjb25zdCBtaXNzaW5nS2V5ID0ga2V5cy5maW5kKChrZXkpID0+IHRoaXMucnVubmFibGVzW2tleV0gPT09IHVuZGVmaW5lZCk7XG4gICAgICAgIGlmIChtaXNzaW5nS2V5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgT25lIG9yIG1vcmUga2V5cyBkbyBub3QgaGF2ZSBhIGNvcnJlc3BvbmRpbmcgcnVubmFibGUuYCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcnVubmFibGVzID0ga2V5cy5tYXAoKGtleSkgPT4gdGhpcy5ydW5uYWJsZXNba2V5XSk7XG4gICAgICAgIGNvbnN0IG9wdGlvbnNMaXN0ID0gdGhpcy5fZ2V0T3B0aW9uc0xpc3Qob3B0aW9ucyA/PyB7fSwgaW5wdXRzLmxlbmd0aCk7XG4gICAgICAgIGNvbnN0IGJhdGNoU2l6ZSA9IGJhdGNoT3B0aW9ucz8ubWF4Q29uY3VycmVuY3kgJiYgYmF0Y2hPcHRpb25zLm1heENvbmN1cnJlbmN5ID4gMFxuICAgICAgICAgICAgPyBiYXRjaE9wdGlvbnM/Lm1heENvbmN1cnJlbmN5XG4gICAgICAgICAgICA6IGlucHV0cy5sZW5ndGg7XG4gICAgICAgIGNvbnN0IGJhdGNoUmVzdWx0cyA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFjdHVhbElucHV0cy5sZW5ndGg7IGkgKz0gYmF0Y2hTaXplKSB7XG4gICAgICAgICAgICBjb25zdCBiYXRjaFByb21pc2VzID0gYWN0dWFsSW5wdXRzXG4gICAgICAgICAgICAgICAgLnNsaWNlKGksIGkgKyBiYXRjaFNpemUpXG4gICAgICAgICAgICAgICAgLm1hcCgoYWN0dWFsSW5wdXQsIGkpID0+IHJ1bm5hYmxlc1tpXS5pbnZva2UoYWN0dWFsSW5wdXQsIG9wdGlvbnNMaXN0W2ldKSk7XG4gICAgICAgICAgICBjb25zdCBiYXRjaFJlc3VsdCA9IGF3YWl0IFByb21pc2UuYWxsKGJhdGNoUHJvbWlzZXMpO1xuICAgICAgICAgICAgYmF0Y2hSZXN1bHRzLnB1c2goYmF0Y2hSZXN1bHQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBiYXRjaFJlc3VsdHMuZmxhdCgpO1xuICAgIH1cbiAgICBhc3luYyBzdHJlYW0oaW5wdXQsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgeyBrZXksIGlucHV0OiBhY3R1YWxJbnB1dCB9ID0gaW5wdXQ7XG4gICAgICAgIGNvbnN0IHJ1bm5hYmxlID0gdGhpcy5ydW5uYWJsZXNba2V5XTtcbiAgICAgICAgaWYgKHJ1bm5hYmxlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgTm8gcnVubmFibGUgYXNzb2NpYXRlZCB3aXRoIGtleSBcIiR7a2V5fVwiLmApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBydW5uYWJsZS5zdHJlYW0oYWN0dWFsSW5wdXQsIG9wdGlvbnMpO1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6WyJSdW5uYWJsZSIsIlJvdXRlclJ1bm5hYmxlIiwibGNfbmFtZSIsImNvbnN0cnVjdG9yIiwiZmllbGRzIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJ2YWx1ZSIsInJ1bm5hYmxlcyIsImludm9rZSIsImlucHV0Iiwib3B0aW9ucyIsImtleSIsImFjdHVhbElucHV0IiwicnVubmFibGUiLCJ1bmRlZmluZWQiLCJFcnJvciIsImJhdGNoIiwiaW5wdXRzIiwiYmF0Y2hPcHRpb25zIiwia2V5cyIsIm1hcCIsImFjdHVhbElucHV0cyIsIm1pc3NpbmdLZXkiLCJmaW5kIiwib3B0aW9uc0xpc3QiLCJfZ2V0T3B0aW9uc0xpc3QiLCJsZW5ndGgiLCJiYXRjaFNpemUiLCJtYXhDb25jdXJyZW5jeSIsImJhdGNoUmVzdWx0cyIsImkiLCJiYXRjaFByb21pc2VzIiwic2xpY2UiLCJiYXRjaFJlc3VsdCIsIlByb21pc2UiLCJhbGwiLCJwdXNoIiwiZmxhdCIsInN0cmVhbSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/schema/runnable/router.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/text_splitter.js":
/*!******************************************************!*\
  !*** ./node_modules/langchain/dist/text_splitter.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CharacterTextSplitter: () => (/* binding */ CharacterTextSplitter),\n/* harmony export */   LatexTextSplitter: () => (/* binding */ LatexTextSplitter),\n/* harmony export */   MarkdownTextSplitter: () => (/* binding */ MarkdownTextSplitter),\n/* harmony export */   RecursiveCharacterTextSplitter: () => (/* binding */ RecursiveCharacterTextSplitter),\n/* harmony export */   SupportedTextSplitterLanguages: () => (/* binding */ SupportedTextSplitterLanguages),\n/* harmony export */   TextSplitter: () => (/* binding */ TextSplitter),\n/* harmony export */   TokenTextSplitter: () => (/* binding */ TokenTextSplitter)\n/* harmony export */ });\n/* harmony import */ var _document_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./document.js */ \"(rsc)/./node_modules/langchain/dist/document.js\");\n/* harmony import */ var _util_tiktoken_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util/tiktoken.js */ \"(rsc)/./node_modules/langchain/dist/util/tiktoken.js\");\n/* harmony import */ var _schema_document_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./schema/document.js */ \"(rsc)/./node_modules/langchain/dist/schema/document.js\");\n\n\n\nclass TextSplitter extends _schema_document_js__WEBPACK_IMPORTED_MODULE_2__.BaseDocumentTransformer {\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain\",\n                \"document_transformers\",\n                \"text_splitters\"\n            ]\n        });\n        Object.defineProperty(this, \"chunkSize\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 1000\n        });\n        Object.defineProperty(this, \"chunkOverlap\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 200\n        });\n        Object.defineProperty(this, \"keepSeparator\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"lengthFunction\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.chunkSize = fields?.chunkSize ?? this.chunkSize;\n        this.chunkOverlap = fields?.chunkOverlap ?? this.chunkOverlap;\n        this.keepSeparator = fields?.keepSeparator ?? this.keepSeparator;\n        this.lengthFunction = fields?.lengthFunction ?? ((text)=>text.length);\n        if (this.chunkOverlap >= this.chunkSize) {\n            throw new Error(\"Cannot have chunkOverlap >= chunkSize\");\n        }\n    }\n    async transformDocuments(documents, chunkHeaderOptions = {}) {\n        return this.splitDocuments(documents, chunkHeaderOptions);\n    }\n    splitOnSeparator(text, separator) {\n        let splits;\n        if (separator) {\n            if (this.keepSeparator) {\n                const regexEscapedSeparator = separator.replace(/[/\\-\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\");\n                splits = text.split(new RegExp(`(?=${regexEscapedSeparator})`));\n            } else {\n                splits = text.split(separator);\n            }\n        } else {\n            splits = text.split(\"\");\n        }\n        return splits.filter((s)=>s !== \"\");\n    }\n    async createDocuments(texts, // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    metadatas = [], chunkHeaderOptions = {}) {\n        // if no metadata is provided, we create an empty one for each text\n        const _metadatas = metadatas.length > 0 ? metadatas : new Array(texts.length).fill({});\n        const { chunkHeader = \"\", chunkOverlapHeader = \"(cont'd) \", appendChunkOverlapHeader = false } = chunkHeaderOptions;\n        const documents = new Array();\n        for(let i = 0; i < texts.length; i += 1){\n            const text = texts[i];\n            let lineCounterIndex = 1;\n            let prevChunk = null;\n            for (const chunk of (await this.splitText(text))){\n                let pageContent = chunkHeader;\n                // we need to count the \\n that are in the text before getting removed by the splitting\n                let numberOfIntermediateNewLines = 0;\n                if (prevChunk) {\n                    const indexChunk = text.indexOf(chunk);\n                    const indexEndPrevChunk = text.indexOf(prevChunk) + await this.lengthFunction(prevChunk);\n                    const removedNewlinesFromSplittingText = text.slice(indexEndPrevChunk, indexChunk);\n                    numberOfIntermediateNewLines = (removedNewlinesFromSplittingText.match(/\\n/g) || []).length;\n                    if (appendChunkOverlapHeader) {\n                        pageContent += chunkOverlapHeader;\n                    }\n                }\n                lineCounterIndex += numberOfIntermediateNewLines;\n                const newLinesCount = (chunk.match(/\\n/g) || []).length;\n                const loc = _metadatas[i].loc && typeof _metadatas[i].loc === \"object\" ? {\n                    ..._metadatas[i].loc\n                } : {};\n                loc.lines = {\n                    from: lineCounterIndex,\n                    to: lineCounterIndex + newLinesCount\n                };\n                const metadataWithLinesNumber = {\n                    ..._metadatas[i],\n                    loc\n                };\n                pageContent += chunk;\n                documents.push(new _document_js__WEBPACK_IMPORTED_MODULE_0__.Document({\n                    pageContent,\n                    metadata: metadataWithLinesNumber\n                }));\n                lineCounterIndex += newLinesCount;\n                prevChunk = chunk;\n            }\n        }\n        return documents;\n    }\n    async splitDocuments(documents, chunkHeaderOptions = {}) {\n        const selectedDocuments = documents.filter((doc)=>doc.pageContent !== undefined);\n        const texts = selectedDocuments.map((doc)=>doc.pageContent);\n        const metadatas = selectedDocuments.map((doc)=>doc.metadata);\n        return this.createDocuments(texts, metadatas, chunkHeaderOptions);\n    }\n    joinDocs(docs, separator) {\n        const text = docs.join(separator).trim();\n        return text === \"\" ? null : text;\n    }\n    async mergeSplits(splits, separator) {\n        const docs = [];\n        const currentDoc = [];\n        let total = 0;\n        for (const d of splits){\n            const _len = await this.lengthFunction(d);\n            if (total + _len + (currentDoc.length > 0 ? separator.length : 0) > this.chunkSize) {\n                if (total > this.chunkSize) {\n                    console.warn(`Created a chunk of size ${total}, +\nwhich is longer than the specified ${this.chunkSize}`);\n                }\n                if (currentDoc.length > 0) {\n                    const doc = this.joinDocs(currentDoc, separator);\n                    if (doc !== null) {\n                        docs.push(doc);\n                    }\n                    // Keep on popping if:\n                    // - we have a larger chunk than in the chunk overlap\n                    // - or if we still have any chunks and the length is long\n                    while(total > this.chunkOverlap || total + _len > this.chunkSize && total > 0){\n                        total -= await this.lengthFunction(currentDoc[0]);\n                        currentDoc.shift();\n                    }\n                }\n            }\n            currentDoc.push(d);\n            total += _len;\n        }\n        const doc = this.joinDocs(currentDoc, separator);\n        if (doc !== null) {\n            docs.push(doc);\n        }\n        return docs;\n    }\n}\nclass CharacterTextSplitter extends TextSplitter {\n    static lc_name() {\n        return \"CharacterTextSplitter\";\n    }\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"separator\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"\\n\\n\"\n        });\n        this.separator = fields?.separator ?? this.separator;\n    }\n    async splitText(text) {\n        // First we naively split the large input into a bunch of smaller ones.\n        const splits = this.splitOnSeparator(text, this.separator);\n        return this.mergeSplits(splits, this.keepSeparator ? \"\" : this.separator);\n    }\n}\nconst SupportedTextSplitterLanguages = [\n    \"cpp\",\n    \"go\",\n    \"java\",\n    \"js\",\n    \"php\",\n    \"proto\",\n    \"python\",\n    \"rst\",\n    \"ruby\",\n    \"rust\",\n    \"scala\",\n    \"swift\",\n    \"markdown\",\n    \"latex\",\n    \"html\",\n    \"sol\"\n];\nclass RecursiveCharacterTextSplitter extends TextSplitter {\n    static lc_name() {\n        return \"RecursiveCharacterTextSplitter\";\n    }\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"separators\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"\\n\\n\",\n                \"\\n\",\n                \" \",\n                \"\"\n            ]\n        });\n        this.separators = fields?.separators ?? this.separators;\n        this.keepSeparator = fields?.keepSeparator ?? true;\n    }\n    async _splitText(text, separators) {\n        const finalChunks = [];\n        // Get appropriate separator to use\n        let separator = separators[separators.length - 1];\n        let newSeparators;\n        for(let i = 0; i < separators.length; i += 1){\n            const s = separators[i];\n            if (s === \"\") {\n                separator = s;\n                break;\n            }\n            if (text.includes(s)) {\n                separator = s;\n                newSeparators = separators.slice(i + 1);\n                break;\n            }\n        }\n        // Now that we have the separator, split the text\n        const splits = this.splitOnSeparator(text, separator);\n        // Now go merging things, recursively splitting longer texts.\n        let goodSplits = [];\n        const _separator = this.keepSeparator ? \"\" : separator;\n        for (const s of splits){\n            if (await this.lengthFunction(s) < this.chunkSize) {\n                goodSplits.push(s);\n            } else {\n                if (goodSplits.length) {\n                    const mergedText = await this.mergeSplits(goodSplits, _separator);\n                    finalChunks.push(...mergedText);\n                    goodSplits = [];\n                }\n                if (!newSeparators) {\n                    finalChunks.push(s);\n                } else {\n                    const otherInfo = await this._splitText(s, newSeparators);\n                    finalChunks.push(...otherInfo);\n                }\n            }\n        }\n        if (goodSplits.length) {\n            const mergedText = await this.mergeSplits(goodSplits, _separator);\n            finalChunks.push(...mergedText);\n        }\n        return finalChunks;\n    }\n    async splitText(text) {\n        return this._splitText(text, this.separators);\n    }\n    static fromLanguage(language, options) {\n        return new RecursiveCharacterTextSplitter({\n            ...options,\n            separators: RecursiveCharacterTextSplitter.getSeparatorsForLanguage(language)\n        });\n    }\n    static getSeparatorsForLanguage(language) {\n        if (language === \"cpp\") {\n            return [\n                // Split along class definitions\n                \"\\nclass \",\n                // Split along function definitions\n                \"\\nvoid \",\n                \"\\nint \",\n                \"\\nfloat \",\n                \"\\ndouble \",\n                // Split along control flow statements\n                \"\\nif \",\n                \"\\nfor \",\n                \"\\nwhile \",\n                \"\\nswitch \",\n                \"\\ncase \",\n                // Split by the normal type of lines\n                \"\\n\\n\",\n                \"\\n\",\n                \" \",\n                \"\"\n            ];\n        } else if (language === \"go\") {\n            return [\n                // Split along function definitions\n                \"\\nfunc \",\n                \"\\nvar \",\n                \"\\nconst \",\n                \"\\ntype \",\n                // Split along control flow statements\n                \"\\nif \",\n                \"\\nfor \",\n                \"\\nswitch \",\n                \"\\ncase \",\n                // Split by the normal type of lines\n                \"\\n\\n\",\n                \"\\n\",\n                \" \",\n                \"\"\n            ];\n        } else if (language === \"java\") {\n            return [\n                // Split along class definitions\n                \"\\nclass \",\n                // Split along method definitions\n                \"\\npublic \",\n                \"\\nprotected \",\n                \"\\nprivate \",\n                \"\\nstatic \",\n                // Split along control flow statements\n                \"\\nif \",\n                \"\\nfor \",\n                \"\\nwhile \",\n                \"\\nswitch \",\n                \"\\ncase \",\n                // Split by the normal type of lines\n                \"\\n\\n\",\n                \"\\n\",\n                \" \",\n                \"\"\n            ];\n        } else if (language === \"js\") {\n            return [\n                // Split along function definitions\n                \"\\nfunction \",\n                \"\\nconst \",\n                \"\\nlet \",\n                \"\\nvar \",\n                \"\\nclass \",\n                // Split along control flow statements\n                \"\\nif \",\n                \"\\nfor \",\n                \"\\nwhile \",\n                \"\\nswitch \",\n                \"\\ncase \",\n                \"\\ndefault \",\n                // Split by the normal type of lines\n                \"\\n\\n\",\n                \"\\n\",\n                \" \",\n                \"\"\n            ];\n        } else if (language === \"php\") {\n            return [\n                // Split along function definitions\n                \"\\nfunction \",\n                // Split along class definitions\n                \"\\nclass \",\n                // Split along control flow statements\n                \"\\nif \",\n                \"\\nforeach \",\n                \"\\nwhile \",\n                \"\\ndo \",\n                \"\\nswitch \",\n                \"\\ncase \",\n                // Split by the normal type of lines\n                \"\\n\\n\",\n                \"\\n\",\n                \" \",\n                \"\"\n            ];\n        } else if (language === \"proto\") {\n            return [\n                // Split along message definitions\n                \"\\nmessage \",\n                // Split along service definitions\n                \"\\nservice \",\n                // Split along enum definitions\n                \"\\nenum \",\n                // Split along option definitions\n                \"\\noption \",\n                // Split along import statements\n                \"\\nimport \",\n                // Split along syntax declarations\n                \"\\nsyntax \",\n                // Split by the normal type of lines\n                \"\\n\\n\",\n                \"\\n\",\n                \" \",\n                \"\"\n            ];\n        } else if (language === \"python\") {\n            return [\n                // First, try to split along class definitions\n                \"\\nclass \",\n                \"\\ndef \",\n                \"\\n\tdef \",\n                // Now split by the normal type of lines\n                \"\\n\\n\",\n                \"\\n\",\n                \" \",\n                \"\"\n            ];\n        } else if (language === \"rst\") {\n            return [\n                // Split along section titles\n                \"\\n===\\n\",\n                \"\\n---\\n\",\n                \"\\n***\\n\",\n                // Split along directive markers\n                \"\\n.. \",\n                // Split by the normal type of lines\n                \"\\n\\n\",\n                \"\\n\",\n                \" \",\n                \"\"\n            ];\n        } else if (language === \"ruby\") {\n            return [\n                // Split along method definitions\n                \"\\ndef \",\n                \"\\nclass \",\n                // Split along control flow statements\n                \"\\nif \",\n                \"\\nunless \",\n                \"\\nwhile \",\n                \"\\nfor \",\n                \"\\ndo \",\n                \"\\nbegin \",\n                \"\\nrescue \",\n                // Split by the normal type of lines\n                \"\\n\\n\",\n                \"\\n\",\n                \" \",\n                \"\"\n            ];\n        } else if (language === \"rust\") {\n            return [\n                // Split along function definitions\n                \"\\nfn \",\n                \"\\nconst \",\n                \"\\nlet \",\n                // Split along control flow statements\n                \"\\nif \",\n                \"\\nwhile \",\n                \"\\nfor \",\n                \"\\nloop \",\n                \"\\nmatch \",\n                \"\\nconst \",\n                // Split by the normal type of lines\n                \"\\n\\n\",\n                \"\\n\",\n                \" \",\n                \"\"\n            ];\n        } else if (language === \"scala\") {\n            return [\n                // Split along class definitions\n                \"\\nclass \",\n                \"\\nobject \",\n                // Split along method definitions\n                \"\\ndef \",\n                \"\\nval \",\n                \"\\nvar \",\n                // Split along control flow statements\n                \"\\nif \",\n                \"\\nfor \",\n                \"\\nwhile \",\n                \"\\nmatch \",\n                \"\\ncase \",\n                // Split by the normal type of lines\n                \"\\n\\n\",\n                \"\\n\",\n                \" \",\n                \"\"\n            ];\n        } else if (language === \"swift\") {\n            return [\n                // Split along function definitions\n                \"\\nfunc \",\n                // Split along class definitions\n                \"\\nclass \",\n                \"\\nstruct \",\n                \"\\nenum \",\n                // Split along control flow statements\n                \"\\nif \",\n                \"\\nfor \",\n                \"\\nwhile \",\n                \"\\ndo \",\n                \"\\nswitch \",\n                \"\\ncase \",\n                // Split by the normal type of lines\n                \"\\n\\n\",\n                \"\\n\",\n                \" \",\n                \"\"\n            ];\n        } else if (language === \"markdown\") {\n            return [\n                // First, try to split along Markdown headings (starting with level 2)\n                \"\\n## \",\n                \"\\n### \",\n                \"\\n#### \",\n                \"\\n##### \",\n                \"\\n###### \",\n                // Note the alternative syntax for headings (below) is not handled here\n                // Heading level 2\n                // ---------------\n                // End of code block\n                \"```\\n\\n\",\n                // Horizontal lines\n                \"\\n\\n***\\n\\n\",\n                \"\\n\\n---\\n\\n\",\n                \"\\n\\n___\\n\\n\",\n                // Note that this splitter doesn't handle horizontal lines defined\n                // by *three or more* of ***, ---, or ___, but this is not handled\n                \"\\n\\n\",\n                \"\\n\",\n                \" \",\n                \"\"\n            ];\n        } else if (language === \"latex\") {\n            return [\n                // First, try to split along Latex sections\n                \"\\n\\\\chapter{\",\n                \"\\n\\\\section{\",\n                \"\\n\\\\subsection{\",\n                \"\\n\\\\subsubsection{\",\n                // Now split by environments\n                \"\\n\\\\begin{enumerate}\",\n                \"\\n\\\\begin{itemize}\",\n                \"\\n\\\\begin{description}\",\n                \"\\n\\\\begin{list}\",\n                \"\\n\\\\begin{quote}\",\n                \"\\n\\\\begin{quotation}\",\n                \"\\n\\\\begin{verse}\",\n                \"\\n\\\\begin{verbatim}\",\n                // Now split by math environments\n                \"\\n\\\\begin{align}\",\n                \"$$\",\n                \"$\",\n                // Now split by the normal type of lines\n                \"\\n\\n\",\n                \"\\n\",\n                \" \",\n                \"\"\n            ];\n        } else if (language === \"html\") {\n            return [\n                // First, try to split along HTML tags\n                \"<body>\",\n                \"<div>\",\n                \"<p>\",\n                \"<br>\",\n                \"<li>\",\n                \"<h1>\",\n                \"<h2>\",\n                \"<h3>\",\n                \"<h4>\",\n                \"<h5>\",\n                \"<h6>\",\n                \"<span>\",\n                \"<table>\",\n                \"<tr>\",\n                \"<td>\",\n                \"<th>\",\n                \"<ul>\",\n                \"<ol>\",\n                \"<header>\",\n                \"<footer>\",\n                \"<nav>\",\n                // Head\n                \"<head>\",\n                \"<style>\",\n                \"<script>\",\n                \"<meta>\",\n                \"<title>\",\n                // Normal type of lines\n                \" \",\n                \"\"\n            ];\n        } else if (language === \"sol\") {\n            return [\n                // Split along compiler informations definitions\n                \"\\npragma \",\n                \"\\nusing \",\n                // Split along contract definitions\n                \"\\ncontract \",\n                \"\\ninterface \",\n                \"\\nlibrary \",\n                // Split along method definitions\n                \"\\nconstructor \",\n                \"\\ntype \",\n                \"\\nfunction \",\n                \"\\nevent \",\n                \"\\nmodifier \",\n                \"\\nerror \",\n                \"\\nstruct \",\n                \"\\nenum \",\n                // Split along control flow statements\n                \"\\nif \",\n                \"\\nfor \",\n                \"\\nwhile \",\n                \"\\ndo while \",\n                \"\\nassembly \",\n                // Split by the normal type of lines\n                \"\\n\\n\",\n                \"\\n\",\n                \" \",\n                \"\"\n            ];\n        } else {\n            throw new Error(`Language ${language} is not supported.`);\n        }\n    }\n}\n/**\n * Implementation of splitter which looks at tokens.\n */ class TokenTextSplitter extends TextSplitter {\n    static lc_name() {\n        return \"TokenTextSplitter\";\n    }\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"encodingName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"allowedSpecial\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"disallowedSpecial\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"tokenizer\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.encodingName = fields?.encodingName ?? \"gpt2\";\n        this.allowedSpecial = fields?.allowedSpecial ?? [];\n        this.disallowedSpecial = fields?.disallowedSpecial ?? \"all\";\n    }\n    async splitText(text) {\n        if (!this.tokenizer) {\n            this.tokenizer = await (0,_util_tiktoken_js__WEBPACK_IMPORTED_MODULE_1__.getEncoding)(this.encodingName);\n        }\n        const splits = [];\n        const input_ids = this.tokenizer.encode(text, this.allowedSpecial, this.disallowedSpecial);\n        let start_idx = 0;\n        let cur_idx = Math.min(start_idx + this.chunkSize, input_ids.length);\n        let chunk_ids = input_ids.slice(start_idx, cur_idx);\n        while(start_idx < input_ids.length){\n            splits.push(this.tokenizer.decode(chunk_ids));\n            start_idx += this.chunkSize - this.chunkOverlap;\n            cur_idx = Math.min(start_idx + this.chunkSize, input_ids.length);\n            chunk_ids = input_ids.slice(start_idx, cur_idx);\n        }\n        return splits;\n    }\n}\nclass MarkdownTextSplitter extends RecursiveCharacterTextSplitter {\n    constructor(fields){\n        super({\n            ...fields,\n            separators: RecursiveCharacterTextSplitter.getSeparatorsForLanguage(\"markdown\")\n        });\n    }\n}\nclass LatexTextSplitter extends RecursiveCharacterTextSplitter {\n    constructor(fields){\n        super({\n            ...fields,\n            separators: RecursiveCharacterTextSplitter.getSeparatorsForLanguage(\"latex\")\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvdGV4dF9zcGxpdHRlci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQXlDO0FBQ1E7QUFDYztBQUN4RCxNQUFNRyxxQkFBcUJELHdFQUF1QkE7SUFDckRFLFlBQVlDLE1BQU0sQ0FBRTtRQUNoQixLQUFLLENBQUNBO1FBQ05DLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsZ0JBQWdCO1lBQ3hDQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPO2dCQUFDO2dCQUFhO2dCQUF5QjthQUFpQjtRQUNuRTtRQUNBTCxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLGFBQWE7WUFDckNDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU87UUFDWDtRQUNBTCxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLGdCQUFnQjtZQUN4Q0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTztRQUNYO1FBQ0FMLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsaUJBQWlCO1lBQ3pDQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPO1FBQ1g7UUFDQUwsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxrQkFBa0I7WUFDMUNDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU8sS0FBSztRQUNoQjtRQUNBLElBQUksQ0FBQ0MsU0FBUyxHQUFHUCxRQUFRTyxhQUFhLElBQUksQ0FBQ0EsU0FBUztRQUNwRCxJQUFJLENBQUNDLFlBQVksR0FBR1IsUUFBUVEsZ0JBQWdCLElBQUksQ0FBQ0EsWUFBWTtRQUM3RCxJQUFJLENBQUNDLGFBQWEsR0FBR1QsUUFBUVMsaUJBQWlCLElBQUksQ0FBQ0EsYUFBYTtRQUNoRSxJQUFJLENBQUNDLGNBQWMsR0FDZlYsUUFBUVUsa0JBQW1CLEVBQUNDLE9BQVNBLEtBQUtDLE1BQU07UUFDcEQsSUFBSSxJQUFJLENBQUNKLFlBQVksSUFBSSxJQUFJLENBQUNELFNBQVMsRUFBRTtZQUNyQyxNQUFNLElBQUlNLE1BQU07UUFDcEI7SUFDSjtJQUNBLE1BQU1DLG1CQUFtQkMsU0FBUyxFQUFFQyxxQkFBcUIsQ0FBQyxDQUFDLEVBQUU7UUFDekQsT0FBTyxJQUFJLENBQUNDLGNBQWMsQ0FBQ0YsV0FBV0M7SUFDMUM7SUFDQUUsaUJBQWlCUCxJQUFJLEVBQUVRLFNBQVMsRUFBRTtRQUM5QixJQUFJQztRQUNKLElBQUlELFdBQVc7WUFDWCxJQUFJLElBQUksQ0FBQ1YsYUFBYSxFQUFFO2dCQUNwQixNQUFNWSx3QkFBd0JGLFVBQVVHLE9BQU8sQ0FBQywwQkFBMEI7Z0JBQzFFRixTQUFTVCxLQUFLWSxLQUFLLENBQUMsSUFBSUMsT0FBTyxDQUFDLEdBQUcsRUFBRUgsc0JBQXNCLENBQUMsQ0FBQztZQUNqRSxPQUNLO2dCQUNERCxTQUFTVCxLQUFLWSxLQUFLLENBQUNKO1lBQ3hCO1FBQ0osT0FDSztZQUNEQyxTQUFTVCxLQUFLWSxLQUFLLENBQUM7UUFDeEI7UUFDQSxPQUFPSCxPQUFPSyxNQUFNLENBQUMsQ0FBQ0MsSUFBTUEsTUFBTTtJQUN0QztJQUNBLE1BQU1DLGdCQUFnQkMsS0FBSyxFQUMzQiw4REFBOEQ7SUFDOURDLFlBQVksRUFBRSxFQUFFYixxQkFBcUIsQ0FBQyxDQUFDLEVBQUU7UUFDckMsbUVBQW1FO1FBQ25FLE1BQU1jLGFBQWFELFVBQVVqQixNQUFNLEdBQUcsSUFBSWlCLFlBQVksSUFBSUUsTUFBTUgsTUFBTWhCLE1BQU0sRUFBRW9CLElBQUksQ0FBQyxDQUFDO1FBQ3BGLE1BQU0sRUFBRUMsY0FBYyxFQUFFLEVBQUVDLHFCQUFxQixXQUFXLEVBQUVDLDJCQUEyQixLQUFLLEVBQUcsR0FBR25CO1FBQ2xHLE1BQU1ELFlBQVksSUFBSWdCO1FBQ3RCLElBQUssSUFBSUssSUFBSSxHQUFHQSxJQUFJUixNQUFNaEIsTUFBTSxFQUFFd0IsS0FBSyxFQUFHO1lBQ3RDLE1BQU16QixPQUFPaUIsS0FBSyxDQUFDUSxFQUFFO1lBQ3JCLElBQUlDLG1CQUFtQjtZQUN2QixJQUFJQyxZQUFZO1lBQ2hCLEtBQUssTUFBTUMsU0FBUyxPQUFNLElBQUksQ0FBQ0MsU0FBUyxDQUFDN0IsS0FBSSxFQUFHO2dCQUM1QyxJQUFJOEIsY0FBY1I7Z0JBQ2xCLHVGQUF1RjtnQkFDdkYsSUFBSVMsK0JBQStCO2dCQUNuQyxJQUFJSixXQUFXO29CQUNYLE1BQU1LLGFBQWFoQyxLQUFLaUMsT0FBTyxDQUFDTDtvQkFDaEMsTUFBTU0sb0JBQW9CbEMsS0FBS2lDLE9BQU8sQ0FBQ04sYUFBYyxNQUFNLElBQUksQ0FBQzVCLGNBQWMsQ0FBQzRCO29CQUMvRSxNQUFNUSxtQ0FBbUNuQyxLQUFLb0MsS0FBSyxDQUFDRixtQkFBbUJGO29CQUN2RUQsK0JBQStCLENBQUNJLGlDQUFpQ0UsS0FBSyxDQUFDLFVBQVUsRUFBRSxFQUFFcEMsTUFBTTtvQkFDM0YsSUFBSXVCLDBCQUEwQjt3QkFDMUJNLGVBQWVQO29CQUNuQjtnQkFDSjtnQkFDQUcsb0JBQW9CSztnQkFDcEIsTUFBTU8sZ0JBQWdCLENBQUNWLE1BQU1TLEtBQUssQ0FBQyxVQUFVLEVBQUUsRUFBRXBDLE1BQU07Z0JBQ3ZELE1BQU1zQyxNQUFNcEIsVUFBVSxDQUFDTSxFQUFFLENBQUNjLEdBQUcsSUFBSSxPQUFPcEIsVUFBVSxDQUFDTSxFQUFFLENBQUNjLEdBQUcsS0FBSyxXQUN4RDtvQkFBRSxHQUFHcEIsVUFBVSxDQUFDTSxFQUFFLENBQUNjLEdBQUc7Z0JBQUMsSUFDdkIsQ0FBQztnQkFDUEEsSUFBSUMsS0FBSyxHQUFHO29CQUNSQyxNQUFNZjtvQkFDTmdCLElBQUloQixtQkFBbUJZO2dCQUMzQjtnQkFDQSxNQUFNSywwQkFBMEI7b0JBQzVCLEdBQUd4QixVQUFVLENBQUNNLEVBQUU7b0JBQ2hCYztnQkFDSjtnQkFDQVQsZUFBZUY7Z0JBQ2Z4QixVQUFVd0MsSUFBSSxDQUFDLElBQUk1RCxrREFBUUEsQ0FBQztvQkFDeEI4QztvQkFDQWUsVUFBVUY7Z0JBQ2Q7Z0JBQ0FqQixvQkFBb0JZO2dCQUNwQlgsWUFBWUM7WUFDaEI7UUFDSjtRQUNBLE9BQU94QjtJQUNYO0lBQ0EsTUFBTUUsZUFBZUYsU0FBUyxFQUFFQyxxQkFBcUIsQ0FBQyxDQUFDLEVBQUU7UUFDckQsTUFBTXlDLG9CQUFvQjFDLFVBQVVVLE1BQU0sQ0FBQyxDQUFDaUMsTUFBUUEsSUFBSWpCLFdBQVcsS0FBS2tCO1FBQ3hFLE1BQU0vQixRQUFRNkIsa0JBQWtCRyxHQUFHLENBQUMsQ0FBQ0YsTUFBUUEsSUFBSWpCLFdBQVc7UUFDNUQsTUFBTVosWUFBWTRCLGtCQUFrQkcsR0FBRyxDQUFDLENBQUNGLE1BQVFBLElBQUlGLFFBQVE7UUFDN0QsT0FBTyxJQUFJLENBQUM3QixlQUFlLENBQUNDLE9BQU9DLFdBQVdiO0lBQ2xEO0lBQ0E2QyxTQUFTQyxJQUFJLEVBQUUzQyxTQUFTLEVBQUU7UUFDdEIsTUFBTVIsT0FBT21ELEtBQUtDLElBQUksQ0FBQzVDLFdBQVc2QyxJQUFJO1FBQ3RDLE9BQU9yRCxTQUFTLEtBQUssT0FBT0E7SUFDaEM7SUFDQSxNQUFNc0QsWUFBWTdDLE1BQU0sRUFBRUQsU0FBUyxFQUFFO1FBQ2pDLE1BQU0yQyxPQUFPLEVBQUU7UUFDZixNQUFNSSxhQUFhLEVBQUU7UUFDckIsSUFBSUMsUUFBUTtRQUNaLEtBQUssTUFBTUMsS0FBS2hELE9BQVE7WUFDcEIsTUFBTWlELE9BQU8sTUFBTSxJQUFJLENBQUMzRCxjQUFjLENBQUMwRDtZQUN2QyxJQUFJRCxRQUFRRSxPQUFRSCxDQUFBQSxXQUFXdEQsTUFBTSxHQUFHLElBQUlPLFVBQVVQLE1BQU0sR0FBRyxLQUMzRCxJQUFJLENBQUNMLFNBQVMsRUFBRTtnQkFDaEIsSUFBSTRELFFBQVEsSUFBSSxDQUFDNUQsU0FBUyxFQUFFO29CQUN4QitELFFBQVFDLElBQUksQ0FBQyxDQUFDLHdCQUF3QixFQUFFSixNQUFNO21DQUMvQixFQUFFLElBQUksQ0FBQzVELFNBQVMsQ0FBQyxDQUFDO2dCQUNyQztnQkFDQSxJQUFJMkQsV0FBV3RELE1BQU0sR0FBRyxHQUFHO29CQUN2QixNQUFNOEMsTUFBTSxJQUFJLENBQUNHLFFBQVEsQ0FBQ0ssWUFBWS9DO29CQUN0QyxJQUFJdUMsUUFBUSxNQUFNO3dCQUNkSSxLQUFLUCxJQUFJLENBQUNHO29CQUNkO29CQUNBLHNCQUFzQjtvQkFDdEIscURBQXFEO29CQUNyRCwwREFBMEQ7b0JBQzFELE1BQU9TLFFBQVEsSUFBSSxDQUFDM0QsWUFBWSxJQUMzQjJELFFBQVFFLE9BQU8sSUFBSSxDQUFDOUQsU0FBUyxJQUFJNEQsUUFBUSxFQUFJO3dCQUM5Q0EsU0FBUyxNQUFNLElBQUksQ0FBQ3pELGNBQWMsQ0FBQ3dELFVBQVUsQ0FBQyxFQUFFO3dCQUNoREEsV0FBV00sS0FBSztvQkFDcEI7Z0JBQ0o7WUFDSjtZQUNBTixXQUFXWCxJQUFJLENBQUNhO1lBQ2hCRCxTQUFTRTtRQUNiO1FBQ0EsTUFBTVgsTUFBTSxJQUFJLENBQUNHLFFBQVEsQ0FBQ0ssWUFBWS9DO1FBQ3RDLElBQUl1QyxRQUFRLE1BQU07WUFDZEksS0FBS1AsSUFBSSxDQUFDRztRQUNkO1FBQ0EsT0FBT0k7SUFDWDtBQUNKO0FBQ08sTUFBTVcsOEJBQThCM0U7SUFDdkMsT0FBTzRFLFVBQVU7UUFDYixPQUFPO0lBQ1g7SUFDQTNFLFlBQVlDLE1BQU0sQ0FBRTtRQUNoQixLQUFLLENBQUNBO1FBQ05DLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsYUFBYTtZQUNyQ0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTztRQUNYO1FBQ0EsSUFBSSxDQUFDYSxTQUFTLEdBQUduQixRQUFRbUIsYUFBYSxJQUFJLENBQUNBLFNBQVM7SUFDeEQ7SUFDQSxNQUFNcUIsVUFBVTdCLElBQUksRUFBRTtRQUNsQix1RUFBdUU7UUFDdkUsTUFBTVMsU0FBUyxJQUFJLENBQUNGLGdCQUFnQixDQUFDUCxNQUFNLElBQUksQ0FBQ1EsU0FBUztRQUN6RCxPQUFPLElBQUksQ0FBQzhDLFdBQVcsQ0FBQzdDLFFBQVEsSUFBSSxDQUFDWCxhQUFhLEdBQUcsS0FBSyxJQUFJLENBQUNVLFNBQVM7SUFDNUU7QUFDSjtBQUNPLE1BQU13RCxpQ0FBaUM7SUFDMUM7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7Q0FDSCxDQUFDO0FBQ0ssTUFBTUMsdUNBQXVDOUU7SUFDaEQsT0FBTzRFLFVBQVU7UUFDYixPQUFPO0lBQ1g7SUFDQTNFLFlBQVlDLE1BQU0sQ0FBRTtRQUNoQixLQUFLLENBQUNBO1FBQ05DLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsY0FBYztZQUN0Q0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTztnQkFBQztnQkFBUTtnQkFBTTtnQkFBSzthQUFHO1FBQ2xDO1FBQ0EsSUFBSSxDQUFDdUUsVUFBVSxHQUFHN0UsUUFBUTZFLGNBQWMsSUFBSSxDQUFDQSxVQUFVO1FBQ3ZELElBQUksQ0FBQ3BFLGFBQWEsR0FBR1QsUUFBUVMsaUJBQWlCO0lBQ2xEO0lBQ0EsTUFBTXFFLFdBQVduRSxJQUFJLEVBQUVrRSxVQUFVLEVBQUU7UUFDL0IsTUFBTUUsY0FBYyxFQUFFO1FBQ3RCLG1DQUFtQztRQUNuQyxJQUFJNUQsWUFBWTBELFVBQVUsQ0FBQ0EsV0FBV2pFLE1BQU0sR0FBRyxFQUFFO1FBQ2pELElBQUlvRTtRQUNKLElBQUssSUFBSTVDLElBQUksR0FBR0EsSUFBSXlDLFdBQVdqRSxNQUFNLEVBQUV3QixLQUFLLEVBQUc7WUFDM0MsTUFBTVYsSUFBSW1ELFVBQVUsQ0FBQ3pDLEVBQUU7WUFDdkIsSUFBSVYsTUFBTSxJQUFJO2dCQUNWUCxZQUFZTztnQkFDWjtZQUNKO1lBQ0EsSUFBSWYsS0FBS3NFLFFBQVEsQ0FBQ3ZELElBQUk7Z0JBQ2xCUCxZQUFZTztnQkFDWnNELGdCQUFnQkgsV0FBVzlCLEtBQUssQ0FBQ1gsSUFBSTtnQkFDckM7WUFDSjtRQUNKO1FBQ0EsaURBQWlEO1FBQ2pELE1BQU1oQixTQUFTLElBQUksQ0FBQ0YsZ0JBQWdCLENBQUNQLE1BQU1RO1FBQzNDLDZEQUE2RDtRQUM3RCxJQUFJK0QsYUFBYSxFQUFFO1FBQ25CLE1BQU1DLGFBQWEsSUFBSSxDQUFDMUUsYUFBYSxHQUFHLEtBQUtVO1FBQzdDLEtBQUssTUFBTU8sS0FBS04sT0FBUTtZQUNwQixJQUFJLE1BQU8sSUFBSSxDQUFDVixjQUFjLENBQUNnQixLQUFNLElBQUksQ0FBQ25CLFNBQVMsRUFBRTtnQkFDakQyRSxXQUFXM0IsSUFBSSxDQUFDN0I7WUFDcEIsT0FDSztnQkFDRCxJQUFJd0QsV0FBV3RFLE1BQU0sRUFBRTtvQkFDbkIsTUFBTXdFLGFBQWEsTUFBTSxJQUFJLENBQUNuQixXQUFXLENBQUNpQixZQUFZQztvQkFDdERKLFlBQVl4QixJQUFJLElBQUk2QjtvQkFDcEJGLGFBQWEsRUFBRTtnQkFDbkI7Z0JBQ0EsSUFBSSxDQUFDRixlQUFlO29CQUNoQkQsWUFBWXhCLElBQUksQ0FBQzdCO2dCQUNyQixPQUNLO29CQUNELE1BQU0yRCxZQUFZLE1BQU0sSUFBSSxDQUFDUCxVQUFVLENBQUNwRCxHQUFHc0Q7b0JBQzNDRCxZQUFZeEIsSUFBSSxJQUFJOEI7Z0JBQ3hCO1lBQ0o7UUFDSjtRQUNBLElBQUlILFdBQVd0RSxNQUFNLEVBQUU7WUFDbkIsTUFBTXdFLGFBQWEsTUFBTSxJQUFJLENBQUNuQixXQUFXLENBQUNpQixZQUFZQztZQUN0REosWUFBWXhCLElBQUksSUFBSTZCO1FBQ3hCO1FBQ0EsT0FBT0w7SUFDWDtJQUNBLE1BQU12QyxVQUFVN0IsSUFBSSxFQUFFO1FBQ2xCLE9BQU8sSUFBSSxDQUFDbUUsVUFBVSxDQUFDbkUsTUFBTSxJQUFJLENBQUNrRSxVQUFVO0lBQ2hEO0lBQ0EsT0FBT1MsYUFBYUMsUUFBUSxFQUFFQyxPQUFPLEVBQUU7UUFDbkMsT0FBTyxJQUFJWiwrQkFBK0I7WUFDdEMsR0FBR1ksT0FBTztZQUNWWCxZQUFZRCwrQkFBK0JhLHdCQUF3QixDQUFDRjtRQUN4RTtJQUNKO0lBQ0EsT0FBT0UseUJBQXlCRixRQUFRLEVBQUU7UUFDdEMsSUFBSUEsYUFBYSxPQUFPO1lBQ3BCLE9BQU87Z0JBQ0gsZ0NBQWdDO2dCQUNoQztnQkFDQSxtQ0FBbUM7Z0JBQ25DO2dCQUNBO2dCQUNBO2dCQUNBO2dCQUNBLHNDQUFzQztnQkFDdEM7Z0JBQ0E7Z0JBQ0E7Z0JBQ0E7Z0JBQ0E7Z0JBQ0Esb0NBQW9DO2dCQUNwQztnQkFDQTtnQkFDQTtnQkFDQTthQUNIO1FBQ0wsT0FDSyxJQUFJQSxhQUFhLE1BQU07WUFDeEIsT0FBTztnQkFDSCxtQ0FBbUM7Z0JBQ25DO2dCQUNBO2dCQUNBO2dCQUNBO2dCQUNBLHNDQUFzQztnQkFDdEM7Z0JBQ0E7Z0JBQ0E7Z0JBQ0E7Z0JBQ0Esb0NBQW9DO2dCQUNwQztnQkFDQTtnQkFDQTtnQkFDQTthQUNIO1FBQ0wsT0FDSyxJQUFJQSxhQUFhLFFBQVE7WUFDMUIsT0FBTztnQkFDSCxnQ0FBZ0M7Z0JBQ2hDO2dCQUNBLGlDQUFpQztnQkFDakM7Z0JBQ0E7Z0JBQ0E7Z0JBQ0E7Z0JBQ0Esc0NBQXNDO2dCQUN0QztnQkFDQTtnQkFDQTtnQkFDQTtnQkFDQTtnQkFDQSxvQ0FBb0M7Z0JBQ3BDO2dCQUNBO2dCQUNBO2dCQUNBO2FBQ0g7UUFDTCxPQUNLLElBQUlBLGFBQWEsTUFBTTtZQUN4QixPQUFPO2dCQUNILG1DQUFtQztnQkFDbkM7Z0JBQ0E7Z0JBQ0E7Z0JBQ0E7Z0JBQ0E7Z0JBQ0Esc0NBQXNDO2dCQUN0QztnQkFDQTtnQkFDQTtnQkFDQTtnQkFDQTtnQkFDQTtnQkFDQSxvQ0FBb0M7Z0JBQ3BDO2dCQUNBO2dCQUNBO2dCQUNBO2FBQ0g7UUFDTCxPQUNLLElBQUlBLGFBQWEsT0FBTztZQUN6QixPQUFPO2dCQUNILG1DQUFtQztnQkFDbkM7Z0JBQ0EsZ0NBQWdDO2dCQUNoQztnQkFDQSxzQ0FBc0M7Z0JBQ3RDO2dCQUNBO2dCQUNBO2dCQUNBO2dCQUNBO2dCQUNBO2dCQUNBLG9DQUFvQztnQkFDcEM7Z0JBQ0E7Z0JBQ0E7Z0JBQ0E7YUFDSDtRQUNMLE9BQ0ssSUFBSUEsYUFBYSxTQUFTO1lBQzNCLE9BQU87Z0JBQ0gsa0NBQWtDO2dCQUNsQztnQkFDQSxrQ0FBa0M7Z0JBQ2xDO2dCQUNBLCtCQUErQjtnQkFDL0I7Z0JBQ0EsaUNBQWlDO2dCQUNqQztnQkFDQSxnQ0FBZ0M7Z0JBQ2hDO2dCQUNBLGtDQUFrQztnQkFDbEM7Z0JBQ0Esb0NBQW9DO2dCQUNwQztnQkFDQTtnQkFDQTtnQkFDQTthQUNIO1FBQ0wsT0FDSyxJQUFJQSxhQUFhLFVBQVU7WUFDNUIsT0FBTztnQkFDSCw4Q0FBOEM7Z0JBQzlDO2dCQUNBO2dCQUNBO2dCQUNBLHdDQUF3QztnQkFDeEM7Z0JBQ0E7Z0JBQ0E7Z0JBQ0E7YUFDSDtRQUNMLE9BQ0ssSUFBSUEsYUFBYSxPQUFPO1lBQ3pCLE9BQU87Z0JBQ0gsNkJBQTZCO2dCQUM3QjtnQkFDQTtnQkFDQTtnQkFDQSxnQ0FBZ0M7Z0JBQ2hDO2dCQUNBLG9DQUFvQztnQkFDcEM7Z0JBQ0E7Z0JBQ0E7Z0JBQ0E7YUFDSDtRQUNMLE9BQ0ssSUFBSUEsYUFBYSxRQUFRO1lBQzFCLE9BQU87Z0JBQ0gsaUNBQWlDO2dCQUNqQztnQkFDQTtnQkFDQSxzQ0FBc0M7Z0JBQ3RDO2dCQUNBO2dCQUNBO2dCQUNBO2dCQUNBO2dCQUNBO2dCQUNBO2dCQUNBLG9DQUFvQztnQkFDcEM7Z0JBQ0E7Z0JBQ0E7Z0JBQ0E7YUFDSDtRQUNMLE9BQ0ssSUFBSUEsYUFBYSxRQUFRO1lBQzFCLE9BQU87Z0JBQ0gsbUNBQW1DO2dCQUNuQztnQkFDQTtnQkFDQTtnQkFDQSxzQ0FBc0M7Z0JBQ3RDO2dCQUNBO2dCQUNBO2dCQUNBO2dCQUNBO2dCQUNBO2dCQUNBLG9DQUFvQztnQkFDcEM7Z0JBQ0E7Z0JBQ0E7Z0JBQ0E7YUFDSDtRQUNMLE9BQ0ssSUFBSUEsYUFBYSxTQUFTO1lBQzNCLE9BQU87Z0JBQ0gsZ0NBQWdDO2dCQUNoQztnQkFDQTtnQkFDQSxpQ0FBaUM7Z0JBQ2pDO2dCQUNBO2dCQUNBO2dCQUNBLHNDQUFzQztnQkFDdEM7Z0JBQ0E7Z0JBQ0E7Z0JBQ0E7Z0JBQ0E7Z0JBQ0Esb0NBQW9DO2dCQUNwQztnQkFDQTtnQkFDQTtnQkFDQTthQUNIO1FBQ0wsT0FDSyxJQUFJQSxhQUFhLFNBQVM7WUFDM0IsT0FBTztnQkFDSCxtQ0FBbUM7Z0JBQ25DO2dCQUNBLGdDQUFnQztnQkFDaEM7Z0JBQ0E7Z0JBQ0E7Z0JBQ0Esc0NBQXNDO2dCQUN0QztnQkFDQTtnQkFDQTtnQkFDQTtnQkFDQTtnQkFDQTtnQkFDQSxvQ0FBb0M7Z0JBQ3BDO2dCQUNBO2dCQUNBO2dCQUNBO2FBQ0g7UUFDTCxPQUNLLElBQUlBLGFBQWEsWUFBWTtZQUM5QixPQUFPO2dCQUNILHNFQUFzRTtnQkFDdEU7Z0JBQ0E7Z0JBQ0E7Z0JBQ0E7Z0JBQ0E7Z0JBQ0EsdUVBQXVFO2dCQUN2RSxrQkFBa0I7Z0JBQ2xCLGtCQUFrQjtnQkFDbEIsb0JBQW9CO2dCQUNwQjtnQkFDQSxtQkFBbUI7Z0JBQ25CO2dCQUNBO2dCQUNBO2dCQUNBLGtFQUFrRTtnQkFDbEUsa0VBQWtFO2dCQUNsRTtnQkFDQTtnQkFDQTtnQkFDQTthQUNIO1FBQ0wsT0FDSyxJQUFJQSxhQUFhLFNBQVM7WUFDM0IsT0FBTztnQkFDSCwyQ0FBMkM7Z0JBQzNDO2dCQUNBO2dCQUNBO2dCQUNBO2dCQUNBLDRCQUE0QjtnQkFDNUI7Z0JBQ0E7Z0JBQ0E7Z0JBQ0E7Z0JBQ0E7Z0JBQ0E7Z0JBQ0E7Z0JBQ0E7Z0JBQ0EsaUNBQWlDO2dCQUNqQztnQkFDQTtnQkFDQTtnQkFDQSx3Q0FBd0M7Z0JBQ3hDO2dCQUNBO2dCQUNBO2dCQUNBO2FBQ0g7UUFDTCxPQUNLLElBQUlBLGFBQWEsUUFBUTtZQUMxQixPQUFPO2dCQUNILHNDQUFzQztnQkFDdEM7Z0JBQ0E7Z0JBQ0E7Z0JBQ0E7Z0JBQ0E7Z0JBQ0E7Z0JBQ0E7Z0JBQ0E7Z0JBQ0E7Z0JBQ0E7Z0JBQ0E7Z0JBQ0E7Z0JBQ0E7Z0JBQ0E7Z0JBQ0E7Z0JBQ0E7Z0JBQ0E7Z0JBQ0E7Z0JBQ0E7Z0JBQ0E7Z0JBQ0E7Z0JBQ0EsT0FBTztnQkFDUDtnQkFDQTtnQkFDQTtnQkFDQTtnQkFDQTtnQkFDQSx1QkFBdUI7Z0JBQ3ZCO2dCQUNBO2FBQ0g7UUFDTCxPQUNLLElBQUlBLGFBQWEsT0FBTztZQUN6QixPQUFPO2dCQUNILGdEQUFnRDtnQkFDaEQ7Z0JBQ0E7Z0JBQ0EsbUNBQW1DO2dCQUNuQztnQkFDQTtnQkFDQTtnQkFDQSxpQ0FBaUM7Z0JBQ2pDO2dCQUNBO2dCQUNBO2dCQUNBO2dCQUNBO2dCQUNBO2dCQUNBO2dCQUNBO2dCQUNBLHNDQUFzQztnQkFDdEM7Z0JBQ0E7Z0JBQ0E7Z0JBQ0E7Z0JBQ0E7Z0JBQ0Esb0NBQW9DO2dCQUNwQztnQkFDQTtnQkFDQTtnQkFDQTthQUNIO1FBQ0wsT0FDSztZQUNELE1BQU0sSUFBSTFFLE1BQU0sQ0FBQyxTQUFTLEVBQUUwRSxTQUFTLGtCQUFrQixDQUFDO1FBQzVEO0lBQ0o7QUFDSjtBQUNBOztDQUVDLEdBQ00sTUFBTUcsMEJBQTBCNUY7SUFDbkMsT0FBTzRFLFVBQVU7UUFDYixPQUFPO0lBQ1g7SUFDQTNFLFlBQVlDLE1BQU0sQ0FBRTtRQUNoQixLQUFLLENBQUNBO1FBQ05DLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsZ0JBQWdCO1lBQ3hDQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPLEtBQUs7UUFDaEI7UUFDQUwsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxrQkFBa0I7WUFDMUNDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU8sS0FBSztRQUNoQjtRQUNBTCxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLHFCQUFxQjtZQUM3Q0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTyxLQUFLO1FBQ2hCO1FBQ0FMLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsYUFBYTtZQUNyQ0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTyxLQUFLO1FBQ2hCO1FBQ0EsSUFBSSxDQUFDcUYsWUFBWSxHQUFHM0YsUUFBUTJGLGdCQUFnQjtRQUM1QyxJQUFJLENBQUNDLGNBQWMsR0FBRzVGLFFBQVE0RixrQkFBa0IsRUFBRTtRQUNsRCxJQUFJLENBQUNDLGlCQUFpQixHQUFHN0YsUUFBUTZGLHFCQUFxQjtJQUMxRDtJQUNBLE1BQU1yRCxVQUFVN0IsSUFBSSxFQUFFO1FBQ2xCLElBQUksQ0FBQyxJQUFJLENBQUNtRixTQUFTLEVBQUU7WUFDakIsSUFBSSxDQUFDQSxTQUFTLEdBQUcsTUFBTWxHLDhEQUFXQSxDQUFDLElBQUksQ0FBQytGLFlBQVk7UUFDeEQ7UUFDQSxNQUFNdkUsU0FBUyxFQUFFO1FBQ2pCLE1BQU0yRSxZQUFZLElBQUksQ0FBQ0QsU0FBUyxDQUFDRSxNQUFNLENBQUNyRixNQUFNLElBQUksQ0FBQ2lGLGNBQWMsRUFBRSxJQUFJLENBQUNDLGlCQUFpQjtRQUN6RixJQUFJSSxZQUFZO1FBQ2hCLElBQUlDLFVBQVVDLEtBQUtDLEdBQUcsQ0FBQ0gsWUFBWSxJQUFJLENBQUMxRixTQUFTLEVBQUV3RixVQUFVbkYsTUFBTTtRQUNuRSxJQUFJeUYsWUFBWU4sVUFBVWhELEtBQUssQ0FBQ2tELFdBQVdDO1FBQzNDLE1BQU9ELFlBQVlGLFVBQVVuRixNQUFNLENBQUU7WUFDakNRLE9BQU9tQyxJQUFJLENBQUMsSUFBSSxDQUFDdUMsU0FBUyxDQUFDUSxNQUFNLENBQUNEO1lBQ2xDSixhQUFhLElBQUksQ0FBQzFGLFNBQVMsR0FBRyxJQUFJLENBQUNDLFlBQVk7WUFDL0MwRixVQUFVQyxLQUFLQyxHQUFHLENBQUNILFlBQVksSUFBSSxDQUFDMUYsU0FBUyxFQUFFd0YsVUFBVW5GLE1BQU07WUFDL0R5RixZQUFZTixVQUFVaEQsS0FBSyxDQUFDa0QsV0FBV0M7UUFDM0M7UUFDQSxPQUFPOUU7SUFDWDtBQUNKO0FBQ08sTUFBTW1GLDZCQUE2QjNCO0lBQ3RDN0UsWUFBWUMsTUFBTSxDQUFFO1FBQ2hCLEtBQUssQ0FBQztZQUNGLEdBQUdBLE1BQU07WUFDVDZFLFlBQVlELCtCQUErQmEsd0JBQXdCLENBQUM7UUFDeEU7SUFDSjtBQUNKO0FBQ08sTUFBTWUsMEJBQTBCNUI7SUFDbkM3RSxZQUFZQyxNQUFNLENBQUU7UUFDaEIsS0FBSyxDQUFDO1lBQ0YsR0FBR0EsTUFBTTtZQUNUNkUsWUFBWUQsK0JBQStCYSx3QkFBd0IsQ0FBQztRQUN4RTtJQUNKO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9xdWlsbC8uL25vZGVfbW9kdWxlcy9sYW5nY2hhaW4vZGlzdC90ZXh0X3NwbGl0dGVyLmpzPzVmYjUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRG9jdW1lbnQgfSBmcm9tIFwiLi9kb2N1bWVudC5qc1wiO1xuaW1wb3J0IHsgZ2V0RW5jb2RpbmcgfSBmcm9tIFwiLi91dGlsL3Rpa3Rva2VuLmpzXCI7XG5pbXBvcnQgeyBCYXNlRG9jdW1lbnRUcmFuc2Zvcm1lciB9IGZyb20gXCIuL3NjaGVtYS9kb2N1bWVudC5qc1wiO1xuZXhwb3J0IGNsYXNzIFRleHRTcGxpdHRlciBleHRlbmRzIEJhc2VEb2N1bWVudFRyYW5zZm9ybWVyIHtcbiAgICBjb25zdHJ1Y3RvcihmaWVsZHMpIHtcbiAgICAgICAgc3VwZXIoZmllbGRzKTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwibGNfbmFtZXNwYWNlXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiBbXCJsYW5nY2hhaW5cIiwgXCJkb2N1bWVudF90cmFuc2Zvcm1lcnNcIiwgXCJ0ZXh0X3NwbGl0dGVyc1wiXVxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiY2h1bmtTaXplXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiAxMDAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJjaHVua092ZXJsYXBcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IDIwMFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwia2VlcFNlcGFyYXRvclwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogZmFsc2VcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImxlbmd0aEZ1bmN0aW9uXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuY2h1bmtTaXplID0gZmllbGRzPy5jaHVua1NpemUgPz8gdGhpcy5jaHVua1NpemU7XG4gICAgICAgIHRoaXMuY2h1bmtPdmVybGFwID0gZmllbGRzPy5jaHVua092ZXJsYXAgPz8gdGhpcy5jaHVua092ZXJsYXA7XG4gICAgICAgIHRoaXMua2VlcFNlcGFyYXRvciA9IGZpZWxkcz8ua2VlcFNlcGFyYXRvciA/PyB0aGlzLmtlZXBTZXBhcmF0b3I7XG4gICAgICAgIHRoaXMubGVuZ3RoRnVuY3Rpb24gPVxuICAgICAgICAgICAgZmllbGRzPy5sZW5ndGhGdW5jdGlvbiA/PyAoKHRleHQpID0+IHRleHQubGVuZ3RoKTtcbiAgICAgICAgaWYgKHRoaXMuY2h1bmtPdmVybGFwID49IHRoaXMuY2h1bmtTaXplKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgaGF2ZSBjaHVua092ZXJsYXAgPj0gY2h1bmtTaXplXCIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFzeW5jIHRyYW5zZm9ybURvY3VtZW50cyhkb2N1bWVudHMsIGNodW5rSGVhZGVyT3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNwbGl0RG9jdW1lbnRzKGRvY3VtZW50cywgY2h1bmtIZWFkZXJPcHRpb25zKTtcbiAgICB9XG4gICAgc3BsaXRPblNlcGFyYXRvcih0ZXh0LCBzZXBhcmF0b3IpIHtcbiAgICAgICAgbGV0IHNwbGl0cztcbiAgICAgICAgaWYgKHNlcGFyYXRvcikge1xuICAgICAgICAgICAgaWYgKHRoaXMua2VlcFNlcGFyYXRvcikge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlZ2V4RXNjYXBlZFNlcGFyYXRvciA9IHNlcGFyYXRvci5yZXBsYWNlKC9bL1xcLVxcXFxeJCorPy4oKXxbXFxde31dL2csIFwiXFxcXCQmXCIpO1xuICAgICAgICAgICAgICAgIHNwbGl0cyA9IHRleHQuc3BsaXQobmV3IFJlZ0V4cChgKD89JHtyZWdleEVzY2FwZWRTZXBhcmF0b3J9KWApKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHNwbGl0cyA9IHRleHQuc3BsaXQoc2VwYXJhdG9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHNwbGl0cyA9IHRleHQuc3BsaXQoXCJcIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNwbGl0cy5maWx0ZXIoKHMpID0+IHMgIT09IFwiXCIpO1xuICAgIH1cbiAgICBhc3luYyBjcmVhdGVEb2N1bWVudHModGV4dHMsIFxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgbWV0YWRhdGFzID0gW10sIGNodW5rSGVhZGVyT3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIC8vIGlmIG5vIG1ldGFkYXRhIGlzIHByb3ZpZGVkLCB3ZSBjcmVhdGUgYW4gZW1wdHkgb25lIGZvciBlYWNoIHRleHRcbiAgICAgICAgY29uc3QgX21ldGFkYXRhcyA9IG1ldGFkYXRhcy5sZW5ndGggPiAwID8gbWV0YWRhdGFzIDogbmV3IEFycmF5KHRleHRzLmxlbmd0aCkuZmlsbCh7fSk7XG4gICAgICAgIGNvbnN0IHsgY2h1bmtIZWFkZXIgPSBcIlwiLCBjaHVua092ZXJsYXBIZWFkZXIgPSBcIihjb250J2QpIFwiLCBhcHBlbmRDaHVua092ZXJsYXBIZWFkZXIgPSBmYWxzZSwgfSA9IGNodW5rSGVhZGVyT3B0aW9ucztcbiAgICAgICAgY29uc3QgZG9jdW1lbnRzID0gbmV3IEFycmF5KCk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGV4dHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgIGNvbnN0IHRleHQgPSB0ZXh0c1tpXTtcbiAgICAgICAgICAgIGxldCBsaW5lQ291bnRlckluZGV4ID0gMTtcbiAgICAgICAgICAgIGxldCBwcmV2Q2h1bmsgPSBudWxsO1xuICAgICAgICAgICAgZm9yIChjb25zdCBjaHVuayBvZiBhd2FpdCB0aGlzLnNwbGl0VGV4dCh0ZXh0KSkge1xuICAgICAgICAgICAgICAgIGxldCBwYWdlQ29udGVudCA9IGNodW5rSGVhZGVyO1xuICAgICAgICAgICAgICAgIC8vIHdlIG5lZWQgdG8gY291bnQgdGhlIFxcbiB0aGF0IGFyZSBpbiB0aGUgdGV4dCBiZWZvcmUgZ2V0dGluZyByZW1vdmVkIGJ5IHRoZSBzcGxpdHRpbmdcbiAgICAgICAgICAgICAgICBsZXQgbnVtYmVyT2ZJbnRlcm1lZGlhdGVOZXdMaW5lcyA9IDA7XG4gICAgICAgICAgICAgICAgaWYgKHByZXZDaHVuaykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBpbmRleENodW5rID0gdGV4dC5pbmRleE9mKGNodW5rKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaW5kZXhFbmRQcmV2Q2h1bmsgPSB0ZXh0LmluZGV4T2YocHJldkNodW5rKSArIChhd2FpdCB0aGlzLmxlbmd0aEZ1bmN0aW9uKHByZXZDaHVuaykpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByZW1vdmVkTmV3bGluZXNGcm9tU3BsaXR0aW5nVGV4dCA9IHRleHQuc2xpY2UoaW5kZXhFbmRQcmV2Q2h1bmssIGluZGV4Q2h1bmspO1xuICAgICAgICAgICAgICAgICAgICBudW1iZXJPZkludGVybWVkaWF0ZU5ld0xpbmVzID0gKHJlbW92ZWROZXdsaW5lc0Zyb21TcGxpdHRpbmdUZXh0Lm1hdGNoKC9cXG4vZykgfHwgW10pLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFwcGVuZENodW5rT3ZlcmxhcEhlYWRlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFnZUNvbnRlbnQgKz0gY2h1bmtPdmVybGFwSGVhZGVyO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGxpbmVDb3VudGVySW5kZXggKz0gbnVtYmVyT2ZJbnRlcm1lZGlhdGVOZXdMaW5lcztcbiAgICAgICAgICAgICAgICBjb25zdCBuZXdMaW5lc0NvdW50ID0gKGNodW5rLm1hdGNoKC9cXG4vZykgfHwgW10pLmxlbmd0aDtcbiAgICAgICAgICAgICAgICBjb25zdCBsb2MgPSBfbWV0YWRhdGFzW2ldLmxvYyAmJiB0eXBlb2YgX21ldGFkYXRhc1tpXS5sb2MgPT09IFwib2JqZWN0XCJcbiAgICAgICAgICAgICAgICAgICAgPyB7IC4uLl9tZXRhZGF0YXNbaV0ubG9jIH1cbiAgICAgICAgICAgICAgICAgICAgOiB7fTtcbiAgICAgICAgICAgICAgICBsb2MubGluZXMgPSB7XG4gICAgICAgICAgICAgICAgICAgIGZyb206IGxpbmVDb3VudGVySW5kZXgsXG4gICAgICAgICAgICAgICAgICAgIHRvOiBsaW5lQ291bnRlckluZGV4ICsgbmV3TGluZXNDb3VudCxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGNvbnN0IG1ldGFkYXRhV2l0aExpbmVzTnVtYmVyID0ge1xuICAgICAgICAgICAgICAgICAgICAuLi5fbWV0YWRhdGFzW2ldLFxuICAgICAgICAgICAgICAgICAgICBsb2MsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBwYWdlQ29udGVudCArPSBjaHVuaztcbiAgICAgICAgICAgICAgICBkb2N1bWVudHMucHVzaChuZXcgRG9jdW1lbnQoe1xuICAgICAgICAgICAgICAgICAgICBwYWdlQ29udGVudCxcbiAgICAgICAgICAgICAgICAgICAgbWV0YWRhdGE6IG1ldGFkYXRhV2l0aExpbmVzTnVtYmVyLFxuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICBsaW5lQ291bnRlckluZGV4ICs9IG5ld0xpbmVzQ291bnQ7XG4gICAgICAgICAgICAgICAgcHJldkNodW5rID0gY2h1bms7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRvY3VtZW50cztcbiAgICB9XG4gICAgYXN5bmMgc3BsaXREb2N1bWVudHMoZG9jdW1lbnRzLCBjaHVua0hlYWRlck9wdGlvbnMgPSB7fSkge1xuICAgICAgICBjb25zdCBzZWxlY3RlZERvY3VtZW50cyA9IGRvY3VtZW50cy5maWx0ZXIoKGRvYykgPT4gZG9jLnBhZ2VDb250ZW50ICE9PSB1bmRlZmluZWQpO1xuICAgICAgICBjb25zdCB0ZXh0cyA9IHNlbGVjdGVkRG9jdW1lbnRzLm1hcCgoZG9jKSA9PiBkb2MucGFnZUNvbnRlbnQpO1xuICAgICAgICBjb25zdCBtZXRhZGF0YXMgPSBzZWxlY3RlZERvY3VtZW50cy5tYXAoKGRvYykgPT4gZG9jLm1ldGFkYXRhKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlRG9jdW1lbnRzKHRleHRzLCBtZXRhZGF0YXMsIGNodW5rSGVhZGVyT3B0aW9ucyk7XG4gICAgfVxuICAgIGpvaW5Eb2NzKGRvY3MsIHNlcGFyYXRvcikge1xuICAgICAgICBjb25zdCB0ZXh0ID0gZG9jcy5qb2luKHNlcGFyYXRvcikudHJpbSgpO1xuICAgICAgICByZXR1cm4gdGV4dCA9PT0gXCJcIiA/IG51bGwgOiB0ZXh0O1xuICAgIH1cbiAgICBhc3luYyBtZXJnZVNwbGl0cyhzcGxpdHMsIHNlcGFyYXRvcikge1xuICAgICAgICBjb25zdCBkb2NzID0gW107XG4gICAgICAgIGNvbnN0IGN1cnJlbnREb2MgPSBbXTtcbiAgICAgICAgbGV0IHRvdGFsID0gMDtcbiAgICAgICAgZm9yIChjb25zdCBkIG9mIHNwbGl0cykge1xuICAgICAgICAgICAgY29uc3QgX2xlbiA9IGF3YWl0IHRoaXMubGVuZ3RoRnVuY3Rpb24oZCk7XG4gICAgICAgICAgICBpZiAodG90YWwgKyBfbGVuICsgKGN1cnJlbnREb2MubGVuZ3RoID4gMCA/IHNlcGFyYXRvci5sZW5ndGggOiAwKSA+XG4gICAgICAgICAgICAgICAgdGhpcy5jaHVua1NpemUpIHtcbiAgICAgICAgICAgICAgICBpZiAodG90YWwgPiB0aGlzLmNodW5rU2l6ZSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oYENyZWF0ZWQgYSBjaHVuayBvZiBzaXplICR7dG90YWx9LCArXG53aGljaCBpcyBsb25nZXIgdGhhbiB0aGUgc3BlY2lmaWVkICR7dGhpcy5jaHVua1NpemV9YCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50RG9jLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZG9jID0gdGhpcy5qb2luRG9jcyhjdXJyZW50RG9jLCBzZXBhcmF0b3IpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZG9jICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkb2NzLnB1c2goZG9jKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBLZWVwIG9uIHBvcHBpbmcgaWY6XG4gICAgICAgICAgICAgICAgICAgIC8vIC0gd2UgaGF2ZSBhIGxhcmdlciBjaHVuayB0aGFuIGluIHRoZSBjaHVuayBvdmVybGFwXG4gICAgICAgICAgICAgICAgICAgIC8vIC0gb3IgaWYgd2Ugc3RpbGwgaGF2ZSBhbnkgY2h1bmtzIGFuZCB0aGUgbGVuZ3RoIGlzIGxvbmdcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKHRvdGFsID4gdGhpcy5jaHVua092ZXJsYXAgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICh0b3RhbCArIF9sZW4gPiB0aGlzLmNodW5rU2l6ZSAmJiB0b3RhbCA+IDApKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0b3RhbCAtPSBhd2FpdCB0aGlzLmxlbmd0aEZ1bmN0aW9uKGN1cnJlbnREb2NbMF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudERvYy5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY3VycmVudERvYy5wdXNoKGQpO1xuICAgICAgICAgICAgdG90YWwgKz0gX2xlbjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBkb2MgPSB0aGlzLmpvaW5Eb2NzKGN1cnJlbnREb2MsIHNlcGFyYXRvcik7XG4gICAgICAgIGlmIChkb2MgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGRvY3MucHVzaChkb2MpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkb2NzO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBDaGFyYWN0ZXJUZXh0U3BsaXR0ZXIgZXh0ZW5kcyBUZXh0U3BsaXR0ZXIge1xuICAgIHN0YXRpYyBsY19uYW1lKCkge1xuICAgICAgICByZXR1cm4gXCJDaGFyYWN0ZXJUZXh0U3BsaXR0ZXJcIjtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoZmllbGRzKSB7XG4gICAgICAgIHN1cGVyKGZpZWxkcyk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInNlcGFyYXRvclwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogXCJcXG5cXG5cIlxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5zZXBhcmF0b3IgPSBmaWVsZHM/LnNlcGFyYXRvciA/PyB0aGlzLnNlcGFyYXRvcjtcbiAgICB9XG4gICAgYXN5bmMgc3BsaXRUZXh0KHRleHQpIHtcbiAgICAgICAgLy8gRmlyc3Qgd2UgbmFpdmVseSBzcGxpdCB0aGUgbGFyZ2UgaW5wdXQgaW50byBhIGJ1bmNoIG9mIHNtYWxsZXIgb25lcy5cbiAgICAgICAgY29uc3Qgc3BsaXRzID0gdGhpcy5zcGxpdE9uU2VwYXJhdG9yKHRleHQsIHRoaXMuc2VwYXJhdG9yKTtcbiAgICAgICAgcmV0dXJuIHRoaXMubWVyZ2VTcGxpdHMoc3BsaXRzLCB0aGlzLmtlZXBTZXBhcmF0b3IgPyBcIlwiIDogdGhpcy5zZXBhcmF0b3IpO1xuICAgIH1cbn1cbmV4cG9ydCBjb25zdCBTdXBwb3J0ZWRUZXh0U3BsaXR0ZXJMYW5ndWFnZXMgPSBbXG4gICAgXCJjcHBcIixcbiAgICBcImdvXCIsXG4gICAgXCJqYXZhXCIsXG4gICAgXCJqc1wiLFxuICAgIFwicGhwXCIsXG4gICAgXCJwcm90b1wiLFxuICAgIFwicHl0aG9uXCIsXG4gICAgXCJyc3RcIixcbiAgICBcInJ1YnlcIixcbiAgICBcInJ1c3RcIixcbiAgICBcInNjYWxhXCIsXG4gICAgXCJzd2lmdFwiLFxuICAgIFwibWFya2Rvd25cIixcbiAgICBcImxhdGV4XCIsXG4gICAgXCJodG1sXCIsXG4gICAgXCJzb2xcIixcbl07XG5leHBvcnQgY2xhc3MgUmVjdXJzaXZlQ2hhcmFjdGVyVGV4dFNwbGl0dGVyIGV4dGVuZHMgVGV4dFNwbGl0dGVyIHtcbiAgICBzdGF0aWMgbGNfbmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIFwiUmVjdXJzaXZlQ2hhcmFjdGVyVGV4dFNwbGl0dGVyXCI7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKGZpZWxkcykge1xuICAgICAgICBzdXBlcihmaWVsZHMpO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJzZXBhcmF0b3JzXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiBbXCJcXG5cXG5cIiwgXCJcXG5cIiwgXCIgXCIsIFwiXCJdXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnNlcGFyYXRvcnMgPSBmaWVsZHM/LnNlcGFyYXRvcnMgPz8gdGhpcy5zZXBhcmF0b3JzO1xuICAgICAgICB0aGlzLmtlZXBTZXBhcmF0b3IgPSBmaWVsZHM/LmtlZXBTZXBhcmF0b3IgPz8gdHJ1ZTtcbiAgICB9XG4gICAgYXN5bmMgX3NwbGl0VGV4dCh0ZXh0LCBzZXBhcmF0b3JzKSB7XG4gICAgICAgIGNvbnN0IGZpbmFsQ2h1bmtzID0gW107XG4gICAgICAgIC8vIEdldCBhcHByb3ByaWF0ZSBzZXBhcmF0b3IgdG8gdXNlXG4gICAgICAgIGxldCBzZXBhcmF0b3IgPSBzZXBhcmF0b3JzW3NlcGFyYXRvcnMubGVuZ3RoIC0gMV07XG4gICAgICAgIGxldCBuZXdTZXBhcmF0b3JzO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNlcGFyYXRvcnMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgIGNvbnN0IHMgPSBzZXBhcmF0b3JzW2ldO1xuICAgICAgICAgICAgaWYgKHMgPT09IFwiXCIpIHtcbiAgICAgICAgICAgICAgICBzZXBhcmF0b3IgPSBzO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRleHQuaW5jbHVkZXMocykpIHtcbiAgICAgICAgICAgICAgICBzZXBhcmF0b3IgPSBzO1xuICAgICAgICAgICAgICAgIG5ld1NlcGFyYXRvcnMgPSBzZXBhcmF0b3JzLnNsaWNlKGkgKyAxKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBOb3cgdGhhdCB3ZSBoYXZlIHRoZSBzZXBhcmF0b3IsIHNwbGl0IHRoZSB0ZXh0XG4gICAgICAgIGNvbnN0IHNwbGl0cyA9IHRoaXMuc3BsaXRPblNlcGFyYXRvcih0ZXh0LCBzZXBhcmF0b3IpO1xuICAgICAgICAvLyBOb3cgZ28gbWVyZ2luZyB0aGluZ3MsIHJlY3Vyc2l2ZWx5IHNwbGl0dGluZyBsb25nZXIgdGV4dHMuXG4gICAgICAgIGxldCBnb29kU3BsaXRzID0gW107XG4gICAgICAgIGNvbnN0IF9zZXBhcmF0b3IgPSB0aGlzLmtlZXBTZXBhcmF0b3IgPyBcIlwiIDogc2VwYXJhdG9yO1xuICAgICAgICBmb3IgKGNvbnN0IHMgb2Ygc3BsaXRzKSB7XG4gICAgICAgICAgICBpZiAoKGF3YWl0IHRoaXMubGVuZ3RoRnVuY3Rpb24ocykpIDwgdGhpcy5jaHVua1NpemUpIHtcbiAgICAgICAgICAgICAgICBnb29kU3BsaXRzLnB1c2gocyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoZ29vZFNwbGl0cy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbWVyZ2VkVGV4dCA9IGF3YWl0IHRoaXMubWVyZ2VTcGxpdHMoZ29vZFNwbGl0cywgX3NlcGFyYXRvcik7XG4gICAgICAgICAgICAgICAgICAgIGZpbmFsQ2h1bmtzLnB1c2goLi4ubWVyZ2VkVGV4dCk7XG4gICAgICAgICAgICAgICAgICAgIGdvb2RTcGxpdHMgPSBbXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCFuZXdTZXBhcmF0b3JzKSB7XG4gICAgICAgICAgICAgICAgICAgIGZpbmFsQ2h1bmtzLnB1c2gocyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBvdGhlckluZm8gPSBhd2FpdCB0aGlzLl9zcGxpdFRleHQocywgbmV3U2VwYXJhdG9ycyk7XG4gICAgICAgICAgICAgICAgICAgIGZpbmFsQ2h1bmtzLnB1c2goLi4ub3RoZXJJbmZvKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGdvb2RTcGxpdHMubGVuZ3RoKSB7XG4gICAgICAgICAgICBjb25zdCBtZXJnZWRUZXh0ID0gYXdhaXQgdGhpcy5tZXJnZVNwbGl0cyhnb29kU3BsaXRzLCBfc2VwYXJhdG9yKTtcbiAgICAgICAgICAgIGZpbmFsQ2h1bmtzLnB1c2goLi4ubWVyZ2VkVGV4dCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZpbmFsQ2h1bmtzO1xuICAgIH1cbiAgICBhc3luYyBzcGxpdFRleHQodGV4dCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc3BsaXRUZXh0KHRleHQsIHRoaXMuc2VwYXJhdG9ycyk7XG4gICAgfVxuICAgIHN0YXRpYyBmcm9tTGFuZ3VhZ2UobGFuZ3VhZ2UsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBSZWN1cnNpdmVDaGFyYWN0ZXJUZXh0U3BsaXR0ZXIoe1xuICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAgIHNlcGFyYXRvcnM6IFJlY3Vyc2l2ZUNoYXJhY3RlclRleHRTcGxpdHRlci5nZXRTZXBhcmF0b3JzRm9yTGFuZ3VhZ2UobGFuZ3VhZ2UpLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgc3RhdGljIGdldFNlcGFyYXRvcnNGb3JMYW5ndWFnZShsYW5ndWFnZSkge1xuICAgICAgICBpZiAobGFuZ3VhZ2UgPT09IFwiY3BwXCIpIHtcbiAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAgLy8gU3BsaXQgYWxvbmcgY2xhc3MgZGVmaW5pdGlvbnNcbiAgICAgICAgICAgICAgICBcIlxcbmNsYXNzIFwiLFxuICAgICAgICAgICAgICAgIC8vIFNwbGl0IGFsb25nIGZ1bmN0aW9uIGRlZmluaXRpb25zXG4gICAgICAgICAgICAgICAgXCJcXG52b2lkIFwiLFxuICAgICAgICAgICAgICAgIFwiXFxuaW50IFwiLFxuICAgICAgICAgICAgICAgIFwiXFxuZmxvYXQgXCIsXG4gICAgICAgICAgICAgICAgXCJcXG5kb3VibGUgXCIsXG4gICAgICAgICAgICAgICAgLy8gU3BsaXQgYWxvbmcgY29udHJvbCBmbG93IHN0YXRlbWVudHNcbiAgICAgICAgICAgICAgICBcIlxcbmlmIFwiLFxuICAgICAgICAgICAgICAgIFwiXFxuZm9yIFwiLFxuICAgICAgICAgICAgICAgIFwiXFxud2hpbGUgXCIsXG4gICAgICAgICAgICAgICAgXCJcXG5zd2l0Y2ggXCIsXG4gICAgICAgICAgICAgICAgXCJcXG5jYXNlIFwiLFxuICAgICAgICAgICAgICAgIC8vIFNwbGl0IGJ5IHRoZSBub3JtYWwgdHlwZSBvZiBsaW5lc1xuICAgICAgICAgICAgICAgIFwiXFxuXFxuXCIsXG4gICAgICAgICAgICAgICAgXCJcXG5cIixcbiAgICAgICAgICAgICAgICBcIiBcIixcbiAgICAgICAgICAgICAgICBcIlwiLFxuICAgICAgICAgICAgXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChsYW5ndWFnZSA9PT0gXCJnb1wiKSB7XG4gICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgIC8vIFNwbGl0IGFsb25nIGZ1bmN0aW9uIGRlZmluaXRpb25zXG4gICAgICAgICAgICAgICAgXCJcXG5mdW5jIFwiLFxuICAgICAgICAgICAgICAgIFwiXFxudmFyIFwiLFxuICAgICAgICAgICAgICAgIFwiXFxuY29uc3QgXCIsXG4gICAgICAgICAgICAgICAgXCJcXG50eXBlIFwiLFxuICAgICAgICAgICAgICAgIC8vIFNwbGl0IGFsb25nIGNvbnRyb2wgZmxvdyBzdGF0ZW1lbnRzXG4gICAgICAgICAgICAgICAgXCJcXG5pZiBcIixcbiAgICAgICAgICAgICAgICBcIlxcbmZvciBcIixcbiAgICAgICAgICAgICAgICBcIlxcbnN3aXRjaCBcIixcbiAgICAgICAgICAgICAgICBcIlxcbmNhc2UgXCIsXG4gICAgICAgICAgICAgICAgLy8gU3BsaXQgYnkgdGhlIG5vcm1hbCB0eXBlIG9mIGxpbmVzXG4gICAgICAgICAgICAgICAgXCJcXG5cXG5cIixcbiAgICAgICAgICAgICAgICBcIlxcblwiLFxuICAgICAgICAgICAgICAgIFwiIFwiLFxuICAgICAgICAgICAgICAgIFwiXCIsXG4gICAgICAgICAgICBdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGxhbmd1YWdlID09PSBcImphdmFcIikge1xuICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICAvLyBTcGxpdCBhbG9uZyBjbGFzcyBkZWZpbml0aW9uc1xuICAgICAgICAgICAgICAgIFwiXFxuY2xhc3MgXCIsXG4gICAgICAgICAgICAgICAgLy8gU3BsaXQgYWxvbmcgbWV0aG9kIGRlZmluaXRpb25zXG4gICAgICAgICAgICAgICAgXCJcXG5wdWJsaWMgXCIsXG4gICAgICAgICAgICAgICAgXCJcXG5wcm90ZWN0ZWQgXCIsXG4gICAgICAgICAgICAgICAgXCJcXG5wcml2YXRlIFwiLFxuICAgICAgICAgICAgICAgIFwiXFxuc3RhdGljIFwiLFxuICAgICAgICAgICAgICAgIC8vIFNwbGl0IGFsb25nIGNvbnRyb2wgZmxvdyBzdGF0ZW1lbnRzXG4gICAgICAgICAgICAgICAgXCJcXG5pZiBcIixcbiAgICAgICAgICAgICAgICBcIlxcbmZvciBcIixcbiAgICAgICAgICAgICAgICBcIlxcbndoaWxlIFwiLFxuICAgICAgICAgICAgICAgIFwiXFxuc3dpdGNoIFwiLFxuICAgICAgICAgICAgICAgIFwiXFxuY2FzZSBcIixcbiAgICAgICAgICAgICAgICAvLyBTcGxpdCBieSB0aGUgbm9ybWFsIHR5cGUgb2YgbGluZXNcbiAgICAgICAgICAgICAgICBcIlxcblxcblwiLFxuICAgICAgICAgICAgICAgIFwiXFxuXCIsXG4gICAgICAgICAgICAgICAgXCIgXCIsXG4gICAgICAgICAgICAgICAgXCJcIixcbiAgICAgICAgICAgIF07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobGFuZ3VhZ2UgPT09IFwianNcIikge1xuICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICAvLyBTcGxpdCBhbG9uZyBmdW5jdGlvbiBkZWZpbml0aW9uc1xuICAgICAgICAgICAgICAgIFwiXFxuZnVuY3Rpb24gXCIsXG4gICAgICAgICAgICAgICAgXCJcXG5jb25zdCBcIixcbiAgICAgICAgICAgICAgICBcIlxcbmxldCBcIixcbiAgICAgICAgICAgICAgICBcIlxcbnZhciBcIixcbiAgICAgICAgICAgICAgICBcIlxcbmNsYXNzIFwiLFxuICAgICAgICAgICAgICAgIC8vIFNwbGl0IGFsb25nIGNvbnRyb2wgZmxvdyBzdGF0ZW1lbnRzXG4gICAgICAgICAgICAgICAgXCJcXG5pZiBcIixcbiAgICAgICAgICAgICAgICBcIlxcbmZvciBcIixcbiAgICAgICAgICAgICAgICBcIlxcbndoaWxlIFwiLFxuICAgICAgICAgICAgICAgIFwiXFxuc3dpdGNoIFwiLFxuICAgICAgICAgICAgICAgIFwiXFxuY2FzZSBcIixcbiAgICAgICAgICAgICAgICBcIlxcbmRlZmF1bHQgXCIsXG4gICAgICAgICAgICAgICAgLy8gU3BsaXQgYnkgdGhlIG5vcm1hbCB0eXBlIG9mIGxpbmVzXG4gICAgICAgICAgICAgICAgXCJcXG5cXG5cIixcbiAgICAgICAgICAgICAgICBcIlxcblwiLFxuICAgICAgICAgICAgICAgIFwiIFwiLFxuICAgICAgICAgICAgICAgIFwiXCIsXG4gICAgICAgICAgICBdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGxhbmd1YWdlID09PSBcInBocFwiKSB7XG4gICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgIC8vIFNwbGl0IGFsb25nIGZ1bmN0aW9uIGRlZmluaXRpb25zXG4gICAgICAgICAgICAgICAgXCJcXG5mdW5jdGlvbiBcIixcbiAgICAgICAgICAgICAgICAvLyBTcGxpdCBhbG9uZyBjbGFzcyBkZWZpbml0aW9uc1xuICAgICAgICAgICAgICAgIFwiXFxuY2xhc3MgXCIsXG4gICAgICAgICAgICAgICAgLy8gU3BsaXQgYWxvbmcgY29udHJvbCBmbG93IHN0YXRlbWVudHNcbiAgICAgICAgICAgICAgICBcIlxcbmlmIFwiLFxuICAgICAgICAgICAgICAgIFwiXFxuZm9yZWFjaCBcIixcbiAgICAgICAgICAgICAgICBcIlxcbndoaWxlIFwiLFxuICAgICAgICAgICAgICAgIFwiXFxuZG8gXCIsXG4gICAgICAgICAgICAgICAgXCJcXG5zd2l0Y2ggXCIsXG4gICAgICAgICAgICAgICAgXCJcXG5jYXNlIFwiLFxuICAgICAgICAgICAgICAgIC8vIFNwbGl0IGJ5IHRoZSBub3JtYWwgdHlwZSBvZiBsaW5lc1xuICAgICAgICAgICAgICAgIFwiXFxuXFxuXCIsXG4gICAgICAgICAgICAgICAgXCJcXG5cIixcbiAgICAgICAgICAgICAgICBcIiBcIixcbiAgICAgICAgICAgICAgICBcIlwiLFxuICAgICAgICAgICAgXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChsYW5ndWFnZSA9PT0gXCJwcm90b1wiKSB7XG4gICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgIC8vIFNwbGl0IGFsb25nIG1lc3NhZ2UgZGVmaW5pdGlvbnNcbiAgICAgICAgICAgICAgICBcIlxcbm1lc3NhZ2UgXCIsXG4gICAgICAgICAgICAgICAgLy8gU3BsaXQgYWxvbmcgc2VydmljZSBkZWZpbml0aW9uc1xuICAgICAgICAgICAgICAgIFwiXFxuc2VydmljZSBcIixcbiAgICAgICAgICAgICAgICAvLyBTcGxpdCBhbG9uZyBlbnVtIGRlZmluaXRpb25zXG4gICAgICAgICAgICAgICAgXCJcXG5lbnVtIFwiLFxuICAgICAgICAgICAgICAgIC8vIFNwbGl0IGFsb25nIG9wdGlvbiBkZWZpbml0aW9uc1xuICAgICAgICAgICAgICAgIFwiXFxub3B0aW9uIFwiLFxuICAgICAgICAgICAgICAgIC8vIFNwbGl0IGFsb25nIGltcG9ydCBzdGF0ZW1lbnRzXG4gICAgICAgICAgICAgICAgXCJcXG5pbXBvcnQgXCIsXG4gICAgICAgICAgICAgICAgLy8gU3BsaXQgYWxvbmcgc3ludGF4IGRlY2xhcmF0aW9uc1xuICAgICAgICAgICAgICAgIFwiXFxuc3ludGF4IFwiLFxuICAgICAgICAgICAgICAgIC8vIFNwbGl0IGJ5IHRoZSBub3JtYWwgdHlwZSBvZiBsaW5lc1xuICAgICAgICAgICAgICAgIFwiXFxuXFxuXCIsXG4gICAgICAgICAgICAgICAgXCJcXG5cIixcbiAgICAgICAgICAgICAgICBcIiBcIixcbiAgICAgICAgICAgICAgICBcIlwiLFxuICAgICAgICAgICAgXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChsYW5ndWFnZSA9PT0gXCJweXRob25cIikge1xuICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICAvLyBGaXJzdCwgdHJ5IHRvIHNwbGl0IGFsb25nIGNsYXNzIGRlZmluaXRpb25zXG4gICAgICAgICAgICAgICAgXCJcXG5jbGFzcyBcIixcbiAgICAgICAgICAgICAgICBcIlxcbmRlZiBcIixcbiAgICAgICAgICAgICAgICBcIlxcblxcdGRlZiBcIixcbiAgICAgICAgICAgICAgICAvLyBOb3cgc3BsaXQgYnkgdGhlIG5vcm1hbCB0eXBlIG9mIGxpbmVzXG4gICAgICAgICAgICAgICAgXCJcXG5cXG5cIixcbiAgICAgICAgICAgICAgICBcIlxcblwiLFxuICAgICAgICAgICAgICAgIFwiIFwiLFxuICAgICAgICAgICAgICAgIFwiXCIsXG4gICAgICAgICAgICBdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGxhbmd1YWdlID09PSBcInJzdFwiKSB7XG4gICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgIC8vIFNwbGl0IGFsb25nIHNlY3Rpb24gdGl0bGVzXG4gICAgICAgICAgICAgICAgXCJcXG49PT1cXG5cIixcbiAgICAgICAgICAgICAgICBcIlxcbi0tLVxcblwiLFxuICAgICAgICAgICAgICAgIFwiXFxuKioqXFxuXCIsXG4gICAgICAgICAgICAgICAgLy8gU3BsaXQgYWxvbmcgZGlyZWN0aXZlIG1hcmtlcnNcbiAgICAgICAgICAgICAgICBcIlxcbi4uIFwiLFxuICAgICAgICAgICAgICAgIC8vIFNwbGl0IGJ5IHRoZSBub3JtYWwgdHlwZSBvZiBsaW5lc1xuICAgICAgICAgICAgICAgIFwiXFxuXFxuXCIsXG4gICAgICAgICAgICAgICAgXCJcXG5cIixcbiAgICAgICAgICAgICAgICBcIiBcIixcbiAgICAgICAgICAgICAgICBcIlwiLFxuICAgICAgICAgICAgXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChsYW5ndWFnZSA9PT0gXCJydWJ5XCIpIHtcbiAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAgLy8gU3BsaXQgYWxvbmcgbWV0aG9kIGRlZmluaXRpb25zXG4gICAgICAgICAgICAgICAgXCJcXG5kZWYgXCIsXG4gICAgICAgICAgICAgICAgXCJcXG5jbGFzcyBcIixcbiAgICAgICAgICAgICAgICAvLyBTcGxpdCBhbG9uZyBjb250cm9sIGZsb3cgc3RhdGVtZW50c1xuICAgICAgICAgICAgICAgIFwiXFxuaWYgXCIsXG4gICAgICAgICAgICAgICAgXCJcXG51bmxlc3MgXCIsXG4gICAgICAgICAgICAgICAgXCJcXG53aGlsZSBcIixcbiAgICAgICAgICAgICAgICBcIlxcbmZvciBcIixcbiAgICAgICAgICAgICAgICBcIlxcbmRvIFwiLFxuICAgICAgICAgICAgICAgIFwiXFxuYmVnaW4gXCIsXG4gICAgICAgICAgICAgICAgXCJcXG5yZXNjdWUgXCIsXG4gICAgICAgICAgICAgICAgLy8gU3BsaXQgYnkgdGhlIG5vcm1hbCB0eXBlIG9mIGxpbmVzXG4gICAgICAgICAgICAgICAgXCJcXG5cXG5cIixcbiAgICAgICAgICAgICAgICBcIlxcblwiLFxuICAgICAgICAgICAgICAgIFwiIFwiLFxuICAgICAgICAgICAgICAgIFwiXCIsXG4gICAgICAgICAgICBdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGxhbmd1YWdlID09PSBcInJ1c3RcIikge1xuICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICAvLyBTcGxpdCBhbG9uZyBmdW5jdGlvbiBkZWZpbml0aW9uc1xuICAgICAgICAgICAgICAgIFwiXFxuZm4gXCIsXG4gICAgICAgICAgICAgICAgXCJcXG5jb25zdCBcIixcbiAgICAgICAgICAgICAgICBcIlxcbmxldCBcIixcbiAgICAgICAgICAgICAgICAvLyBTcGxpdCBhbG9uZyBjb250cm9sIGZsb3cgc3RhdGVtZW50c1xuICAgICAgICAgICAgICAgIFwiXFxuaWYgXCIsXG4gICAgICAgICAgICAgICAgXCJcXG53aGlsZSBcIixcbiAgICAgICAgICAgICAgICBcIlxcbmZvciBcIixcbiAgICAgICAgICAgICAgICBcIlxcbmxvb3AgXCIsXG4gICAgICAgICAgICAgICAgXCJcXG5tYXRjaCBcIixcbiAgICAgICAgICAgICAgICBcIlxcbmNvbnN0IFwiLFxuICAgICAgICAgICAgICAgIC8vIFNwbGl0IGJ5IHRoZSBub3JtYWwgdHlwZSBvZiBsaW5lc1xuICAgICAgICAgICAgICAgIFwiXFxuXFxuXCIsXG4gICAgICAgICAgICAgICAgXCJcXG5cIixcbiAgICAgICAgICAgICAgICBcIiBcIixcbiAgICAgICAgICAgICAgICBcIlwiLFxuICAgICAgICAgICAgXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChsYW5ndWFnZSA9PT0gXCJzY2FsYVwiKSB7XG4gICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgIC8vIFNwbGl0IGFsb25nIGNsYXNzIGRlZmluaXRpb25zXG4gICAgICAgICAgICAgICAgXCJcXG5jbGFzcyBcIixcbiAgICAgICAgICAgICAgICBcIlxcbm9iamVjdCBcIixcbiAgICAgICAgICAgICAgICAvLyBTcGxpdCBhbG9uZyBtZXRob2QgZGVmaW5pdGlvbnNcbiAgICAgICAgICAgICAgICBcIlxcbmRlZiBcIixcbiAgICAgICAgICAgICAgICBcIlxcbnZhbCBcIixcbiAgICAgICAgICAgICAgICBcIlxcbnZhciBcIixcbiAgICAgICAgICAgICAgICAvLyBTcGxpdCBhbG9uZyBjb250cm9sIGZsb3cgc3RhdGVtZW50c1xuICAgICAgICAgICAgICAgIFwiXFxuaWYgXCIsXG4gICAgICAgICAgICAgICAgXCJcXG5mb3IgXCIsXG4gICAgICAgICAgICAgICAgXCJcXG53aGlsZSBcIixcbiAgICAgICAgICAgICAgICBcIlxcbm1hdGNoIFwiLFxuICAgICAgICAgICAgICAgIFwiXFxuY2FzZSBcIixcbiAgICAgICAgICAgICAgICAvLyBTcGxpdCBieSB0aGUgbm9ybWFsIHR5cGUgb2YgbGluZXNcbiAgICAgICAgICAgICAgICBcIlxcblxcblwiLFxuICAgICAgICAgICAgICAgIFwiXFxuXCIsXG4gICAgICAgICAgICAgICAgXCIgXCIsXG4gICAgICAgICAgICAgICAgXCJcIixcbiAgICAgICAgICAgIF07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobGFuZ3VhZ2UgPT09IFwic3dpZnRcIikge1xuICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICAvLyBTcGxpdCBhbG9uZyBmdW5jdGlvbiBkZWZpbml0aW9uc1xuICAgICAgICAgICAgICAgIFwiXFxuZnVuYyBcIixcbiAgICAgICAgICAgICAgICAvLyBTcGxpdCBhbG9uZyBjbGFzcyBkZWZpbml0aW9uc1xuICAgICAgICAgICAgICAgIFwiXFxuY2xhc3MgXCIsXG4gICAgICAgICAgICAgICAgXCJcXG5zdHJ1Y3QgXCIsXG4gICAgICAgICAgICAgICAgXCJcXG5lbnVtIFwiLFxuICAgICAgICAgICAgICAgIC8vIFNwbGl0IGFsb25nIGNvbnRyb2wgZmxvdyBzdGF0ZW1lbnRzXG4gICAgICAgICAgICAgICAgXCJcXG5pZiBcIixcbiAgICAgICAgICAgICAgICBcIlxcbmZvciBcIixcbiAgICAgICAgICAgICAgICBcIlxcbndoaWxlIFwiLFxuICAgICAgICAgICAgICAgIFwiXFxuZG8gXCIsXG4gICAgICAgICAgICAgICAgXCJcXG5zd2l0Y2ggXCIsXG4gICAgICAgICAgICAgICAgXCJcXG5jYXNlIFwiLFxuICAgICAgICAgICAgICAgIC8vIFNwbGl0IGJ5IHRoZSBub3JtYWwgdHlwZSBvZiBsaW5lc1xuICAgICAgICAgICAgICAgIFwiXFxuXFxuXCIsXG4gICAgICAgICAgICAgICAgXCJcXG5cIixcbiAgICAgICAgICAgICAgICBcIiBcIixcbiAgICAgICAgICAgICAgICBcIlwiLFxuICAgICAgICAgICAgXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChsYW5ndWFnZSA9PT0gXCJtYXJrZG93blwiKSB7XG4gICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgIC8vIEZpcnN0LCB0cnkgdG8gc3BsaXQgYWxvbmcgTWFya2Rvd24gaGVhZGluZ3MgKHN0YXJ0aW5nIHdpdGggbGV2ZWwgMilcbiAgICAgICAgICAgICAgICBcIlxcbiMjIFwiLFxuICAgICAgICAgICAgICAgIFwiXFxuIyMjIFwiLFxuICAgICAgICAgICAgICAgIFwiXFxuIyMjIyBcIixcbiAgICAgICAgICAgICAgICBcIlxcbiMjIyMjIFwiLFxuICAgICAgICAgICAgICAgIFwiXFxuIyMjIyMjIFwiLFxuICAgICAgICAgICAgICAgIC8vIE5vdGUgdGhlIGFsdGVybmF0aXZlIHN5bnRheCBmb3IgaGVhZGluZ3MgKGJlbG93KSBpcyBub3QgaGFuZGxlZCBoZXJlXG4gICAgICAgICAgICAgICAgLy8gSGVhZGluZyBsZXZlbCAyXG4gICAgICAgICAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgICAgICAgICAgLy8gRW5kIG9mIGNvZGUgYmxvY2tcbiAgICAgICAgICAgICAgICBcImBgYFxcblxcblwiLFxuICAgICAgICAgICAgICAgIC8vIEhvcml6b250YWwgbGluZXNcbiAgICAgICAgICAgICAgICBcIlxcblxcbioqKlxcblxcblwiLFxuICAgICAgICAgICAgICAgIFwiXFxuXFxuLS0tXFxuXFxuXCIsXG4gICAgICAgICAgICAgICAgXCJcXG5cXG5fX19cXG5cXG5cIixcbiAgICAgICAgICAgICAgICAvLyBOb3RlIHRoYXQgdGhpcyBzcGxpdHRlciBkb2Vzbid0IGhhbmRsZSBob3Jpem9udGFsIGxpbmVzIGRlZmluZWRcbiAgICAgICAgICAgICAgICAvLyBieSAqdGhyZWUgb3IgbW9yZSogb2YgKioqLCAtLS0sIG9yIF9fXywgYnV0IHRoaXMgaXMgbm90IGhhbmRsZWRcbiAgICAgICAgICAgICAgICBcIlxcblxcblwiLFxuICAgICAgICAgICAgICAgIFwiXFxuXCIsXG4gICAgICAgICAgICAgICAgXCIgXCIsXG4gICAgICAgICAgICAgICAgXCJcIixcbiAgICAgICAgICAgIF07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobGFuZ3VhZ2UgPT09IFwibGF0ZXhcIikge1xuICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICAvLyBGaXJzdCwgdHJ5IHRvIHNwbGl0IGFsb25nIExhdGV4IHNlY3Rpb25zXG4gICAgICAgICAgICAgICAgXCJcXG5cXFxcY2hhcHRlcntcIixcbiAgICAgICAgICAgICAgICBcIlxcblxcXFxzZWN0aW9ue1wiLFxuICAgICAgICAgICAgICAgIFwiXFxuXFxcXHN1YnNlY3Rpb257XCIsXG4gICAgICAgICAgICAgICAgXCJcXG5cXFxcc3Vic3Vic2VjdGlvbntcIixcbiAgICAgICAgICAgICAgICAvLyBOb3cgc3BsaXQgYnkgZW52aXJvbm1lbnRzXG4gICAgICAgICAgICAgICAgXCJcXG5cXFxcYmVnaW57ZW51bWVyYXRlfVwiLFxuICAgICAgICAgICAgICAgIFwiXFxuXFxcXGJlZ2lue2l0ZW1pemV9XCIsXG4gICAgICAgICAgICAgICAgXCJcXG5cXFxcYmVnaW57ZGVzY3JpcHRpb259XCIsXG4gICAgICAgICAgICAgICAgXCJcXG5cXFxcYmVnaW57bGlzdH1cIixcbiAgICAgICAgICAgICAgICBcIlxcblxcXFxiZWdpbntxdW90ZX1cIixcbiAgICAgICAgICAgICAgICBcIlxcblxcXFxiZWdpbntxdW90YXRpb259XCIsXG4gICAgICAgICAgICAgICAgXCJcXG5cXFxcYmVnaW57dmVyc2V9XCIsXG4gICAgICAgICAgICAgICAgXCJcXG5cXFxcYmVnaW57dmVyYmF0aW19XCIsXG4gICAgICAgICAgICAgICAgLy8gTm93IHNwbGl0IGJ5IG1hdGggZW52aXJvbm1lbnRzXG4gICAgICAgICAgICAgICAgXCJcXG5cXFxcYmVnaW57YWxpZ259XCIsXG4gICAgICAgICAgICAgICAgXCIkJFwiLFxuICAgICAgICAgICAgICAgIFwiJFwiLFxuICAgICAgICAgICAgICAgIC8vIE5vdyBzcGxpdCBieSB0aGUgbm9ybWFsIHR5cGUgb2YgbGluZXNcbiAgICAgICAgICAgICAgICBcIlxcblxcblwiLFxuICAgICAgICAgICAgICAgIFwiXFxuXCIsXG4gICAgICAgICAgICAgICAgXCIgXCIsXG4gICAgICAgICAgICAgICAgXCJcIixcbiAgICAgICAgICAgIF07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobGFuZ3VhZ2UgPT09IFwiaHRtbFwiKSB7XG4gICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgIC8vIEZpcnN0LCB0cnkgdG8gc3BsaXQgYWxvbmcgSFRNTCB0YWdzXG4gICAgICAgICAgICAgICAgXCI8Ym9keT5cIixcbiAgICAgICAgICAgICAgICBcIjxkaXY+XCIsXG4gICAgICAgICAgICAgICAgXCI8cD5cIixcbiAgICAgICAgICAgICAgICBcIjxicj5cIixcbiAgICAgICAgICAgICAgICBcIjxsaT5cIixcbiAgICAgICAgICAgICAgICBcIjxoMT5cIixcbiAgICAgICAgICAgICAgICBcIjxoMj5cIixcbiAgICAgICAgICAgICAgICBcIjxoMz5cIixcbiAgICAgICAgICAgICAgICBcIjxoND5cIixcbiAgICAgICAgICAgICAgICBcIjxoNT5cIixcbiAgICAgICAgICAgICAgICBcIjxoNj5cIixcbiAgICAgICAgICAgICAgICBcIjxzcGFuPlwiLFxuICAgICAgICAgICAgICAgIFwiPHRhYmxlPlwiLFxuICAgICAgICAgICAgICAgIFwiPHRyPlwiLFxuICAgICAgICAgICAgICAgIFwiPHRkPlwiLFxuICAgICAgICAgICAgICAgIFwiPHRoPlwiLFxuICAgICAgICAgICAgICAgIFwiPHVsPlwiLFxuICAgICAgICAgICAgICAgIFwiPG9sPlwiLFxuICAgICAgICAgICAgICAgIFwiPGhlYWRlcj5cIixcbiAgICAgICAgICAgICAgICBcIjxmb290ZXI+XCIsXG4gICAgICAgICAgICAgICAgXCI8bmF2PlwiLFxuICAgICAgICAgICAgICAgIC8vIEhlYWRcbiAgICAgICAgICAgICAgICBcIjxoZWFkPlwiLFxuICAgICAgICAgICAgICAgIFwiPHN0eWxlPlwiLFxuICAgICAgICAgICAgICAgIFwiPHNjcmlwdD5cIixcbiAgICAgICAgICAgICAgICBcIjxtZXRhPlwiLFxuICAgICAgICAgICAgICAgIFwiPHRpdGxlPlwiLFxuICAgICAgICAgICAgICAgIC8vIE5vcm1hbCB0eXBlIG9mIGxpbmVzXG4gICAgICAgICAgICAgICAgXCIgXCIsXG4gICAgICAgICAgICAgICAgXCJcIixcbiAgICAgICAgICAgIF07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobGFuZ3VhZ2UgPT09IFwic29sXCIpIHtcbiAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAgLy8gU3BsaXQgYWxvbmcgY29tcGlsZXIgaW5mb3JtYXRpb25zIGRlZmluaXRpb25zXG4gICAgICAgICAgICAgICAgXCJcXG5wcmFnbWEgXCIsXG4gICAgICAgICAgICAgICAgXCJcXG51c2luZyBcIixcbiAgICAgICAgICAgICAgICAvLyBTcGxpdCBhbG9uZyBjb250cmFjdCBkZWZpbml0aW9uc1xuICAgICAgICAgICAgICAgIFwiXFxuY29udHJhY3QgXCIsXG4gICAgICAgICAgICAgICAgXCJcXG5pbnRlcmZhY2UgXCIsXG4gICAgICAgICAgICAgICAgXCJcXG5saWJyYXJ5IFwiLFxuICAgICAgICAgICAgICAgIC8vIFNwbGl0IGFsb25nIG1ldGhvZCBkZWZpbml0aW9uc1xuICAgICAgICAgICAgICAgIFwiXFxuY29uc3RydWN0b3IgXCIsXG4gICAgICAgICAgICAgICAgXCJcXG50eXBlIFwiLFxuICAgICAgICAgICAgICAgIFwiXFxuZnVuY3Rpb24gXCIsXG4gICAgICAgICAgICAgICAgXCJcXG5ldmVudCBcIixcbiAgICAgICAgICAgICAgICBcIlxcbm1vZGlmaWVyIFwiLFxuICAgICAgICAgICAgICAgIFwiXFxuZXJyb3IgXCIsXG4gICAgICAgICAgICAgICAgXCJcXG5zdHJ1Y3QgXCIsXG4gICAgICAgICAgICAgICAgXCJcXG5lbnVtIFwiLFxuICAgICAgICAgICAgICAgIC8vIFNwbGl0IGFsb25nIGNvbnRyb2wgZmxvdyBzdGF0ZW1lbnRzXG4gICAgICAgICAgICAgICAgXCJcXG5pZiBcIixcbiAgICAgICAgICAgICAgICBcIlxcbmZvciBcIixcbiAgICAgICAgICAgICAgICBcIlxcbndoaWxlIFwiLFxuICAgICAgICAgICAgICAgIFwiXFxuZG8gd2hpbGUgXCIsXG4gICAgICAgICAgICAgICAgXCJcXG5hc3NlbWJseSBcIixcbiAgICAgICAgICAgICAgICAvLyBTcGxpdCBieSB0aGUgbm9ybWFsIHR5cGUgb2YgbGluZXNcbiAgICAgICAgICAgICAgICBcIlxcblxcblwiLFxuICAgICAgICAgICAgICAgIFwiXFxuXCIsXG4gICAgICAgICAgICAgICAgXCIgXCIsXG4gICAgICAgICAgICAgICAgXCJcIixcbiAgICAgICAgICAgIF07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYExhbmd1YWdlICR7bGFuZ3VhZ2V9IGlzIG5vdCBzdXBwb3J0ZWQuYCk7XG4gICAgICAgIH1cbiAgICB9XG59XG4vKipcbiAqIEltcGxlbWVudGF0aW9uIG9mIHNwbGl0dGVyIHdoaWNoIGxvb2tzIGF0IHRva2Vucy5cbiAqL1xuZXhwb3J0IGNsYXNzIFRva2VuVGV4dFNwbGl0dGVyIGV4dGVuZHMgVGV4dFNwbGl0dGVyIHtcbiAgICBzdGF0aWMgbGNfbmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIFwiVG9rZW5UZXh0U3BsaXR0ZXJcIjtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoZmllbGRzKSB7XG4gICAgICAgIHN1cGVyKGZpZWxkcyk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImVuY29kaW5nTmFtZVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJhbGxvd2VkU3BlY2lhbFwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJkaXNhbGxvd2VkU3BlY2lhbFwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJ0b2tlbml6ZXJcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5lbmNvZGluZ05hbWUgPSBmaWVsZHM/LmVuY29kaW5nTmFtZSA/PyBcImdwdDJcIjtcbiAgICAgICAgdGhpcy5hbGxvd2VkU3BlY2lhbCA9IGZpZWxkcz8uYWxsb3dlZFNwZWNpYWwgPz8gW107XG4gICAgICAgIHRoaXMuZGlzYWxsb3dlZFNwZWNpYWwgPSBmaWVsZHM/LmRpc2FsbG93ZWRTcGVjaWFsID8/IFwiYWxsXCI7XG4gICAgfVxuICAgIGFzeW5jIHNwbGl0VGV4dCh0ZXh0KSB7XG4gICAgICAgIGlmICghdGhpcy50b2tlbml6ZXIpIHtcbiAgICAgICAgICAgIHRoaXMudG9rZW5pemVyID0gYXdhaXQgZ2V0RW5jb2RpbmcodGhpcy5lbmNvZGluZ05hbWUpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHNwbGl0cyA9IFtdO1xuICAgICAgICBjb25zdCBpbnB1dF9pZHMgPSB0aGlzLnRva2VuaXplci5lbmNvZGUodGV4dCwgdGhpcy5hbGxvd2VkU3BlY2lhbCwgdGhpcy5kaXNhbGxvd2VkU3BlY2lhbCk7XG4gICAgICAgIGxldCBzdGFydF9pZHggPSAwO1xuICAgICAgICBsZXQgY3VyX2lkeCA9IE1hdGgubWluKHN0YXJ0X2lkeCArIHRoaXMuY2h1bmtTaXplLCBpbnB1dF9pZHMubGVuZ3RoKTtcbiAgICAgICAgbGV0IGNodW5rX2lkcyA9IGlucHV0X2lkcy5zbGljZShzdGFydF9pZHgsIGN1cl9pZHgpO1xuICAgICAgICB3aGlsZSAoc3RhcnRfaWR4IDwgaW5wdXRfaWRzLmxlbmd0aCkge1xuICAgICAgICAgICAgc3BsaXRzLnB1c2godGhpcy50b2tlbml6ZXIuZGVjb2RlKGNodW5rX2lkcykpO1xuICAgICAgICAgICAgc3RhcnRfaWR4ICs9IHRoaXMuY2h1bmtTaXplIC0gdGhpcy5jaHVua092ZXJsYXA7XG4gICAgICAgICAgICBjdXJfaWR4ID0gTWF0aC5taW4oc3RhcnRfaWR4ICsgdGhpcy5jaHVua1NpemUsIGlucHV0X2lkcy5sZW5ndGgpO1xuICAgICAgICAgICAgY2h1bmtfaWRzID0gaW5wdXRfaWRzLnNsaWNlKHN0YXJ0X2lkeCwgY3VyX2lkeCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNwbGl0cztcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgTWFya2Rvd25UZXh0U3BsaXR0ZXIgZXh0ZW5kcyBSZWN1cnNpdmVDaGFyYWN0ZXJUZXh0U3BsaXR0ZXIge1xuICAgIGNvbnN0cnVjdG9yKGZpZWxkcykge1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICAuLi5maWVsZHMsXG4gICAgICAgICAgICBzZXBhcmF0b3JzOiBSZWN1cnNpdmVDaGFyYWN0ZXJUZXh0U3BsaXR0ZXIuZ2V0U2VwYXJhdG9yc0Zvckxhbmd1YWdlKFwibWFya2Rvd25cIiksXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBMYXRleFRleHRTcGxpdHRlciBleHRlbmRzIFJlY3Vyc2l2ZUNoYXJhY3RlclRleHRTcGxpdHRlciB7XG4gICAgY29uc3RydWN0b3IoZmllbGRzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIC4uLmZpZWxkcyxcbiAgICAgICAgICAgIHNlcGFyYXRvcnM6IFJlY3Vyc2l2ZUNoYXJhY3RlclRleHRTcGxpdHRlci5nZXRTZXBhcmF0b3JzRm9yTGFuZ3VhZ2UoXCJsYXRleFwiKSxcbiAgICAgICAgfSk7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbIkRvY3VtZW50IiwiZ2V0RW5jb2RpbmciLCJCYXNlRG9jdW1lbnRUcmFuc2Zvcm1lciIsIlRleHRTcGxpdHRlciIsImNvbnN0cnVjdG9yIiwiZmllbGRzIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJ2YWx1ZSIsImNodW5rU2l6ZSIsImNodW5rT3ZlcmxhcCIsImtlZXBTZXBhcmF0b3IiLCJsZW5ndGhGdW5jdGlvbiIsInRleHQiLCJsZW5ndGgiLCJFcnJvciIsInRyYW5zZm9ybURvY3VtZW50cyIsImRvY3VtZW50cyIsImNodW5rSGVhZGVyT3B0aW9ucyIsInNwbGl0RG9jdW1lbnRzIiwic3BsaXRPblNlcGFyYXRvciIsInNlcGFyYXRvciIsInNwbGl0cyIsInJlZ2V4RXNjYXBlZFNlcGFyYXRvciIsInJlcGxhY2UiLCJzcGxpdCIsIlJlZ0V4cCIsImZpbHRlciIsInMiLCJjcmVhdGVEb2N1bWVudHMiLCJ0ZXh0cyIsIm1ldGFkYXRhcyIsIl9tZXRhZGF0YXMiLCJBcnJheSIsImZpbGwiLCJjaHVua0hlYWRlciIsImNodW5rT3ZlcmxhcEhlYWRlciIsImFwcGVuZENodW5rT3ZlcmxhcEhlYWRlciIsImkiLCJsaW5lQ291bnRlckluZGV4IiwicHJldkNodW5rIiwiY2h1bmsiLCJzcGxpdFRleHQiLCJwYWdlQ29udGVudCIsIm51bWJlck9mSW50ZXJtZWRpYXRlTmV3TGluZXMiLCJpbmRleENodW5rIiwiaW5kZXhPZiIsImluZGV4RW5kUHJldkNodW5rIiwicmVtb3ZlZE5ld2xpbmVzRnJvbVNwbGl0dGluZ1RleHQiLCJzbGljZSIsIm1hdGNoIiwibmV3TGluZXNDb3VudCIsImxvYyIsImxpbmVzIiwiZnJvbSIsInRvIiwibWV0YWRhdGFXaXRoTGluZXNOdW1iZXIiLCJwdXNoIiwibWV0YWRhdGEiLCJzZWxlY3RlZERvY3VtZW50cyIsImRvYyIsInVuZGVmaW5lZCIsIm1hcCIsImpvaW5Eb2NzIiwiZG9jcyIsImpvaW4iLCJ0cmltIiwibWVyZ2VTcGxpdHMiLCJjdXJyZW50RG9jIiwidG90YWwiLCJkIiwiX2xlbiIsImNvbnNvbGUiLCJ3YXJuIiwic2hpZnQiLCJDaGFyYWN0ZXJUZXh0U3BsaXR0ZXIiLCJsY19uYW1lIiwiU3VwcG9ydGVkVGV4dFNwbGl0dGVyTGFuZ3VhZ2VzIiwiUmVjdXJzaXZlQ2hhcmFjdGVyVGV4dFNwbGl0dGVyIiwic2VwYXJhdG9ycyIsIl9zcGxpdFRleHQiLCJmaW5hbENodW5rcyIsIm5ld1NlcGFyYXRvcnMiLCJpbmNsdWRlcyIsImdvb2RTcGxpdHMiLCJfc2VwYXJhdG9yIiwibWVyZ2VkVGV4dCIsIm90aGVySW5mbyIsImZyb21MYW5ndWFnZSIsImxhbmd1YWdlIiwib3B0aW9ucyIsImdldFNlcGFyYXRvcnNGb3JMYW5ndWFnZSIsIlRva2VuVGV4dFNwbGl0dGVyIiwiZW5jb2RpbmdOYW1lIiwiYWxsb3dlZFNwZWNpYWwiLCJkaXNhbGxvd2VkU3BlY2lhbCIsInRva2VuaXplciIsImlucHV0X2lkcyIsImVuY29kZSIsInN0YXJ0X2lkeCIsImN1cl9pZHgiLCJNYXRoIiwibWluIiwiY2h1bmtfaWRzIiwiZGVjb2RlIiwiTWFya2Rvd25UZXh0U3BsaXR0ZXIiLCJMYXRleFRleHRTcGxpdHRlciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/text_splitter.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/util/async_caller.js":
/*!**********************************************************!*\
  !*** ./node_modules/langchain/dist/util/async_caller.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AsyncCaller: () => (/* binding */ AsyncCaller)\n/* harmony export */ });\n/* harmony import */ var p_retry__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! p-retry */ \"(rsc)/./node_modules/p-retry/index.js\");\n/* harmony import */ var p_queue__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! p-queue */ \"(rsc)/./node_modules/p-queue/dist/index.js\");\n\n\nconst STATUS_NO_RETRY = [\n    400,\n    401,\n    402,\n    403,\n    404,\n    405,\n    406,\n    407,\n    408,\n    409\n];\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst defaultFailedAttemptHandler = (error)=>{\n    if (error.message.startsWith(\"Cancel\") || error.message.startsWith(\"TimeoutError\") || error.name === \"TimeoutError\" || error.message.startsWith(\"AbortError\") || error.name === \"AbortError\") {\n        throw error;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    if (error?.code === \"ECONNABORTED\") {\n        throw error;\n    }\n    const status = // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    error?.response?.status ?? error?.status;\n    if (status && STATUS_NO_RETRY.includes(+status)) {\n        throw error;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    if (error?.error?.code === \"insufficient_quota\") {\n        const err = new Error(error?.message);\n        err.name = \"InsufficientQuotaError\";\n        throw err;\n    }\n};\n/**\n * A class that can be used to make async calls with concurrency and retry logic.\n *\n * This is useful for making calls to any kind of \"expensive\" external resource,\n * be it because it's rate-limited, subject to network issues, etc.\n *\n * Concurrent calls are limited by the `maxConcurrency` parameter, which defaults\n * to `Infinity`. This means that by default, all calls will be made in parallel.\n *\n * Retries are limited by the `maxRetries` parameter, which defaults to 6. This\n * means that by default, each call will be retried up to 6 times, with an\n * exponential backoff between each attempt.\n */ class AsyncCaller {\n    constructor(params){\n        Object.defineProperty(this, \"maxConcurrency\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"maxRetries\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"onFailedAttempt\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"queue\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.maxConcurrency = params.maxConcurrency ?? Infinity;\n        this.maxRetries = params.maxRetries ?? 6;\n        this.onFailedAttempt = params.onFailedAttempt ?? defaultFailedAttemptHandler;\n        const PQueue =  true ? p_queue__WEBPACK_IMPORTED_MODULE_1__[\"default\"] : p_queue__WEBPACK_IMPORTED_MODULE_1__;\n        this.queue = new PQueue({\n            concurrency: this.maxConcurrency\n        });\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    call(callable, ...args) {\n        return this.queue.add(()=>p_retry__WEBPACK_IMPORTED_MODULE_0__(()=>callable(...args).catch((error)=>{\n                    // eslint-disable-next-line no-instanceof/no-instanceof\n                    if (error instanceof Error) {\n                        throw error;\n                    } else {\n                        throw new Error(error);\n                    }\n                }), {\n                onFailedAttempt: this.onFailedAttempt,\n                retries: this.maxRetries,\n                randomize: true\n            }), {\n            throwOnTimeout: true\n        });\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    callWithOptions(options, callable, ...args) {\n        // Note this doesn't cancel the underlying request,\n        // when available prefer to use the signal option of the underlying call\n        if (options.signal) {\n            return Promise.race([\n                this.call(callable, ...args),\n                new Promise((_, reject)=>{\n                    options.signal?.addEventListener(\"abort\", ()=>{\n                        reject(new Error(\"AbortError\"));\n                    });\n                })\n            ]);\n        }\n        return this.call(callable, ...args);\n    }\n    fetch(...args) {\n        return this.call(()=>fetch(...args).then((res)=>res.ok ? res : Promise.reject(res)));\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/util/async_caller.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/util/azure.js":
/*!***************************************************!*\
  !*** ./node_modules/langchain/dist/util/azure.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getEndpoint: () => (/* binding */ getEndpoint)\n/* harmony export */ });\n/**\n * This function generates an endpoint URL for (Azure) OpenAI\n * based on the configuration parameters provided.\n *\n * @param {OpenAIEndpointConfig} config - The configuration object for the (Azure) endpoint.\n *\n * @property {string} config.azureOpenAIApiDeploymentName - The deployment name of Azure OpenAI.\n * @property {string} config.azureOpenAIApiInstanceName - The instance name of Azure OpenAI.\n * @property {string} config.azureOpenAIApiKey - The API Key for Azure OpenAI.\n * @property {string} config.azureOpenAIBasePath - The base path for Azure OpenAI.\n * @property {string} config.baseURL - Some other custom base path URL.\n *\n * The function operates as follows:\n * - If both `azureOpenAIBasePath` and `azureOpenAIApiDeploymentName` (plus `azureOpenAIApiKey`) are provided, it returns an URL combining these two parameters (`${azureOpenAIBasePath}/${azureOpenAIApiDeploymentName}`).\n * - If `azureOpenAIApiKey` is provided, it checks for `azureOpenAIApiInstanceName` and `azureOpenAIApiDeploymentName` and throws an error if any of these is missing. If both are provided, it generates an URL incorporating these parameters.\n * - If none of the above conditions are met, return any custom `baseURL`.\n * - The function returns the generated URL as a string, or undefined if no custom paths are specified.\n *\n * @throws Will throw an error if the necessary parameters for generating the URL are missing.\n *\n * @returns {string | undefined} The generated (Azure) OpenAI endpoint URL.\n */ function getEndpoint(config) {\n    const { azureOpenAIApiDeploymentName, azureOpenAIApiInstanceName, azureOpenAIApiKey, azureOpenAIBasePath, baseURL } = config;\n    if (azureOpenAIApiKey && azureOpenAIBasePath && azureOpenAIApiDeploymentName) {\n        return `${azureOpenAIBasePath}/${azureOpenAIApiDeploymentName}`;\n    }\n    if (azureOpenAIApiKey) {\n        if (!azureOpenAIApiInstanceName) {\n            throw new Error(\"azureOpenAIApiInstanceName is required when using azureOpenAIApiKey\");\n        }\n        if (!azureOpenAIApiDeploymentName) {\n            throw new Error(\"azureOpenAIApiDeploymentName is a required parameter when using azureOpenAIApiKey\");\n        }\n        return `https://${azureOpenAIApiInstanceName}.openai.azure.com/openai/deployments/${azureOpenAIApiDeploymentName}`;\n    }\n    return baseURL;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvdXRpbC9henVyZS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQXFCQyxHQUNNLFNBQVNBLFlBQVlDLE1BQU07SUFDOUIsTUFBTSxFQUFFQyw0QkFBNEIsRUFBRUMsMEJBQTBCLEVBQUVDLGlCQUFpQixFQUFFQyxtQkFBbUIsRUFBRUMsT0FBTyxFQUFHLEdBQUdMO0lBQ3ZILElBQUlHLHFCQUNBQyx1QkFDQUgsOEJBQThCO1FBQzlCLE9BQU8sQ0FBQyxFQUFFRyxvQkFBb0IsQ0FBQyxFQUFFSCw2QkFBNkIsQ0FBQztJQUNuRTtJQUNBLElBQUlFLG1CQUFtQjtRQUNuQixJQUFJLENBQUNELDRCQUE0QjtZQUM3QixNQUFNLElBQUlJLE1BQU07UUFDcEI7UUFDQSxJQUFJLENBQUNMLDhCQUE4QjtZQUMvQixNQUFNLElBQUlLLE1BQU07UUFDcEI7UUFDQSxPQUFPLENBQUMsUUFBUSxFQUFFSiwyQkFBMkIscUNBQXFDLEVBQUVELDZCQUE2QixDQUFDO0lBQ3RIO0lBQ0EsT0FBT0k7QUFDWCIsInNvdXJjZXMiOlsid2VicGFjazovL3F1aWxsLy4vbm9kZV9tb2R1bGVzL2xhbmdjaGFpbi9kaXN0L3V0aWwvYXp1cmUuanM/ZWNkMyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRoaXMgZnVuY3Rpb24gZ2VuZXJhdGVzIGFuIGVuZHBvaW50IFVSTCBmb3IgKEF6dXJlKSBPcGVuQUlcbiAqIGJhc2VkIG9uIHRoZSBjb25maWd1cmF0aW9uIHBhcmFtZXRlcnMgcHJvdmlkZWQuXG4gKlxuICogQHBhcmFtIHtPcGVuQUlFbmRwb2ludENvbmZpZ30gY29uZmlnIC0gVGhlIGNvbmZpZ3VyYXRpb24gb2JqZWN0IGZvciB0aGUgKEF6dXJlKSBlbmRwb2ludC5cbiAqXG4gKiBAcHJvcGVydHkge3N0cmluZ30gY29uZmlnLmF6dXJlT3BlbkFJQXBpRGVwbG95bWVudE5hbWUgLSBUaGUgZGVwbG95bWVudCBuYW1lIG9mIEF6dXJlIE9wZW5BSS5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBjb25maWcuYXp1cmVPcGVuQUlBcGlJbnN0YW5jZU5hbWUgLSBUaGUgaW5zdGFuY2UgbmFtZSBvZiBBenVyZSBPcGVuQUkuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gY29uZmlnLmF6dXJlT3BlbkFJQXBpS2V5IC0gVGhlIEFQSSBLZXkgZm9yIEF6dXJlIE9wZW5BSS5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBjb25maWcuYXp1cmVPcGVuQUlCYXNlUGF0aCAtIFRoZSBiYXNlIHBhdGggZm9yIEF6dXJlIE9wZW5BSS5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBjb25maWcuYmFzZVVSTCAtIFNvbWUgb3RoZXIgY3VzdG9tIGJhc2UgcGF0aCBVUkwuXG4gKlxuICogVGhlIGZ1bmN0aW9uIG9wZXJhdGVzIGFzIGZvbGxvd3M6XG4gKiAtIElmIGJvdGggYGF6dXJlT3BlbkFJQmFzZVBhdGhgIGFuZCBgYXp1cmVPcGVuQUlBcGlEZXBsb3ltZW50TmFtZWAgKHBsdXMgYGF6dXJlT3BlbkFJQXBpS2V5YCkgYXJlIHByb3ZpZGVkLCBpdCByZXR1cm5zIGFuIFVSTCBjb21iaW5pbmcgdGhlc2UgdHdvIHBhcmFtZXRlcnMgKGAke2F6dXJlT3BlbkFJQmFzZVBhdGh9LyR7YXp1cmVPcGVuQUlBcGlEZXBsb3ltZW50TmFtZX1gKS5cbiAqIC0gSWYgYGF6dXJlT3BlbkFJQXBpS2V5YCBpcyBwcm92aWRlZCwgaXQgY2hlY2tzIGZvciBgYXp1cmVPcGVuQUlBcGlJbnN0YW5jZU5hbWVgIGFuZCBgYXp1cmVPcGVuQUlBcGlEZXBsb3ltZW50TmFtZWAgYW5kIHRocm93cyBhbiBlcnJvciBpZiBhbnkgb2YgdGhlc2UgaXMgbWlzc2luZy4gSWYgYm90aCBhcmUgcHJvdmlkZWQsIGl0IGdlbmVyYXRlcyBhbiBVUkwgaW5jb3Jwb3JhdGluZyB0aGVzZSBwYXJhbWV0ZXJzLlxuICogLSBJZiBub25lIG9mIHRoZSBhYm92ZSBjb25kaXRpb25zIGFyZSBtZXQsIHJldHVybiBhbnkgY3VzdG9tIGBiYXNlVVJMYC5cbiAqIC0gVGhlIGZ1bmN0aW9uIHJldHVybnMgdGhlIGdlbmVyYXRlZCBVUkwgYXMgYSBzdHJpbmcsIG9yIHVuZGVmaW5lZCBpZiBubyBjdXN0b20gcGF0aHMgYXJlIHNwZWNpZmllZC5cbiAqXG4gKiBAdGhyb3dzIFdpbGwgdGhyb3cgYW4gZXJyb3IgaWYgdGhlIG5lY2Vzc2FyeSBwYXJhbWV0ZXJzIGZvciBnZW5lcmF0aW5nIHRoZSBVUkwgYXJlIG1pc3NpbmcuXG4gKlxuICogQHJldHVybnMge3N0cmluZyB8IHVuZGVmaW5lZH0gVGhlIGdlbmVyYXRlZCAoQXp1cmUpIE9wZW5BSSBlbmRwb2ludCBVUkwuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRFbmRwb2ludChjb25maWcpIHtcbiAgICBjb25zdCB7IGF6dXJlT3BlbkFJQXBpRGVwbG95bWVudE5hbWUsIGF6dXJlT3BlbkFJQXBpSW5zdGFuY2VOYW1lLCBhenVyZU9wZW5BSUFwaUtleSwgYXp1cmVPcGVuQUlCYXNlUGF0aCwgYmFzZVVSTCwgfSA9IGNvbmZpZztcbiAgICBpZiAoYXp1cmVPcGVuQUlBcGlLZXkgJiZcbiAgICAgICAgYXp1cmVPcGVuQUlCYXNlUGF0aCAmJlxuICAgICAgICBhenVyZU9wZW5BSUFwaURlcGxveW1lbnROYW1lKSB7XG4gICAgICAgIHJldHVybiBgJHthenVyZU9wZW5BSUJhc2VQYXRofS8ke2F6dXJlT3BlbkFJQXBpRGVwbG95bWVudE5hbWV9YDtcbiAgICB9XG4gICAgaWYgKGF6dXJlT3BlbkFJQXBpS2V5KSB7XG4gICAgICAgIGlmICghYXp1cmVPcGVuQUlBcGlJbnN0YW5jZU5hbWUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImF6dXJlT3BlbkFJQXBpSW5zdGFuY2VOYW1lIGlzIHJlcXVpcmVkIHdoZW4gdXNpbmcgYXp1cmVPcGVuQUlBcGlLZXlcIik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFhenVyZU9wZW5BSUFwaURlcGxveW1lbnROYW1lKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJhenVyZU9wZW5BSUFwaURlcGxveW1lbnROYW1lIGlzIGEgcmVxdWlyZWQgcGFyYW1ldGVyIHdoZW4gdXNpbmcgYXp1cmVPcGVuQUlBcGlLZXlcIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGBodHRwczovLyR7YXp1cmVPcGVuQUlBcGlJbnN0YW5jZU5hbWV9Lm9wZW5haS5henVyZS5jb20vb3BlbmFpL2RlcGxveW1lbnRzLyR7YXp1cmVPcGVuQUlBcGlEZXBsb3ltZW50TmFtZX1gO1xuICAgIH1cbiAgICByZXR1cm4gYmFzZVVSTDtcbn1cbiJdLCJuYW1lcyI6WyJnZXRFbmRwb2ludCIsImNvbmZpZyIsImF6dXJlT3BlbkFJQXBpRGVwbG95bWVudE5hbWUiLCJhenVyZU9wZW5BSUFwaUluc3RhbmNlTmFtZSIsImF6dXJlT3BlbkFJQXBpS2V5IiwiYXp1cmVPcGVuQUlCYXNlUGF0aCIsImJhc2VVUkwiLCJFcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/util/azure.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/util/chunk.js":
/*!***************************************************!*\
  !*** ./node_modules/langchain/dist/util/chunk.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   chunkArray: () => (/* binding */ chunkArray)\n/* harmony export */ });\nconst chunkArray = (arr, chunkSize)=>arr.reduce((chunks, elem, index)=>{\n        const chunkIndex = Math.floor(index / chunkSize);\n        const chunk = chunks[chunkIndex] || [];\n        // eslint-disable-next-line no-param-reassign\n        chunks[chunkIndex] = chunk.concat([\n            elem\n        ]);\n        return chunks;\n    }, []);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvdXRpbC9jaHVuay5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU8sTUFBTUEsYUFBYSxDQUFDQyxLQUFLQyxZQUFjRCxJQUFJRSxNQUFNLENBQUMsQ0FBQ0MsUUFBUUMsTUFBTUM7UUFDcEUsTUFBTUMsYUFBYUMsS0FBS0MsS0FBSyxDQUFDSCxRQUFRSjtRQUN0QyxNQUFNUSxRQUFRTixNQUFNLENBQUNHLFdBQVcsSUFBSSxFQUFFO1FBQ3RDLDZDQUE2QztRQUM3Q0gsTUFBTSxDQUFDRyxXQUFXLEdBQUdHLE1BQU1DLE1BQU0sQ0FBQztZQUFDTjtTQUFLO1FBQ3hDLE9BQU9EO0lBQ1gsR0FBRyxFQUFFLEVBQUUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9xdWlsbC8uL25vZGVfbW9kdWxlcy9sYW5nY2hhaW4vZGlzdC91dGlsL2NodW5rLmpzPzMzZTQiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IGNodW5rQXJyYXkgPSAoYXJyLCBjaHVua1NpemUpID0+IGFyci5yZWR1Y2UoKGNodW5rcywgZWxlbSwgaW5kZXgpID0+IHtcbiAgICBjb25zdCBjaHVua0luZGV4ID0gTWF0aC5mbG9vcihpbmRleCAvIGNodW5rU2l6ZSk7XG4gICAgY29uc3QgY2h1bmsgPSBjaHVua3NbY2h1bmtJbmRleF0gfHwgW107XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgY2h1bmtzW2NodW5rSW5kZXhdID0gY2h1bmsuY29uY2F0KFtlbGVtXSk7XG4gICAgcmV0dXJuIGNodW5rcztcbn0sIFtdKTtcbiJdLCJuYW1lcyI6WyJjaHVua0FycmF5IiwiYXJyIiwiY2h1bmtTaXplIiwicmVkdWNlIiwiY2h1bmtzIiwiZWxlbSIsImluZGV4IiwiY2h1bmtJbmRleCIsIk1hdGgiLCJmbG9vciIsImNodW5rIiwiY29uY2F0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/util/chunk.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/util/env.js":
/*!*************************************************!*\
  !*** ./node_modules/langchain/dist/util/env.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getEnv: () => (/* binding */ getEnv),\n/* harmony export */   getEnvironmentVariable: () => (/* binding */ getEnvironmentVariable),\n/* harmony export */   getRuntimeEnvironment: () => (/* binding */ getRuntimeEnvironment),\n/* harmony export */   isBrowser: () => (/* binding */ isBrowser),\n/* harmony export */   isDeno: () => (/* binding */ isDeno),\n/* harmony export */   isJsDom: () => (/* binding */ isJsDom),\n/* harmony export */   isNode: () => (/* binding */ isNode),\n/* harmony export */   isWebWorker: () => (/* binding */ isWebWorker)\n/* harmony export */ });\nconst isBrowser = ()=> false && 0;\nconst isWebWorker = ()=>typeof globalThis === \"object\" && globalThis.constructor && globalThis.constructor.name === \"DedicatedWorkerGlobalScope\";\nconst isJsDom = ()=> false || typeof navigator !== \"undefined\" && (navigator.userAgent.includes(\"Node.js\") || navigator.userAgent.includes(\"jsdom\"));\n// Supabase Edge Function provides a `Deno` global object\n// without `version` property\nconst isDeno = ()=>typeof Deno !== \"undefined\";\n// Mark not-as-node if in Supabase Edge Function\nconst isNode = ()=>typeof process !== \"undefined\" && typeof process.versions !== \"undefined\" && typeof process.versions.node !== \"undefined\" && !isDeno();\nconst getEnv = ()=>{\n    let env;\n    if (isBrowser()) {\n        env = \"browser\";\n    } else if (isNode()) {\n        env = \"node\";\n    } else if (isWebWorker()) {\n        env = \"webworker\";\n    } else if (isJsDom()) {\n        env = \"jsdom\";\n    } else if (isDeno()) {\n        env = \"deno\";\n    } else {\n        env = \"other\";\n    }\n    return env;\n};\nlet runtimeEnvironment;\nasync function getRuntimeEnvironment() {\n    if (runtimeEnvironment === undefined) {\n        const env = getEnv();\n        runtimeEnvironment = {\n            library: \"langchain-js\",\n            runtime: env\n        };\n    }\n    return runtimeEnvironment;\n}\nfunction getEnvironmentVariable(name) {\n    // Certain Deno setups will throw an error if you try to access environment variables\n    // https://github.com/hwchase17/langchainjs/issues/1412\n    try {\n        return typeof process !== \"undefined\" ? process.env?.[name] : undefined;\n    } catch (e) {\n        return undefined;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvdXRpbC9lbnYuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBTyxNQUFNQSxZQUFZLElBQU0sTUFBNkIsSUFBSSxDQUFzQyxDQUFDO0FBQ2hHLE1BQU1HLGNBQWMsSUFBTSxPQUFPQyxlQUFlLFlBQ25EQSxXQUFXQyxXQUFXLElBQ3RCRCxXQUFXQyxXQUFXLENBQUNDLElBQUksS0FBSyw2QkFBNkI7QUFDMUQsTUFBTUMsVUFBVSxJQUFNLE1BQTBELElBQ2xGLE9BQU9DLGNBQWMsZUFDakJBLENBQUFBLFVBQVVDLFNBQVMsQ0FBQ0MsUUFBUSxDQUFDLGNBQzFCRixVQUFVQyxTQUFTLENBQUNDLFFBQVEsQ0FBQyxRQUFPLEVBQUk7QUFDcEQseURBQXlEO0FBQ3pELDZCQUE2QjtBQUN0QixNQUFNQyxTQUFTLElBQU0sT0FBT0MsU0FBUyxZQUFZO0FBQ3hELGdEQUFnRDtBQUN6QyxNQUFNQyxTQUFTLElBQU0sT0FBT0MsWUFBWSxlQUMzQyxPQUFPQSxRQUFRQyxRQUFRLEtBQUssZUFDNUIsT0FBT0QsUUFBUUMsUUFBUSxDQUFDQyxJQUFJLEtBQUssZUFDakMsQ0FBQ0wsU0FBUztBQUNQLE1BQU1NLFNBQVM7SUFDbEIsSUFBSUM7SUFDSixJQUFJbEIsYUFBYTtRQUNia0IsTUFBTTtJQUNWLE9BQ0ssSUFBSUwsVUFBVTtRQUNmSyxNQUFNO0lBQ1YsT0FDSyxJQUFJZixlQUFlO1FBQ3BCZSxNQUFNO0lBQ1YsT0FDSyxJQUFJWCxXQUFXO1FBQ2hCVyxNQUFNO0lBQ1YsT0FDSyxJQUFJUCxVQUFVO1FBQ2ZPLE1BQU07SUFDVixPQUNLO1FBQ0RBLE1BQU07SUFDVjtJQUNBLE9BQU9BO0FBQ1gsRUFBRTtBQUNGLElBQUlDO0FBQ0csZUFBZUM7SUFDbEIsSUFBSUQsdUJBQXVCRSxXQUFXO1FBQ2xDLE1BQU1ILE1BQU1EO1FBQ1pFLHFCQUFxQjtZQUNqQkcsU0FBUztZQUNUQyxTQUFTTDtRQUNiO0lBQ0o7SUFDQSxPQUFPQztBQUNYO0FBQ08sU0FBU0ssdUJBQXVCbEIsSUFBSTtJQUN2QyxxRkFBcUY7SUFDckYsdURBQXVEO0lBQ3ZELElBQUk7UUFDQSxPQUFPLE9BQU9RLFlBQVksY0FFbEJBLFFBQVFJLEdBQUcsRUFBRSxDQUFDWixLQUFLLEdBQ3JCZTtJQUNWLEVBQ0EsT0FBT0ksR0FBRztRQUNOLE9BQU9KO0lBQ1g7QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL3F1aWxsLy4vbm9kZV9tb2R1bGVzL2xhbmdjaGFpbi9kaXN0L3V0aWwvZW52LmpzP2E2ODEiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IGlzQnJvd3NlciA9ICgpID0+IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgdHlwZW9mIHdpbmRvdy5kb2N1bWVudCAhPT0gXCJ1bmRlZmluZWRcIjtcbmV4cG9ydCBjb25zdCBpc1dlYldvcmtlciA9ICgpID0+IHR5cGVvZiBnbG9iYWxUaGlzID09PSBcIm9iamVjdFwiICYmXG4gICAgZ2xvYmFsVGhpcy5jb25zdHJ1Y3RvciAmJlxuICAgIGdsb2JhbFRoaXMuY29uc3RydWN0b3IubmFtZSA9PT0gXCJEZWRpY2F0ZWRXb3JrZXJHbG9iYWxTY29wZVwiO1xuZXhwb3J0IGNvbnN0IGlzSnNEb20gPSAoKSA9PiAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJiB3aW5kb3cubmFtZSA9PT0gXCJub2RlanNcIikgfHxcbiAgICAodHlwZW9mIG5hdmlnYXRvciAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuICAgICAgICAobmF2aWdhdG9yLnVzZXJBZ2VudC5pbmNsdWRlcyhcIk5vZGUuanNcIikgfHxcbiAgICAgICAgICAgIG5hdmlnYXRvci51c2VyQWdlbnQuaW5jbHVkZXMoXCJqc2RvbVwiKSkpO1xuLy8gU3VwYWJhc2UgRWRnZSBGdW5jdGlvbiBwcm92aWRlcyBhIGBEZW5vYCBnbG9iYWwgb2JqZWN0XG4vLyB3aXRob3V0IGB2ZXJzaW9uYCBwcm9wZXJ0eVxuZXhwb3J0IGNvbnN0IGlzRGVubyA9ICgpID0+IHR5cGVvZiBEZW5vICE9PSBcInVuZGVmaW5lZFwiO1xuLy8gTWFyayBub3QtYXMtbm9kZSBpZiBpbiBTdXBhYmFzZSBFZGdlIEZ1bmN0aW9uXG5leHBvcnQgY29uc3QgaXNOb2RlID0gKCkgPT4gdHlwZW9mIHByb2Nlc3MgIT09IFwidW5kZWZpbmVkXCIgJiZcbiAgICB0eXBlb2YgcHJvY2Vzcy52ZXJzaW9ucyAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuICAgIHR5cGVvZiBwcm9jZXNzLnZlcnNpb25zLm5vZGUgIT09IFwidW5kZWZpbmVkXCIgJiZcbiAgICAhaXNEZW5vKCk7XG5leHBvcnQgY29uc3QgZ2V0RW52ID0gKCkgPT4ge1xuICAgIGxldCBlbnY7XG4gICAgaWYgKGlzQnJvd3NlcigpKSB7XG4gICAgICAgIGVudiA9IFwiYnJvd3NlclwiO1xuICAgIH1cbiAgICBlbHNlIGlmIChpc05vZGUoKSkge1xuICAgICAgICBlbnYgPSBcIm5vZGVcIjtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNXZWJXb3JrZXIoKSkge1xuICAgICAgICBlbnYgPSBcIndlYndvcmtlclwiO1xuICAgIH1cbiAgICBlbHNlIGlmIChpc0pzRG9tKCkpIHtcbiAgICAgICAgZW52ID0gXCJqc2RvbVwiO1xuICAgIH1cbiAgICBlbHNlIGlmIChpc0Rlbm8oKSkge1xuICAgICAgICBlbnYgPSBcImRlbm9cIjtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGVudiA9IFwib3RoZXJcIjtcbiAgICB9XG4gICAgcmV0dXJuIGVudjtcbn07XG5sZXQgcnVudGltZUVudmlyb25tZW50O1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldFJ1bnRpbWVFbnZpcm9ubWVudCgpIHtcbiAgICBpZiAocnVudGltZUVudmlyb25tZW50ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY29uc3QgZW52ID0gZ2V0RW52KCk7XG4gICAgICAgIHJ1bnRpbWVFbnZpcm9ubWVudCA9IHtcbiAgICAgICAgICAgIGxpYnJhcnk6IFwibGFuZ2NoYWluLWpzXCIsXG4gICAgICAgICAgICBydW50aW1lOiBlbnYsXG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBydW50aW1lRW52aXJvbm1lbnQ7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0RW52aXJvbm1lbnRWYXJpYWJsZShuYW1lKSB7XG4gICAgLy8gQ2VydGFpbiBEZW5vIHNldHVwcyB3aWxsIHRocm93IGFuIGVycm9yIGlmIHlvdSB0cnkgdG8gYWNjZXNzIGVudmlyb25tZW50IHZhcmlhYmxlc1xuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9od2NoYXNlMTcvbGFuZ2NoYWluanMvaXNzdWVzLzE0MTJcbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gdHlwZW9mIHByb2Nlc3MgIT09IFwidW5kZWZpbmVkXCJcbiAgICAgICAgICAgID8gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb2Nlc3MtZW52XG4gICAgICAgICAgICAgICAgcHJvY2Vzcy5lbnY/LltuYW1lXVxuICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbImlzQnJvd3NlciIsIndpbmRvdyIsImRvY3VtZW50IiwiaXNXZWJXb3JrZXIiLCJnbG9iYWxUaGlzIiwiY29uc3RydWN0b3IiLCJuYW1lIiwiaXNKc0RvbSIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsImluY2x1ZGVzIiwiaXNEZW5vIiwiRGVubyIsImlzTm9kZSIsInByb2Nlc3MiLCJ2ZXJzaW9ucyIsIm5vZGUiLCJnZXRFbnYiLCJlbnYiLCJydW50aW1lRW52aXJvbm1lbnQiLCJnZXRSdW50aW1lRW52aXJvbm1lbnQiLCJ1bmRlZmluZWQiLCJsaWJyYXJ5IiwicnVudGltZSIsImdldEVudmlyb25tZW50VmFyaWFibGUiLCJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/util/env.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/util/openai.js":
/*!****************************************************!*\
  !*** ./node_modules/langchain/dist/util/openai.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   wrapOpenAIClientError: () => (/* binding */ wrapOpenAIClientError)\n/* harmony export */ });\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai */ \"(rsc)/./node_modules/langchain/node_modules/openai/index.mjs\");\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction wrapOpenAIClientError(e) {\n    let error;\n    if (e.constructor.name === openai__WEBPACK_IMPORTED_MODULE_0__.APIConnectionTimeoutError.name) {\n        error = new Error(e.message);\n        error.name = \"TimeoutError\";\n    } else if (e.constructor.name === openai__WEBPACK_IMPORTED_MODULE_0__.APIUserAbortError.name) {\n        error = new Error(e.message);\n        error.name = \"AbortError\";\n    } else {\n        error = e;\n    }\n    return error;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvdXRpbC9vcGVuYWkuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBc0U7QUFDdEUsOERBQThEO0FBQ3ZELFNBQVNFLHNCQUFzQkMsQ0FBQztJQUNuQyxJQUFJQztJQUNKLElBQUlELEVBQUVFLFdBQVcsQ0FBQ0MsSUFBSSxLQUFLTiw2REFBeUJBLENBQUNNLElBQUksRUFBRTtRQUN2REYsUUFBUSxJQUFJRyxNQUFNSixFQUFFSyxPQUFPO1FBQzNCSixNQUFNRSxJQUFJLEdBQUc7SUFDakIsT0FDSyxJQUFJSCxFQUFFRSxXQUFXLENBQUNDLElBQUksS0FBS0wscURBQWlCQSxDQUFDSyxJQUFJLEVBQUU7UUFDcERGLFFBQVEsSUFBSUcsTUFBTUosRUFBRUssT0FBTztRQUMzQkosTUFBTUUsSUFBSSxHQUFHO0lBQ2pCLE9BQ0s7UUFDREYsUUFBUUQ7SUFDWjtJQUNBLE9BQU9DO0FBQ1giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9xdWlsbC8uL25vZGVfbW9kdWxlcy9sYW5nY2hhaW4vZGlzdC91dGlsL29wZW5haS5qcz8yZjE1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFQSUNvbm5lY3Rpb25UaW1lb3V0RXJyb3IsIEFQSVVzZXJBYm9ydEVycm9yIH0gZnJvbSBcIm9wZW5haVwiO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbmV4cG9ydCBmdW5jdGlvbiB3cmFwT3BlbkFJQ2xpZW50RXJyb3IoZSkge1xuICAgIGxldCBlcnJvcjtcbiAgICBpZiAoZS5jb25zdHJ1Y3Rvci5uYW1lID09PSBBUElDb25uZWN0aW9uVGltZW91dEVycm9yLm5hbWUpIHtcbiAgICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoZS5tZXNzYWdlKTtcbiAgICAgICAgZXJyb3IubmFtZSA9IFwiVGltZW91dEVycm9yXCI7XG4gICAgfVxuICAgIGVsc2UgaWYgKGUuY29uc3RydWN0b3IubmFtZSA9PT0gQVBJVXNlckFib3J0RXJyb3IubmFtZSkge1xuICAgICAgICBlcnJvciA9IG5ldyBFcnJvcihlLm1lc3NhZ2UpO1xuICAgICAgICBlcnJvci5uYW1lID0gXCJBYm9ydEVycm9yXCI7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBlcnJvciA9IGU7XG4gICAgfVxuICAgIHJldHVybiBlcnJvcjtcbn1cbiJdLCJuYW1lcyI6WyJBUElDb25uZWN0aW9uVGltZW91dEVycm9yIiwiQVBJVXNlckFib3J0RXJyb3IiLCJ3cmFwT3BlbkFJQ2xpZW50RXJyb3IiLCJlIiwiZXJyb3IiLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJFcnJvciIsIm1lc3NhZ2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/util/openai.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/util/stream.js":
/*!****************************************************!*\
  !*** ./node_modules/langchain/dist/util/stream.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IterableReadableStream: () => (/* binding */ IterableReadableStream),\n/* harmony export */   readableStreamToAsyncIterable: () => (/* binding */ readableStreamToAsyncIterable)\n/* harmony export */ });\n/*\n * Support async iterator syntax for ReadableStreams in all environments.\n * Source: https://github.com/MattiasBuelens/web-streams-polyfill/pull/122#issuecomment-1627354490\n */ function readableStreamToAsyncIterable(// eslint-disable-next-line @typescript-eslint/no-explicit-any\nstream, preventCancel = false) {\n    if (stream[Symbol.asyncIterator]) {\n        return stream[Symbol.asyncIterator]();\n    }\n    const reader = stream.getReader();\n    return {\n        async next () {\n            try {\n                const result = await reader.read();\n                if (result.done) reader.releaseLock(); // release lock when stream becomes closed\n                return result;\n            } catch (e) {\n                reader.releaseLock(); // release lock when stream becomes errored\n                throw e;\n            }\n        },\n        async return () {\n            if (!preventCancel) {\n                const cancelPromise = reader.cancel(); // cancel first, but don't await yet\n                reader.releaseLock(); // release lock first\n                await cancelPromise; // now await it\n            } else {\n                reader.releaseLock();\n            }\n            return {\n                done: true,\n                value: undefined\n            };\n        },\n        [Symbol.asyncIterator] () {\n            return this;\n        }\n    };\n}\nclass IterableReadableStream extends ReadableStream {\n    constructor(){\n        super(...arguments);\n        Object.defineProperty(this, \"reader\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n    }\n    ensureReader() {\n        if (!this.reader) {\n            this.reader = this.getReader();\n        }\n    }\n    async next() {\n        this.ensureReader();\n        try {\n            const result = await this.reader.read();\n            if (result.done) this.reader.releaseLock(); // release lock when stream becomes closed\n            return result;\n        } catch (e) {\n            this.reader.releaseLock(); // release lock when stream becomes errored\n            throw e;\n        }\n    }\n    async return() {\n        this.ensureReader();\n        const cancelPromise = this.reader.cancel(); // cancel first, but don't await yet\n        this.reader.releaseLock(); // release lock first\n        await cancelPromise; // now await it\n        return {\n            done: true,\n            value: undefined\n        };\n    }\n    [Symbol.asyncIterator]() {\n        return this;\n    }\n    static fromReadableStream(stream) {\n        // From https://developer.mozilla.org/en-US/docs/Web/API/Streams_API/Using_readable_streams#reading_the_stream\n        const reader = stream.getReader();\n        return new IterableReadableStream({\n            start (controller) {\n                return pump();\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                function pump() {\n                    return reader.read().then(({ done, value })=>{\n                        // When no more data needs to be consumed, close the stream\n                        if (done) {\n                            controller.close();\n                            return;\n                        }\n                        // Enqueue the next data chunk into our target stream\n                        controller.enqueue(value);\n                        return pump();\n                    });\n                }\n            }\n        });\n    }\n    static fromAsyncGenerator(generator) {\n        return new IterableReadableStream({\n            async pull (controller) {\n                const { value, done } = await generator.next();\n                if (done) {\n                    controller.close();\n                } else if (value) {\n                    controller.enqueue(value);\n                }\n            }\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/util/stream.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/util/tiktoken.js":
/*!******************************************************!*\
  !*** ./node_modules/langchain/dist/util/tiktoken.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   encodingForModel: () => (/* binding */ encodingForModel),\n/* harmony export */   getEncoding: () => (/* binding */ getEncoding)\n/* harmony export */ });\n/* harmony import */ var js_tiktoken_lite__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! js-tiktoken/lite */ \"(rsc)/./node_modules/js-tiktoken/dist/lite.js\");\n/* harmony import */ var _async_caller_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./async_caller.js */ \"(rsc)/./node_modules/langchain/dist/util/async_caller.js\");\n\n\nconst cache = {};\nconst caller = /* #__PURE__ */ new _async_caller_js__WEBPACK_IMPORTED_MODULE_1__.AsyncCaller({});\nasync function getEncoding(encoding, options) {\n    if (!(encoding in cache)) {\n        cache[encoding] = caller.fetch(`https://tiktoken.pages.dev/js/${encoding}.json`, {\n            signal: options?.signal\n        }).then((res)=>res.json()).catch((e)=>{\n            delete cache[encoding];\n            throw e;\n        });\n    }\n    return new js_tiktoken_lite__WEBPACK_IMPORTED_MODULE_0__.Tiktoken(await cache[encoding], options?.extendedSpecialTokens);\n}\nasync function encodingForModel(model, options) {\n    return getEncoding((0,js_tiktoken_lite__WEBPACK_IMPORTED_MODULE_0__.getEncodingNameForModel)(model), options);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2Rpc3QvdXRpbC90aWt0b2tlbi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQXNFO0FBQ3RCO0FBQ2hELE1BQU1HLFFBQVEsQ0FBQztBQUNmLE1BQU1DLFNBQVMsYUFBYSxHQUFHLElBQUlGLHlEQUFXQSxDQUFDLENBQUM7QUFDekMsZUFBZUcsWUFBWUMsUUFBUSxFQUFFQyxPQUFPO0lBQy9DLElBQUksQ0FBRUQsQ0FBQUEsWUFBWUgsS0FBSSxHQUFJO1FBQ3RCQSxLQUFLLENBQUNHLFNBQVMsR0FBR0YsT0FDYkksS0FBSyxDQUFDLENBQUMsOEJBQThCLEVBQUVGLFNBQVMsS0FBSyxDQUFDLEVBQUU7WUFDekRHLFFBQVFGLFNBQVNFO1FBQ3JCLEdBQ0tDLElBQUksQ0FBQyxDQUFDQyxNQUFRQSxJQUFJQyxJQUFJLElBQ3RCQyxLQUFLLENBQUMsQ0FBQ0M7WUFDUixPQUFPWCxLQUFLLENBQUNHLFNBQVM7WUFDdEIsTUFBTVE7UUFDVjtJQUNKO0lBQ0EsT0FBTyxJQUFJZCxzREFBUUEsQ0FBQyxNQUFNRyxLQUFLLENBQUNHLFNBQVMsRUFBRUMsU0FBU1E7QUFDeEQ7QUFDTyxlQUFlQyxpQkFBaUJDLEtBQUssRUFBRVYsT0FBTztJQUNqRCxPQUFPRixZQUFZSix5RUFBdUJBLENBQUNnQixRQUFRVjtBQUN2RCIsInNvdXJjZXMiOlsid2VicGFjazovL3F1aWxsLy4vbm9kZV9tb2R1bGVzL2xhbmdjaGFpbi9kaXN0L3V0aWwvdGlrdG9rZW4uanM/OTJhMiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUaWt0b2tlbiwgZ2V0RW5jb2RpbmdOYW1lRm9yTW9kZWwsIH0gZnJvbSBcImpzLXRpa3Rva2VuL2xpdGVcIjtcbmltcG9ydCB7IEFzeW5jQ2FsbGVyIH0gZnJvbSBcIi4vYXN5bmNfY2FsbGVyLmpzXCI7XG5jb25zdCBjYWNoZSA9IHt9O1xuY29uc3QgY2FsbGVyID0gLyogI19fUFVSRV9fICovIG5ldyBBc3luY0NhbGxlcih7fSk7XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0RW5jb2RpbmcoZW5jb2RpbmcsIG9wdGlvbnMpIHtcbiAgICBpZiAoIShlbmNvZGluZyBpbiBjYWNoZSkpIHtcbiAgICAgICAgY2FjaGVbZW5jb2RpbmddID0gY2FsbGVyXG4gICAgICAgICAgICAuZmV0Y2goYGh0dHBzOi8vdGlrdG9rZW4ucGFnZXMuZGV2L2pzLyR7ZW5jb2Rpbmd9Lmpzb25gLCB7XG4gICAgICAgICAgICBzaWduYWw6IG9wdGlvbnM/LnNpZ25hbCxcbiAgICAgICAgfSlcbiAgICAgICAgICAgIC50aGVuKChyZXMpID0+IHJlcy5qc29uKCkpXG4gICAgICAgICAgICAuY2F0Y2goKGUpID0+IHtcbiAgICAgICAgICAgIGRlbGV0ZSBjYWNoZVtlbmNvZGluZ107XG4gICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBUaWt0b2tlbihhd2FpdCBjYWNoZVtlbmNvZGluZ10sIG9wdGlvbnM/LmV4dGVuZGVkU3BlY2lhbFRva2Vucyk7XG59XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZW5jb2RpbmdGb3JNb2RlbChtb2RlbCwgb3B0aW9ucykge1xuICAgIHJldHVybiBnZXRFbmNvZGluZyhnZXRFbmNvZGluZ05hbWVGb3JNb2RlbChtb2RlbCksIG9wdGlvbnMpO1xufVxuIl0sIm5hbWVzIjpbIlRpa3Rva2VuIiwiZ2V0RW5jb2RpbmdOYW1lRm9yTW9kZWwiLCJBc3luY0NhbGxlciIsImNhY2hlIiwiY2FsbGVyIiwiZ2V0RW5jb2RpbmciLCJlbmNvZGluZyIsIm9wdGlvbnMiLCJmZXRjaCIsInNpZ25hbCIsInRoZW4iLCJyZXMiLCJqc29uIiwiY2F0Y2giLCJlIiwiZXh0ZW5kZWRTcGVjaWFsVG9rZW5zIiwiZW5jb2RpbmdGb3JNb2RlbCIsIm1vZGVsIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/util/tiktoken.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/vectorstores/base.js":
/*!**********************************************************!*\
  !*** ./node_modules/langchain/dist/vectorstores/base.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SaveableVectorStore: () => (/* binding */ SaveableVectorStore),\n/* harmony export */   VectorStore: () => (/* binding */ VectorStore),\n/* harmony export */   VectorStoreRetriever: () => (/* binding */ VectorStoreRetriever)\n/* harmony export */ });\n/* harmony import */ var _schema_retriever_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../schema/retriever.js */ \"(rsc)/./node_modules/langchain/dist/schema/retriever.js\");\n/* harmony import */ var _load_serializable_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../load/serializable.js */ \"(rsc)/./node_modules/langchain/dist/load/serializable.js\");\n\n\n/**\n * Class for performing document retrieval from a VectorStore. Can perform\n * similarity search or maximal marginal relevance search.\n */ class VectorStoreRetriever extends _schema_retriever_js__WEBPACK_IMPORTED_MODULE_0__.BaseRetriever {\n    static lc_name() {\n        return \"VectorStoreRetriever\";\n    }\n    get lc_namespace() {\n        return [\n            \"langchain\",\n            \"retrievers\",\n            \"base\"\n        ];\n    }\n    _vectorstoreType() {\n        return this.vectorStore._vectorstoreType();\n    }\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"vectorStore\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"k\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 4\n        });\n        Object.defineProperty(this, \"searchType\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"similarity\"\n        });\n        Object.defineProperty(this, \"searchKwargs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"filter\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.vectorStore = fields.vectorStore;\n        this.k = fields.k ?? this.k;\n        this.searchType = fields.searchType ?? this.searchType;\n        this.filter = fields.filter;\n        if (fields.searchType === \"mmr\") {\n            this.searchKwargs = fields.searchKwargs;\n        }\n    }\n    async _getRelevantDocuments(query, runManager) {\n        if (this.searchType === \"mmr\") {\n            if (typeof this.vectorStore.maxMarginalRelevanceSearch !== \"function\") {\n                throw new Error(`The vector store backing this retriever, ${this._vectorstoreType()} does not support max marginal relevance search.`);\n            }\n            return this.vectorStore.maxMarginalRelevanceSearch(query, {\n                k: this.k,\n                filter: this.filter,\n                ...this.searchKwargs\n            }, runManager?.getChild(\"vectorstore\"));\n        }\n        return this.vectorStore.similaritySearch(query, this.k, this.filter, runManager?.getChild(\"vectorstore\"));\n    }\n    async addDocuments(documents, options) {\n        return this.vectorStore.addDocuments(documents, options);\n    }\n}\n/**\n * Abstract class representing a store of vectors. Provides methods for\n * adding vectors and documents, deleting from the store, and searching\n * the store.\n */ class VectorStore extends _load_serializable_js__WEBPACK_IMPORTED_MODULE_1__.Serializable {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    constructor(embeddings, dbConfig){\n        super(dbConfig);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain\",\n                \"vectorstores\",\n                this._vectorstoreType()\n            ]\n        });\n        Object.defineProperty(this, \"embeddings\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.embeddings = embeddings;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    async delete(_params) {\n        throw new Error(\"Not implemented.\");\n    }\n    async similaritySearch(query, k = 4, filter = undefined, _callbacks = undefined // implement passing to embedQuery later\n    ) {\n        const results = await this.similaritySearchVectorWithScore(await this.embeddings.embedQuery(query), k, filter);\n        return results.map((result)=>result[0]);\n    }\n    async similaritySearchWithScore(query, k = 4, filter = undefined, _callbacks = undefined // implement passing to embedQuery later\n    ) {\n        return this.similaritySearchVectorWithScore(await this.embeddings.embedQuery(query), k, filter);\n    }\n    static fromTexts(_texts, _metadatas, _embeddings, // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    _dbConfig) {\n        throw new Error(\"the Langchain vectorstore implementation you are using forgot to override this, please report a bug\");\n    }\n    static fromDocuments(_docs, _embeddings, // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    _dbConfig) {\n        throw new Error(\"the Langchain vectorstore implementation you are using forgot to override this, please report a bug\");\n    }\n    asRetriever(kOrFields, filter, callbacks, tags, metadata, verbose) {\n        if (typeof kOrFields === \"number\") {\n            return new VectorStoreRetriever({\n                vectorStore: this,\n                k: kOrFields,\n                filter,\n                tags: [\n                    ...tags ?? [],\n                    this._vectorstoreType()\n                ],\n                metadata,\n                verbose,\n                callbacks\n            });\n        } else {\n            const params = {\n                vectorStore: this,\n                k: kOrFields?.k,\n                filter: kOrFields?.filter,\n                tags: [\n                    ...kOrFields?.tags ?? [],\n                    this._vectorstoreType()\n                ],\n                metadata: kOrFields?.metadata,\n                verbose: kOrFields?.verbose,\n                callbacks: kOrFields?.callbacks,\n                searchType: kOrFields?.searchType\n            };\n            if (kOrFields?.searchType === \"mmr\") {\n                return new VectorStoreRetriever({\n                    ...params,\n                    searchKwargs: kOrFields.searchKwargs\n                });\n            }\n            return new VectorStoreRetriever({\n                ...params\n            });\n        }\n    }\n}\n/**\n * Abstract class extending VectorStore with functionality for saving and\n * loading the vector store.\n */ class SaveableVectorStore extends VectorStore {\n    static load(_directory, _embeddings) {\n        throw new Error(\"Not implemented\");\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/vectorstores/base.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/dist/vectorstores/pinecone.js":
/*!**************************************************************!*\
  !*** ./node_modules/langchain/dist/vectorstores/pinecone.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PineconeStore: () => (/* binding */ PineconeStore)\n/* harmony export */ });\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! uuid */ \"(rsc)/./node_modules/uuid/dist/esm-node/v4.js\");\n/* harmony import */ var flat__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! flat */ \"(rsc)/./node_modules/flat/index.js\");\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/langchain/dist/vectorstores/base.js\");\n/* harmony import */ var _document_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../document.js */ \"(rsc)/./node_modules/langchain/dist/document.js\");\n/* harmony import */ var _util_chunk_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/chunk.js */ \"(rsc)/./node_modules/langchain/dist/util/chunk.js\");\n/* harmony import */ var _util_async_caller_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util/async_caller.js */ \"(rsc)/./node_modules/langchain/dist/util/async_caller.js\");\n\n\n\n\n\n\n/**\n * Class that extends the VectorStore class and provides methods to\n * interact with the Pinecone vector database.\n */ class PineconeStore extends _base_js__WEBPACK_IMPORTED_MODULE_1__.VectorStore {\n    _vectorstoreType() {\n        return \"pinecone\";\n    }\n    constructor(embeddings, args){\n        super(embeddings, args);\n        Object.defineProperty(this, \"textKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"pineconeIndex\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"filter\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"caller\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.embeddings = embeddings;\n        const { namespace, pineconeIndex, textKey, filter, ...asyncCallerArgs } = args;\n        this.namespace = namespace;\n        this.pineconeIndex = pineconeIndex;\n        this.textKey = textKey ?? \"text\";\n        this.filter = filter;\n        this.caller = new _util_async_caller_js__WEBPACK_IMPORTED_MODULE_4__.AsyncCaller(asyncCallerArgs);\n    }\n    /**\n     * Method that adds documents to the Pinecone database.\n     * @param documents Array of documents to add to the Pinecone database.\n     * @param options Optional ids for the documents.\n     * @returns Promise that resolves with the ids of the added documents.\n     */ async addDocuments(documents, options) {\n        const texts = documents.map(({ pageContent })=>pageContent);\n        return this.addVectors(await this.embeddings.embedDocuments(texts), documents, options);\n    }\n    /**\n     * Method that adds vectors to the Pinecone database.\n     * @param vectors Array of vectors to add to the Pinecone database.\n     * @param documents Array of documents associated with the vectors.\n     * @param options Optional ids for the vectors.\n     * @returns Promise that resolves with the ids of the added vectors.\n     */ async addVectors(vectors, documents, options) {\n        const ids = Array.isArray(options) ? options : options?.ids;\n        const documentIds = ids == null ? documents.map(()=>uuid__WEBPACK_IMPORTED_MODULE_5__[\"default\"]()) : ids;\n        const pineconeVectors = vectors.map((values, idx)=>{\n            // Pinecone doesn't support nested objects, so we flatten them\n            const documentMetadata = {\n                ...documents[idx].metadata\n            };\n            // preserve string arrays which are allowed\n            const stringArrays = {};\n            for (const key of Object.keys(documentMetadata)){\n                if (Array.isArray(documentMetadata[key]) && // eslint-disable-next-line @typescript-eslint/ban-types, @typescript-eslint/no-explicit-any\n                documentMetadata[key].every((el)=>typeof el === \"string\")) {\n                    stringArrays[key] = documentMetadata[key];\n                    delete documentMetadata[key];\n                }\n            }\n            const metadata = {\n                ...flat__WEBPACK_IMPORTED_MODULE_0__(documentMetadata),\n                ...stringArrays,\n                [this.textKey]: documents[idx].pageContent\n            };\n            // Pinecone doesn't support null values, so we remove them\n            for (const key of Object.keys(metadata)){\n                if (metadata[key] == null) {\n                    delete metadata[key];\n                } else if (typeof metadata[key] === \"object\" && Object.keys(metadata[key]).length === 0) {\n                    delete metadata[key];\n                }\n            }\n            return {\n                id: documentIds[idx],\n                metadata,\n                values\n            };\n        });\n        // Pinecone recommends a limit of 100 vectors per upsert request\n        const chunkSize = 100;\n        const chunkedVectors = (0,_util_chunk_js__WEBPACK_IMPORTED_MODULE_3__.chunkArray)(pineconeVectors, chunkSize);\n        const batchRequests = chunkedVectors.map((chunk)=>this.caller.call(async ()=>this.pineconeIndex.upsert({\n                    upsertRequest: {\n                        vectors: chunk,\n                        namespace: this.namespace\n                    }\n                })));\n        await Promise.all(batchRequests);\n        return documentIds;\n    }\n    /**\n     * Method that deletes vectors from the Pinecone database.\n     * @param params Parameters for the delete operation.\n     * @returns Promise that resolves when the delete operation is complete.\n     */ async delete(params) {\n        const { namespace = this.namespace, deleteAll, ids, ...rest } = params;\n        if (deleteAll) {\n            await this.pineconeIndex.delete1({\n                deleteAll: true,\n                namespace,\n                ...rest\n            });\n        } else if (ids) {\n            const batchSize = 1000;\n            const batchedIds = (0,_util_chunk_js__WEBPACK_IMPORTED_MODULE_3__.chunkArray)(ids, batchSize);\n            const batchRequests = batchedIds.map((batchIds)=>this.caller.call(async ()=>this.pineconeIndex.delete1({\n                        ids: batchIds,\n                        namespace,\n                        ...rest\n                    })));\n            await Promise.all(batchRequests);\n        } else {\n            throw new Error(\"Either ids or delete_all must be provided.\");\n        }\n    }\n    /**\n     * Method that performs a similarity search in the Pinecone database and\n     * returns the results along with their scores.\n     * @param query Query vector for the similarity search.\n     * @param k Number of top results to return.\n     * @param filter Optional filter to apply to the search.\n     * @returns Promise that resolves with an array of documents and their scores.\n     */ async similaritySearchVectorWithScore(query, k, filter) {\n        if (filter && this.filter) {\n            throw new Error(\"cannot provide both `filter` and `this.filter`\");\n        }\n        const _filter = filter ?? this.filter;\n        const results = await this.pineconeIndex.query({\n            queryRequest: {\n                includeMetadata: true,\n                namespace: this.namespace,\n                topK: k,\n                vector: query,\n                filter: _filter\n            }\n        });\n        const result = [];\n        if (results.matches) {\n            for (const res of results.matches){\n                const { [this.textKey]: pageContent, ...metadata } = res.metadata ?? {};\n                if (res.score) {\n                    result.push([\n                        new _document_js__WEBPACK_IMPORTED_MODULE_2__.Document({\n                            metadata,\n                            pageContent\n                        }),\n                        res.score\n                    ]);\n                }\n            }\n        }\n        return result;\n    }\n    /**\n     * Static method that creates a new instance of the PineconeStore class\n     * from texts.\n     * @param texts Array of texts to add to the Pinecone database.\n     * @param metadatas Metadata associated with the texts.\n     * @param embeddings Embeddings to use for the texts.\n     * @param dbConfig Configuration for the Pinecone database.\n     * @returns Promise that resolves with a new instance of the PineconeStore class.\n     */ static async fromTexts(texts, metadatas, embeddings, dbConfig) {\n        const docs = [];\n        for(let i = 0; i < texts.length; i += 1){\n            const metadata = Array.isArray(metadatas) ? metadatas[i] : metadatas;\n            const newDoc = new _document_js__WEBPACK_IMPORTED_MODULE_2__.Document({\n                pageContent: texts[i],\n                metadata\n            });\n            docs.push(newDoc);\n        }\n        const args = {\n            pineconeIndex: \"pineconeIndex\" in dbConfig ? dbConfig.pineconeIndex : dbConfig.pineconeClient,\n            textKey: dbConfig.textKey,\n            namespace: dbConfig.namespace\n        };\n        return PineconeStore.fromDocuments(docs, embeddings, args);\n    }\n    /**\n     * Static method that creates a new instance of the PineconeStore class\n     * from documents.\n     * @param docs Array of documents to add to the Pinecone database.\n     * @param embeddings Embeddings to use for the documents.\n     * @param dbConfig Configuration for the Pinecone database.\n     * @returns Promise that resolves with a new instance of the PineconeStore class.\n     */ static async fromDocuments(docs, embeddings, dbConfig) {\n        const args = dbConfig;\n        args.textKey = dbConfig.textKey ?? \"text\";\n        const instance = new this(embeddings, args);\n        await instance.addDocuments(docs);\n        return instance;\n    }\n    /**\n     * Static method that creates a new instance of the PineconeStore class\n     * from an existing index.\n     * @param embeddings Embeddings to use for the documents.\n     * @param dbConfig Configuration for the Pinecone database.\n     * @returns Promise that resolves with a new instance of the PineconeStore class.\n     */ static async fromExistingIndex(embeddings, dbConfig) {\n        const instance = new this(embeddings, dbConfig);\n        return instance;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/dist/vectorstores/pinecone.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/document_loaders/fs/pdf.js":
/*!***********************************************************!*\
  !*** ./node_modules/langchain/document_loaders/fs/pdf.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PDFLoader: () => (/* reexport safe */ _dist_document_loaders_fs_pdf_js__WEBPACK_IMPORTED_MODULE_0__.PDFLoader)\n/* harmony export */ });\n/* harmony import */ var _dist_document_loaders_fs_pdf_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../dist/document_loaders/fs/pdf.js */ \"(rsc)/./node_modules/langchain/dist/document_loaders/fs/pdf.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2RvY3VtZW50X2xvYWRlcnMvZnMvcGRmLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXFEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcXVpbGwvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2RvY3VtZW50X2xvYWRlcnMvZnMvcGRmLmpzP2ExMzIiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSAnLi4vLi4vZGlzdC9kb2N1bWVudF9sb2FkZXJzL2ZzL3BkZi5qcyciXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/document_loaders/fs/pdf.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/embeddings/openai.js":
/*!*****************************************************!*\
  !*** ./node_modules/langchain/embeddings/openai.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OpenAIEmbeddings: () => (/* reexport safe */ _dist_embeddings_openai_js__WEBPACK_IMPORTED_MODULE_0__.OpenAIEmbeddings)\n/* harmony export */ });\n/* harmony import */ var _dist_embeddings_openai_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dist/embeddings/openai.js */ \"(rsc)/./node_modules/langchain/dist/embeddings/openai.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2VtYmVkZGluZ3Mvb3BlbmFpLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQTRDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcXVpbGwvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL2VtYmVkZGluZ3Mvb3BlbmFpLmpzPzMxNDAiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSAnLi4vZGlzdC9lbWJlZGRpbmdzL29wZW5haS5qcyciXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/embeddings/openai.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/node_modules/openai/_shims/agent.node.mjs":
/*!**************************************************************************!*\
  !*** ./node_modules/langchain/node_modules/openai/_shims/agent.node.mjs ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getDefaultAgent: () => (/* binding */ getDefaultAgent)\n/* harmony export */ });\n/* harmony import */ var agentkeepalive__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! agentkeepalive */ \"(rsc)/./node_modules/agentkeepalive/index.js\");\n/* harmony import */ var abort_controller__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! abort-controller */ \"(rsc)/./node_modules/abort-controller/dist/abort-controller.js\");\n/**\n * Disclaimer: modules in _shims aren't intended to be imported by SDK users.\n */ \n\nconst defaultHttpAgent = new agentkeepalive__WEBPACK_IMPORTED_MODULE_0__({\n    keepAlive: true,\n    timeout: 5 * 60 * 1000\n});\nconst defaultHttpsAgent = new agentkeepalive__WEBPACK_IMPORTED_MODULE_0__.HttpsAgent({\n    keepAlive: true,\n    timeout: 5 * 60 * 1000\n});\n// Polyfill global object if needed.\nif (typeof AbortController === \"undefined\") {\n    AbortController = abort_controller__WEBPACK_IMPORTED_MODULE_1__.AbortController;\n}\nconst getDefaultAgent = (url)=>{\n    if (defaultHttpsAgent && url.startsWith(\"https\")) return defaultHttpsAgent;\n    return defaultHttpAgent;\n}; //# sourceMappingURL=agent.node.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL25vZGVfbW9kdWxlcy9vcGVuYWkvX3NoaW1zL2FnZW50Lm5vZGUubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOztDQUVDLEdBQzJDO0FBQ2tDO0FBQzlFLE1BQU1HLG1CQUFtQixJQUFJSCwyQ0FBY0EsQ0FBQztJQUFFSSxXQUFXO0lBQU1DLFNBQVMsSUFBSSxLQUFLO0FBQUs7QUFDdEYsTUFBTUMsb0JBQW9CLElBQUlOLHNEQUF5QixDQUFDO0lBQUVJLFdBQVc7SUFBTUMsU0FBUyxJQUFJLEtBQUs7QUFBSztBQUNsRyxvQ0FBb0M7QUFDcEMsSUFBSSxPQUFPSixvQkFBb0IsYUFBYTtJQUMxQ0Esa0JBQWtCQyw2REFBdUJBO0FBQzNDO0FBQ08sTUFBTU0sa0JBQWtCLENBQUNDO0lBQzlCLElBQUlILHFCQUFxQkcsSUFBSUMsVUFBVSxDQUFDLFVBQVUsT0FBT0o7SUFDekQsT0FBT0g7QUFDVCxFQUFFLENBQ0YsdUNBQXVDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcXVpbGwvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL25vZGVfbW9kdWxlcy9vcGVuYWkvX3NoaW1zL2FnZW50Lm5vZGUubWpzP2E4YTEiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBEaXNjbGFpbWVyOiBtb2R1bGVzIGluIF9zaGltcyBhcmVuJ3QgaW50ZW5kZWQgdG8gYmUgaW1wb3J0ZWQgYnkgU0RLIHVzZXJzLlxuICovXG5pbXBvcnQgS2VlcEFsaXZlQWdlbnQgZnJvbSAnYWdlbnRrZWVwYWxpdmUnO1xuaW1wb3J0IHsgQWJvcnRDb250cm9sbGVyIGFzIEFib3J0Q29udHJvbGxlclBvbHlmaWxsIH0gZnJvbSAnYWJvcnQtY29udHJvbGxlcic7XG5jb25zdCBkZWZhdWx0SHR0cEFnZW50ID0gbmV3IEtlZXBBbGl2ZUFnZW50KHsga2VlcEFsaXZlOiB0cnVlLCB0aW1lb3V0OiA1ICogNjAgKiAxMDAwIH0pO1xuY29uc3QgZGVmYXVsdEh0dHBzQWdlbnQgPSBuZXcgS2VlcEFsaXZlQWdlbnQuSHR0cHNBZ2VudCh7IGtlZXBBbGl2ZTogdHJ1ZSwgdGltZW91dDogNSAqIDYwICogMTAwMCB9KTtcbi8vIFBvbHlmaWxsIGdsb2JhbCBvYmplY3QgaWYgbmVlZGVkLlxuaWYgKHR5cGVvZiBBYm9ydENvbnRyb2xsZXIgPT09ICd1bmRlZmluZWQnKSB7XG4gIEFib3J0Q29udHJvbGxlciA9IEFib3J0Q29udHJvbGxlclBvbHlmaWxsO1xufVxuZXhwb3J0IGNvbnN0IGdldERlZmF1bHRBZ2VudCA9ICh1cmwpID0+IHtcbiAgaWYgKGRlZmF1bHRIdHRwc0FnZW50ICYmIHVybC5zdGFydHNXaXRoKCdodHRwcycpKSByZXR1cm4gZGVmYXVsdEh0dHBzQWdlbnQ7XG4gIHJldHVybiBkZWZhdWx0SHR0cEFnZW50O1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFnZW50Lm5vZGUubWpzLm1hcFxuIl0sIm5hbWVzIjpbIktlZXBBbGl2ZUFnZW50IiwiQWJvcnRDb250cm9sbGVyIiwiQWJvcnRDb250cm9sbGVyUG9seWZpbGwiLCJkZWZhdWx0SHR0cEFnZW50Iiwia2VlcEFsaXZlIiwidGltZW91dCIsImRlZmF1bHRIdHRwc0FnZW50IiwiSHR0cHNBZ2VudCIsImdldERlZmF1bHRBZ2VudCIsInVybCIsInN0YXJ0c1dpdGgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/node_modules/openai/_shims/agent.node.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/node_modules/openai/_shims/fetch.node.mjs":
/*!**************************************************************************!*\
  !*** ./node_modules/langchain/node_modules/openai/_shims/fetch.node.mjs ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Headers: () => (/* binding */ _Headers),\n/* harmony export */   Request: () => (/* binding */ _Request),\n/* harmony export */   Response: () => (/* binding */ _Response),\n/* harmony export */   fetch: () => (/* binding */ _fetch),\n/* harmony export */   isPolyfilled: () => (/* binding */ isPolyfilled)\n/* harmony export */ });\n/* harmony import */ var node_fetch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node-fetch */ \"(rsc)/./node_modules/node-fetch/lib/index.js\");\n/**\n * Disclaimer: modules in _shims aren't intended to be imported by SDK users.\n */ \nconst _fetch = node_fetch__WEBPACK_IMPORTED_MODULE_0__;\nconst _Request = node_fetch__WEBPACK_IMPORTED_MODULE_0__.Request;\nconst _Response = node_fetch__WEBPACK_IMPORTED_MODULE_0__.Response;\nconst _Headers = node_fetch__WEBPACK_IMPORTED_MODULE_0__.Headers;\n\nconst isPolyfilled = true;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL25vZGVfbW9kdWxlcy9vcGVuYWkvX3NoaW1zL2ZldGNoLm5vZGUubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOztDQUVDLEdBRWdDO0FBRWpDLE1BQU1DLFNBQVNELHVDQUFVO0FBQ3pCLE1BQU1HLFdBQVdILCtDQUFVO0FBQzNCLE1BQU1LLFlBQVlMLGdEQUFXO0FBQzdCLE1BQU1PLFdBQVdQLCtDQUFVO0FBRWlFO0FBRXJGLE1BQU1VLGVBQWUsS0FBSyIsInNvdXJjZXMiOlsid2VicGFjazovL3F1aWxsLy4vbm9kZV9tb2R1bGVzL2xhbmdjaGFpbi9ub2RlX21vZHVsZXMvb3BlbmFpL19zaGltcy9mZXRjaC5ub2RlLm1qcz9iMTkzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogRGlzY2xhaW1lcjogbW9kdWxlcyBpbiBfc2hpbXMgYXJlbid0IGludGVuZGVkIHRvIGJlIGltcG9ydGVkIGJ5IFNESyB1c2Vycy5cbiAqL1xuXG5pbXBvcnQgKiBhcyBuZiBmcm9tICdub2RlLWZldGNoJztcblxuY29uc3QgX2ZldGNoID0gbmYuZGVmYXVsdDtcbmNvbnN0IF9SZXF1ZXN0ID0gbmYuUmVxdWVzdDtcbmNvbnN0IF9SZXNwb25zZSA9IG5mLlJlc3BvbnNlO1xuY29uc3QgX0hlYWRlcnMgPSBuZi5IZWFkZXJzO1xuXG5leHBvcnQgeyBfZmV0Y2ggYXMgZmV0Y2gsIF9SZXF1ZXN0IGFzIFJlcXVlc3QsIF9SZXNwb25zZSBhcyBSZXNwb25zZSwgX0hlYWRlcnMgYXMgSGVhZGVycyB9O1xuXG5leHBvcnQgY29uc3QgaXNQb2x5ZmlsbGVkID0gdHJ1ZTtcbiJdLCJuYW1lcyI6WyJuZiIsIl9mZXRjaCIsImRlZmF1bHQiLCJfUmVxdWVzdCIsIlJlcXVlc3QiLCJfUmVzcG9uc2UiLCJSZXNwb25zZSIsIl9IZWFkZXJzIiwiSGVhZGVycyIsImZldGNoIiwiaXNQb2x5ZmlsbGVkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/node_modules/openai/_shims/fetch.node.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/node_modules/openai/_shims/fileFromPath.node.mjs":
/*!*********************************************************************************!*\
  !*** ./node_modules/langchain/node_modules/openai/_shims/fileFromPath.node.mjs ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fileFromPath: () => (/* binding */ fileFromPath)\n/* harmony export */ });\n/* harmony import */ var formdata_node_file_from_path__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! formdata-node/file-from-path */ \"(rsc)/./node_modules/formdata-node/lib/esm/fileFromPath.js\");\n/**\n * Disclaimer: modules in _shims aren't intended to be imported by SDK users.\n */ \nlet warned = false;\nasync function fileFromPath(path, ...args) {\n    if (!warned) {\n        console.warn(`fileFromPath is deprecated; use fs.createReadStream(${JSON.stringify(path)}) instead`);\n        warned = true;\n    }\n    return await (0,formdata_node_file_from_path__WEBPACK_IMPORTED_MODULE_0__.fileFromPath)(path, ...args);\n} //# sourceMappingURL=fileFromPath.node.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL25vZGVfbW9kdWxlcy9vcGVuYWkvX3NoaW1zL2ZpbGVGcm9tUGF0aC5ub2RlLm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBOztDQUVDLEdBQzRFO0FBQzdFLElBQUlFLFNBQVM7QUFDTixlQUFlRixhQUFhRyxJQUFJLEVBQUUsR0FBR0MsSUFBSTtJQUM5QyxJQUFJLENBQUNGLFFBQVE7UUFDWEcsUUFBUUMsSUFBSSxDQUFDLENBQUMsb0RBQW9ELEVBQUVDLEtBQUtDLFNBQVMsQ0FBQ0wsTUFBTSxTQUFTLENBQUM7UUFDbkdELFNBQVM7SUFDWDtJQUNBLE9BQU8sTUFBTUQsMEVBQWFBLENBQUNFLFNBQVNDO0FBQ3RDLEVBQ0EsOENBQThDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcXVpbGwvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL25vZGVfbW9kdWxlcy9vcGVuYWkvX3NoaW1zL2ZpbGVGcm9tUGF0aC5ub2RlLm1qcz84NzFlIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogRGlzY2xhaW1lcjogbW9kdWxlcyBpbiBfc2hpbXMgYXJlbid0IGludGVuZGVkIHRvIGJlIGltcG9ydGVkIGJ5IFNESyB1c2Vycy5cbiAqL1xuaW1wb3J0IHsgZmlsZUZyb21QYXRoIGFzIF9maWxlRnJvbVBhdGggfSBmcm9tICdmb3JtZGF0YS1ub2RlL2ZpbGUtZnJvbS1wYXRoJztcbmxldCB3YXJuZWQgPSBmYWxzZTtcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBmaWxlRnJvbVBhdGgocGF0aCwgLi4uYXJncykge1xuICBpZiAoIXdhcm5lZCkge1xuICAgIGNvbnNvbGUud2FybihgZmlsZUZyb21QYXRoIGlzIGRlcHJlY2F0ZWQ7IHVzZSBmcy5jcmVhdGVSZWFkU3RyZWFtKCR7SlNPTi5zdHJpbmdpZnkocGF0aCl9KSBpbnN0ZWFkYCk7XG4gICAgd2FybmVkID0gdHJ1ZTtcbiAgfVxuICByZXR1cm4gYXdhaXQgX2ZpbGVGcm9tUGF0aChwYXRoLCAuLi5hcmdzKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZpbGVGcm9tUGF0aC5ub2RlLm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJmaWxlRnJvbVBhdGgiLCJfZmlsZUZyb21QYXRoIiwid2FybmVkIiwicGF0aCIsImFyZ3MiLCJjb25zb2xlIiwid2FybiIsIkpTT04iLCJzdHJpbmdpZnkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/node_modules/openai/_shims/fileFromPath.node.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/node_modules/openai/_shims/formdata.node.mjs":
/*!*****************************************************************************!*\
  !*** ./node_modules/langchain/node_modules/openai/_shims/formdata.node.mjs ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Blob: () => (/* reexport safe */ formdata_node__WEBPACK_IMPORTED_MODULE_0__.Blob),\n/* harmony export */   File: () => (/* reexport safe */ formdata_node__WEBPACK_IMPORTED_MODULE_0__.File),\n/* harmony export */   FormData: () => (/* reexport safe */ formdata_node__WEBPACK_IMPORTED_MODULE_0__.FormData),\n/* harmony export */   isPolyfilled: () => (/* binding */ isPolyfilled)\n/* harmony export */ });\n/* harmony import */ var formdata_node__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! formdata-node */ \"(rsc)/./node_modules/formdata-node/lib/esm/index.js\");\n/**\n * Disclaimer: modules in _shims aren't intended to be imported by SDK users.\n */ \n\nconst isPolyfilled = true;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL25vZGVfbW9kdWxlcy9vcGVuYWkvX3NoaW1zL2Zvcm1kYXRhLm5vZGUubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7O0NBRUMsR0FFb0Q7QUFFckI7QUFFekIsTUFBTUcsZUFBZSxLQUFLIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcXVpbGwvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL25vZGVfbW9kdWxlcy9vcGVuYWkvX3NoaW1zL2Zvcm1kYXRhLm5vZGUubWpzPzVjZTQiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBEaXNjbGFpbWVyOiBtb2R1bGVzIGluIF9zaGltcyBhcmVuJ3QgaW50ZW5kZWQgdG8gYmUgaW1wb3J0ZWQgYnkgU0RLIHVzZXJzLlxuICovXG5cbmltcG9ydCB7IEZvcm1EYXRhLCBGaWxlLCBCbG9iIH0gZnJvbSAnZm9ybWRhdGEtbm9kZSc7XG5cbmV4cG9ydCB7IEZvcm1EYXRhLCBGaWxlLCBCbG9iIH07XG5cbmV4cG9ydCBjb25zdCBpc1BvbHlmaWxsZWQgPSB0cnVlO1xuIl0sIm5hbWVzIjpbIkZvcm1EYXRhIiwiRmlsZSIsIkJsb2IiLCJpc1BvbHlmaWxsZWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/node_modules/openai/_shims/formdata.node.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/node_modules/openai/_shims/getMultipartRequestOptions.node.mjs":
/*!***********************************************************************************************!*\
  !*** ./node_modules/langchain/node_modules/openai/_shims/getMultipartRequestOptions.node.mjs ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getMultipartRequestOptions: () => (/* binding */ getMultipartRequestOptions)\n/* harmony export */ });\n/* harmony import */ var node_stream__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node:stream */ \"node:stream\");\n/* harmony import */ var form_data_encoder__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! form-data-encoder */ \"(rsc)/./node_modules/form-data-encoder/lib/esm/index.js\");\n/* harmony import */ var _uploads_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../uploads.mjs */ \"(rsc)/./node_modules/langchain/node_modules/openai/uploads.mjs\");\n/**\n * Disclaimer: modules in _shims aren't intended to be imported by SDK users.\n */ \n\n\nasync function getMultipartRequestOptions(form, opts) {\n    const encoder = new form_data_encoder__WEBPACK_IMPORTED_MODULE_1__.FormDataEncoder(form);\n    const readable = node_stream__WEBPACK_IMPORTED_MODULE_0__.Readable.from(encoder);\n    const body = new _uploads_mjs__WEBPACK_IMPORTED_MODULE_2__.MultipartBody(readable);\n    const headers = {\n        ...opts.headers,\n        ...encoder.headers,\n        \"Content-Length\": encoder.contentLength\n    };\n    return {\n        ...opts,\n        body: body,\n        headers\n    };\n} //# sourceMappingURL=getMultipartRequestOptions.node.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL25vZGVfbW9kdWxlcy9vcGVuYWkvX3NoaW1zL2dldE11bHRpcGFydFJlcXVlc3RPcHRpb25zLm5vZGUubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7Q0FFQyxHQUNzQztBQUNhO0FBQ0w7QUFDeEMsZUFBZUcsMkJBQTJCQyxJQUFJLEVBQUVDLElBQUk7SUFDekQsTUFBTUMsVUFBVSxJQUFJTCw4REFBZUEsQ0FBQ0c7SUFDcEMsTUFBTUcsV0FBV1AsaURBQVFBLENBQUNRLElBQUksQ0FBQ0Y7SUFDL0IsTUFBTUcsT0FBTyxJQUFJUCx1REFBYUEsQ0FBQ0s7SUFDL0IsTUFBTUcsVUFBVTtRQUNkLEdBQUdMLEtBQUtLLE9BQU87UUFDZixHQUFHSixRQUFRSSxPQUFPO1FBQ2xCLGtCQUFrQkosUUFBUUssYUFBYTtJQUN6QztJQUNBLE9BQU87UUFBRSxHQUFHTixJQUFJO1FBQUVJLE1BQU1BO1FBQU1DO0lBQVE7QUFDeEMsRUFDQSw0REFBNEQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9xdWlsbC8uL25vZGVfbW9kdWxlcy9sYW5nY2hhaW4vbm9kZV9tb2R1bGVzL29wZW5haS9fc2hpbXMvZ2V0TXVsdGlwYXJ0UmVxdWVzdE9wdGlvbnMubm9kZS5tanM/YTAwYiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIERpc2NsYWltZXI6IG1vZHVsZXMgaW4gX3NoaW1zIGFyZW4ndCBpbnRlbmRlZCB0byBiZSBpbXBvcnRlZCBieSBTREsgdXNlcnMuXG4gKi9cbmltcG9ydCB7IFJlYWRhYmxlIH0gZnJvbSAnbm9kZTpzdHJlYW0nO1xuaW1wb3J0IHsgRm9ybURhdGFFbmNvZGVyIH0gZnJvbSAnZm9ybS1kYXRhLWVuY29kZXInO1xuaW1wb3J0IHsgTXVsdGlwYXJ0Qm9keSB9IGZyb20gJy4uL3VwbG9hZHMubWpzJztcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRNdWx0aXBhcnRSZXF1ZXN0T3B0aW9ucyhmb3JtLCBvcHRzKSB7XG4gIGNvbnN0IGVuY29kZXIgPSBuZXcgRm9ybURhdGFFbmNvZGVyKGZvcm0pO1xuICBjb25zdCByZWFkYWJsZSA9IFJlYWRhYmxlLmZyb20oZW5jb2Rlcik7XG4gIGNvbnN0IGJvZHkgPSBuZXcgTXVsdGlwYXJ0Qm9keShyZWFkYWJsZSk7XG4gIGNvbnN0IGhlYWRlcnMgPSB7XG4gICAgLi4ub3B0cy5oZWFkZXJzLFxuICAgIC4uLmVuY29kZXIuaGVhZGVycyxcbiAgICAnQ29udGVudC1MZW5ndGgnOiBlbmNvZGVyLmNvbnRlbnRMZW5ndGgsXG4gIH07XG4gIHJldHVybiB7IC4uLm9wdHMsIGJvZHk6IGJvZHksIGhlYWRlcnMgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdldE11bHRpcGFydFJlcXVlc3RPcHRpb25zLm5vZGUubWpzLm1hcFxuIl0sIm5hbWVzIjpbIlJlYWRhYmxlIiwiRm9ybURhdGFFbmNvZGVyIiwiTXVsdGlwYXJ0Qm9keSIsImdldE11bHRpcGFydFJlcXVlc3RPcHRpb25zIiwiZm9ybSIsIm9wdHMiLCJlbmNvZGVyIiwicmVhZGFibGUiLCJmcm9tIiwiYm9keSIsImhlYWRlcnMiLCJjb250ZW50TGVuZ3RoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/node_modules/openai/_shims/getMultipartRequestOptions.node.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/node_modules/openai/_shims/node-readable.node.mjs":
/*!**********************************************************************************!*\
  !*** ./node_modules/langchain/node_modules/openai/_shims/node-readable.node.mjs ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isFsReadStream: () => (/* binding */ isFsReadStream)\n/* harmony export */ });\n/* harmony import */ var node_fs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node:fs */ \"node:fs\");\n\nfunction isFsReadStream(value) {\n    return value instanceof node_fs__WEBPACK_IMPORTED_MODULE_0__.ReadStream;\n} //# sourceMappingURL=node-readable.node.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL25vZGVfbW9kdWxlcy9vcGVuYWkvX3NoaW1zL25vZGUtcmVhZGFibGUubm9kZS5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBcUQ7QUFDOUMsU0FBU0UsZUFBZUMsS0FBSztJQUNsQyxPQUFPQSxpQkFBaUJGLCtDQUFZQTtBQUN0QyxFQUNBLCtDQUErQyIsInNvdXJjZXMiOlsid2VicGFjazovL3F1aWxsLy4vbm9kZV9tb2R1bGVzL2xhbmdjaGFpbi9ub2RlX21vZHVsZXMvb3BlbmFpL19zaGltcy9ub2RlLXJlYWRhYmxlLm5vZGUubWpzP2ZkYTIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmVhZFN0cmVhbSBhcyBGc1JlYWRTdHJlYW0gfSBmcm9tICdub2RlOmZzJztcbmV4cG9ydCBmdW5jdGlvbiBpc0ZzUmVhZFN0cmVhbSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBGc1JlYWRTdHJlYW07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ub2RlLXJlYWRhYmxlLm5vZGUubWpzLm1hcFxuIl0sIm5hbWVzIjpbIlJlYWRTdHJlYW0iLCJGc1JlYWRTdHJlYW0iLCJpc0ZzUmVhZFN0cmVhbSIsInZhbHVlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/node_modules/openai/_shims/node-readable.node.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/node_modules/openai/core.mjs":
/*!*************************************************************!*\
  !*** ./node_modules/langchain/node_modules/openai/core.mjs ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   APIClient: () => (/* binding */ APIClient),\n/* harmony export */   APIPromise: () => (/* binding */ APIPromise),\n/* harmony export */   APIResource: () => (/* binding */ APIResource),\n/* harmony export */   AbstractPage: () => (/* binding */ AbstractPage),\n/* harmony export */   PagePromise: () => (/* binding */ PagePromise),\n/* harmony export */   castToError: () => (/* binding */ castToError),\n/* harmony export */   coerceBoolean: () => (/* binding */ coerceBoolean),\n/* harmony export */   coerceFloat: () => (/* binding */ coerceFloat),\n/* harmony export */   coerceInteger: () => (/* binding */ coerceInteger),\n/* harmony export */   createForm: () => (/* reexport safe */ _uploads_mjs__WEBPACK_IMPORTED_MODULE_5__.createForm),\n/* harmony export */   createResponseHeaders: () => (/* binding */ createResponseHeaders),\n/* harmony export */   debug: () => (/* binding */ debug),\n/* harmony export */   ensurePresent: () => (/* binding */ ensurePresent),\n/* harmony export */   getHeader: () => (/* binding */ getHeader),\n/* harmony export */   hasOwn: () => (/* binding */ hasOwn),\n/* harmony export */   isEmptyObj: () => (/* binding */ isEmptyObj),\n/* harmony export */   isHeadersProtocol: () => (/* binding */ isHeadersProtocol),\n/* harmony export */   isRequestOptions: () => (/* binding */ isRequestOptions),\n/* harmony export */   isRunningInBrowser: () => (/* binding */ isRunningInBrowser),\n/* harmony export */   maybeCoerceBoolean: () => (/* binding */ maybeCoerceBoolean),\n/* harmony export */   maybeCoerceFloat: () => (/* binding */ maybeCoerceFloat),\n/* harmony export */   maybeCoerceInteger: () => (/* binding */ maybeCoerceInteger),\n/* harmony export */   maybeMultipartFormRequestOptions: () => (/* reexport safe */ _uploads_mjs__WEBPACK_IMPORTED_MODULE_5__.maybeMultipartFormRequestOptions),\n/* harmony export */   multipartFormRequestOptions: () => (/* reexport safe */ _uploads_mjs__WEBPACK_IMPORTED_MODULE_5__.multipartFormRequestOptions),\n/* harmony export */   readEnv: () => (/* binding */ readEnv),\n/* harmony export */   safeJSON: () => (/* binding */ safeJSON),\n/* harmony export */   toBase64: () => (/* binding */ toBase64)\n/* harmony export */ });\n/* harmony import */ var _version_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./version.mjs */ \"(rsc)/./node_modules/langchain/node_modules/openai/version.mjs\");\n/* harmony import */ var _streaming_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./streaming.mjs */ \"(rsc)/./node_modules/langchain/node_modules/openai/streaming.mjs\");\n/* harmony import */ var _error_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./error.mjs */ \"(rsc)/./node_modules/langchain/node_modules/openai/error.mjs\");\n/* harmony import */ var openai_shims_agent__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! openai/_shims/agent */ \"(rsc)/./node_modules/langchain/node_modules/openai/_shims/agent.node.mjs\");\n/* harmony import */ var openai_shims_fetch__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! openai/_shims/fetch */ \"(rsc)/./node_modules/langchain/node_modules/openai/_shims/fetch.node.mjs\");\n/* harmony import */ var _uploads_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./uploads.mjs */ \"(rsc)/./node_modules/langchain/node_modules/openai/uploads.mjs\");\nvar __classPrivateFieldSet = undefined && undefined.__classPrivateFieldSet || function(receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = undefined && undefined.__classPrivateFieldGet || function(receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _AbstractPage_client;\n\n\n\n\n\n\n\nconst MAX_RETRIES = 2;\nasync function defaultParseResponse(props) {\n    const { response } = props;\n    if (props.options.stream) {\n        // Note: there is an invariant here that isn't represented in the type system\n        // that if you set `stream: true` the response type must also be `Stream<T>`\n        return new _streaming_mjs__WEBPACK_IMPORTED_MODULE_1__.Stream(response, props.controller);\n    }\n    const contentType = response.headers.get(\"content-type\");\n    if (contentType === null || contentType === void 0 ? void 0 : contentType.includes(\"application/json\")) {\n        const json = await response.json();\n        debug(\"response\", response.status, response.url, response.headers, json);\n        return json;\n    }\n    // TODO handle blob, arraybuffer, other content types, etc.\n    const text = await response.text();\n    debug(\"response\", response.status, response.url, response.headers, text);\n    return text;\n}\n/**\n * A subclass of `Promise` providing additional helper methods\n * for interacting with the SDK.\n */ class APIPromise extends Promise {\n    constructor(responsePromise, parseResponse = defaultParseResponse){\n        super((resolve)=>{\n            // this is maybe a bit weird but this has to be a no-op to not implicitly\n            // parse the response body; instead .then, .catch, .finally are overridden\n            // to parse the response\n            resolve(null);\n        });\n        this.responsePromise = responsePromise;\n        this.parseResponse = parseResponse;\n    }\n    _thenUnwrap(transform) {\n        return new APIPromise(this.responsePromise, async (props)=>transform(await this.parseResponse(props)));\n    }\n    /**\n   * Gets the raw `Response` instance instead of parsing the response\n   * data.\n   *\n   * If you want to parse the response body but still get the `Response`\n   * instance, you can use {@link withResponse()}.\n   */ asResponse() {\n        return this.responsePromise.then((p)=>p.response);\n    }\n    /**\n   * Gets the parsed response data and the raw `Response` instance.\n   *\n   * If you just want to get the raw `Response` instance without parsing it,\n   * you can use {@link asResponse()}.\n   */ async withResponse() {\n        const [data, response] = await Promise.all([\n            this.parse(),\n            this.asResponse()\n        ]);\n        return {\n            data,\n            response\n        };\n    }\n    parse() {\n        if (!this.parsedPromise) {\n            this.parsedPromise = this.responsePromise.then(this.parseResponse);\n        }\n        return this.parsedPromise;\n    }\n    then(onfulfilled, onrejected) {\n        return this.parse().then(onfulfilled, onrejected);\n    }\n    catch(onrejected) {\n        return this.parse().catch(onrejected);\n    }\n    finally(onfinally) {\n        return this.parse().finally(onfinally);\n    }\n}\nclass APIClient {\n    constructor({ baseURL, maxRetries, timeout = 600000, httpAgent, fetch: overridenFetch }){\n        this.baseURL = baseURL;\n        this.maxRetries = validatePositiveInteger(\"maxRetries\", maxRetries !== null && maxRetries !== void 0 ? maxRetries : MAX_RETRIES);\n        this.timeout = validatePositiveInteger(\"timeout\", timeout);\n        this.httpAgent = httpAgent;\n        this.fetch = overridenFetch !== null && overridenFetch !== void 0 ? overridenFetch : openai_shims_fetch__WEBPACK_IMPORTED_MODULE_4__.fetch;\n    }\n    authHeaders(opts) {\n        return {};\n    }\n    /**\n   * Override this to add your own default headers, for example:\n   *\n   *  {\n   *    ...super.defaultHeaders(),\n   *    Authorization: 'Bearer 123',\n   *  }\n   */ defaultHeaders(opts) {\n        return {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\",\n            \"User-Agent\": this.getUserAgent(),\n            ...getPlatformHeaders(),\n            ...this.authHeaders(opts)\n        };\n    }\n    /**\n   * Override this to add your own headers validation:\n   */ validateHeaders(headers, customHeaders) {}\n    defaultIdempotencyKey() {\n        return `stainless-node-retry-${uuid4()}`;\n    }\n    get(path, opts) {\n        return this.methodRequest(\"get\", path, opts);\n    }\n    post(path, opts) {\n        return this.methodRequest(\"post\", path, opts);\n    }\n    patch(path, opts) {\n        return this.methodRequest(\"patch\", path, opts);\n    }\n    put(path, opts) {\n        return this.methodRequest(\"put\", path, opts);\n    }\n    delete(path, opts) {\n        return this.methodRequest(\"delete\", path, opts);\n    }\n    methodRequest(method, path, opts) {\n        return this.request(Promise.resolve(opts).then((opts)=>({\n                method,\n                path,\n                ...opts\n            })));\n    }\n    getAPIList(path, Page, opts) {\n        return this.requestAPIList(Page, {\n            method: \"get\",\n            path,\n            ...opts\n        });\n    }\n    calculateContentLength(body) {\n        if (typeof body === \"string\") {\n            if (typeof Buffer !== \"undefined\") {\n                return Buffer.byteLength(body, \"utf8\").toString();\n            }\n            if (typeof TextEncoder !== \"undefined\") {\n                const encoder = new TextEncoder();\n                const encoded = encoder.encode(body);\n                return encoded.length.toString();\n            }\n        }\n        return null;\n    }\n    buildRequest(options) {\n        var _a, _b, _c, _d, _e, _f;\n        const { method, path, query, headers: headers = {} } = options;\n        const body = (0,_uploads_mjs__WEBPACK_IMPORTED_MODULE_5__.isMultipartBody)(options.body) ? options.body.body : options.body ? JSON.stringify(options.body, null, 2) : null;\n        const contentLength = this.calculateContentLength(body);\n        const url = this.buildURL(path, query);\n        if (\"timeout\" in options) validatePositiveInteger(\"timeout\", options.timeout);\n        const timeout = (_a = options.timeout) !== null && _a !== void 0 ? _a : this.timeout;\n        const httpAgent = (_c = (_b = options.httpAgent) !== null && _b !== void 0 ? _b : this.httpAgent) !== null && _c !== void 0 ? _c : (0,openai_shims_agent__WEBPACK_IMPORTED_MODULE_3__.getDefaultAgent)(url);\n        const minAgentTimeout = timeout + 1000;\n        if (typeof ((_d = httpAgent === null || httpAgent === void 0 ? void 0 : httpAgent.options) === null || _d === void 0 ? void 0 : _d.timeout) === \"number\" && minAgentTimeout > ((_e = httpAgent.options.timeout) !== null && _e !== void 0 ? _e : 0)) {\n            // Allow any given request to bump our agent active socket timeout.\n            // This may seem strange, but leaking active sockets should be rare and not particularly problematic,\n            // and without mutating agent we would need to create more of them.\n            // This tradeoff optimizes for performance.\n            httpAgent.options.timeout = minAgentTimeout;\n        }\n        if (this.idempotencyHeader && method !== \"get\") {\n            if (!options.idempotencyKey) options.idempotencyKey = this.defaultIdempotencyKey();\n            headers[this.idempotencyHeader] = options.idempotencyKey;\n        }\n        const reqHeaders = {\n            ...contentLength && {\n                \"Content-Length\": contentLength\n            },\n            ...this.defaultHeaders(options),\n            ...headers\n        };\n        // let builtin fetch set the Content-Type for multipart bodies\n        if ((0,_uploads_mjs__WEBPACK_IMPORTED_MODULE_5__.isMultipartBody)(options.body) && !openai_shims_fetch__WEBPACK_IMPORTED_MODULE_4__.isPolyfilled) {\n            delete reqHeaders[\"Content-Type\"];\n        }\n        // Strip any headers being explicitly omitted with null\n        Object.keys(reqHeaders).forEach((key)=>reqHeaders[key] === null && delete reqHeaders[key]);\n        const req = {\n            method,\n            ...body && {\n                body: body\n            },\n            headers: reqHeaders,\n            ...httpAgent && {\n                agent: httpAgent\n            },\n            // @ts-ignore node-fetch uses a custom AbortSignal type that is\n            // not compatible with standard web types\n            signal: (_f = options.signal) !== null && _f !== void 0 ? _f : null\n        };\n        this.validateHeaders(reqHeaders, headers);\n        return {\n            req,\n            url,\n            timeout\n        };\n    }\n    /**\n   * Used as a callback for mutating the given `RequestInit` object.\n   *\n   * This is useful for cases where you want to add certain headers based off of\n   * the request properties, e.g. `method` or `url`.\n   */ async prepareRequest(request, { url, options }) {}\n    parseHeaders(headers) {\n        return !headers ? {} : Symbol.iterator in headers ? Object.fromEntries(Array.from(headers).map((header)=>[\n                ...header\n            ])) : {\n            ...headers\n        };\n    }\n    makeStatusError(status, error, message, headers) {\n        return _error_mjs__WEBPACK_IMPORTED_MODULE_2__.APIError.generate(status, error, message, headers);\n    }\n    request(options, remainingRetries = null) {\n        return new APIPromise(this.makeRequest(options, remainingRetries));\n    }\n    async makeRequest(optionsInput, retriesRemaining) {\n        var _a, _b, _c;\n        const options = await optionsInput;\n        if (retriesRemaining == null) {\n            retriesRemaining = (_a = options.maxRetries) !== null && _a !== void 0 ? _a : this.maxRetries;\n        }\n        const { req, url, timeout } = this.buildRequest(options);\n        await this.prepareRequest(req, {\n            url,\n            options\n        });\n        debug(\"request\", url, options, req.headers);\n        if ((_b = options.signal) === null || _b === void 0 ? void 0 : _b.aborted) {\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_2__.APIUserAbortError();\n        }\n        const controller = new AbortController();\n        const response = await this.fetchWithTimeout(url, req, timeout, controller).catch(castToError);\n        if (response instanceof Error) {\n            if ((_c = options.signal) === null || _c === void 0 ? void 0 : _c.aborted) {\n                throw new _error_mjs__WEBPACK_IMPORTED_MODULE_2__.APIUserAbortError();\n            }\n            if (retriesRemaining) {\n                return this.retryRequest(options, retriesRemaining);\n            }\n            if (response.name === \"AbortError\") {\n                throw new _error_mjs__WEBPACK_IMPORTED_MODULE_2__.APIConnectionTimeoutError();\n            }\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_2__.APIConnectionError({\n                cause: response\n            });\n        }\n        const responseHeaders = createResponseHeaders(response.headers);\n        if (!response.ok) {\n            if (retriesRemaining && this.shouldRetry(response)) {\n                return this.retryRequest(options, retriesRemaining, responseHeaders);\n            }\n            const errText = await response.text().catch(()=>\"Unknown\");\n            const errJSON = safeJSON(errText);\n            const errMessage = errJSON ? undefined : errText;\n            debug(\"response\", response.status, url, responseHeaders, errMessage);\n            const err = this.makeStatusError(response.status, errJSON, errMessage, responseHeaders);\n            throw err;\n        }\n        return {\n            response,\n            options,\n            controller\n        };\n    }\n    requestAPIList(Page, options) {\n        const request = this.makeRequest(options, null);\n        return new PagePromise(this, request, Page);\n    }\n    buildURL(path, query) {\n        const url = isAbsoluteURL(path) ? new URL(path) : new URL(this.baseURL + (this.baseURL.endsWith(\"/\") && path.startsWith(\"/\") ? path.slice(1) : path));\n        const defaultQuery = this.defaultQuery();\n        if (!isEmptyObj(defaultQuery)) {\n            query = {\n                ...defaultQuery,\n                ...query\n            };\n        }\n        if (query) {\n            url.search = this.stringifyQuery(query);\n        }\n        return url.toString();\n    }\n    stringifyQuery(query) {\n        return Object.entries(query).filter(([_, value])=>typeof value !== \"undefined\").map(([key, value])=>{\n            if (typeof value === \"string\" || typeof value === \"number\" || typeof value === \"boolean\") {\n                return `${encodeURIComponent(key)}=${encodeURIComponent(value)}`;\n            }\n            if (value === null) {\n                return `${encodeURIComponent(key)}=`;\n            }\n            throw new Error(`Cannot stringify type ${typeof value}; Expected string, number, boolean, or null. If you need to pass nested query parameters, you can manually encode them, e.g. { query: { 'foo[key1]': value1, 'foo[key2]': value2 } }, and please open a GitHub issue requesting better support for your use case.`);\n        }).join(\"&\");\n    }\n    async fetchWithTimeout(url, init, ms, controller) {\n        const { signal, ...options } = init || {};\n        if (signal) signal.addEventListener(\"abort\", ()=>controller.abort());\n        const timeout = setTimeout(()=>controller.abort(), ms);\n        return this.getRequestClient().fetch(url, {\n            signal: controller.signal,\n            ...options\n        }).finally(()=>{\n            clearTimeout(timeout);\n        });\n    }\n    getRequestClient() {\n        return {\n            fetch: this.fetch\n        };\n    }\n    shouldRetry(response) {\n        // Note this is not a standard header.\n        const shouldRetryHeader = response.headers.get(\"x-should-retry\");\n        // If the server explicitly says whether or not to retry, obey.\n        if (shouldRetryHeader === \"true\") return true;\n        if (shouldRetryHeader === \"false\") return false;\n        // Retry on lock timeouts.\n        if (response.status === 409) return true;\n        // Retry on rate limits.\n        if (response.status === 429) return true;\n        // Retry internal errors.\n        if (response.status >= 500) return true;\n        return false;\n    }\n    async retryRequest(options, retriesRemaining, responseHeaders) {\n        var _a;\n        retriesRemaining -= 1;\n        // About the Retry-After header: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After\n        //\n        // TODO: we may want to handle the case where the header is using the http-date syntax: \"Retry-After: <http-date>\".\n        // See https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After#syntax for details.\n        const retryAfter = parseInt((responseHeaders === null || responseHeaders === void 0 ? void 0 : responseHeaders[\"retry-after\"]) || \"\");\n        const maxRetries = (_a = options.maxRetries) !== null && _a !== void 0 ? _a : this.maxRetries;\n        const timeout = this.calculateRetryTimeoutSeconds(retriesRemaining, retryAfter, maxRetries) * 1000;\n        await sleep(timeout);\n        return this.makeRequest(options, retriesRemaining);\n    }\n    calculateRetryTimeoutSeconds(retriesRemaining, retryAfter, maxRetries) {\n        const initialRetryDelay = 0.5;\n        const maxRetryDelay = 2;\n        // If the API asks us to wait a certain amount of time (and it's a reasonable amount),\n        // just do what it says.\n        if (Number.isInteger(retryAfter) && retryAfter <= 60) {\n            return retryAfter;\n        }\n        const numRetries = maxRetries - retriesRemaining;\n        // Apply exponential backoff, but not more than the max.\n        const sleepSeconds = Math.min(initialRetryDelay * Math.pow(numRetries - 1, 2), maxRetryDelay);\n        // Apply some jitter, plus-or-minus half a second.\n        const jitter = Math.random() - 0.5;\n        return sleepSeconds + jitter;\n    }\n    getUserAgent() {\n        return `${this.constructor.name}/JS ${_version_mjs__WEBPACK_IMPORTED_MODULE_0__.VERSION}`;\n    }\n}\nclass APIResource {\n    constructor(client){\n        this.client = client;\n        this.get = client.get.bind(client);\n        this.post = client.post.bind(client);\n        this.patch = client.patch.bind(client);\n        this.put = client.put.bind(client);\n        this.delete = client.delete.bind(client);\n        this.getAPIList = client.getAPIList.bind(client);\n    }\n}\nclass AbstractPage {\n    constructor(client, response, body, options){\n        _AbstractPage_client.set(this, void 0);\n        __classPrivateFieldSet(this, _AbstractPage_client, client, \"f\");\n        this.options = options;\n        this.response = response;\n        this.body = body;\n    }\n    hasNextPage() {\n        const items = this.getPaginatedItems();\n        if (!items.length) return false;\n        return this.nextPageInfo() != null;\n    }\n    async getNextPage() {\n        const nextInfo = this.nextPageInfo();\n        if (!nextInfo) {\n            throw new Error(\"No next page expected; please check `.hasNextPage()` before calling `.getNextPage()`.\");\n        }\n        const nextOptions = {\n            ...this.options\n        };\n        if (\"params\" in nextInfo) {\n            nextOptions.query = {\n                ...nextOptions.query,\n                ...nextInfo.params\n            };\n        } else if (\"url\" in nextInfo) {\n            const params = [\n                ...Object.entries(nextOptions.query || {}),\n                ...nextInfo.url.searchParams.entries()\n            ];\n            for (const [key, value] of params){\n                nextInfo.url.searchParams.set(key, value);\n            }\n            nextOptions.query = undefined;\n            nextOptions.path = nextInfo.url.toString();\n        }\n        return await __classPrivateFieldGet(this, _AbstractPage_client, \"f\").requestAPIList(this.constructor, nextOptions);\n    }\n    async *iterPages() {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        let page = this;\n        yield page;\n        while(page.hasNextPage()){\n            page = await page.getNextPage();\n            yield page;\n        }\n    }\n    async *[(_AbstractPage_client = new WeakMap(), Symbol.asyncIterator)]() {\n        for await (const page of this.iterPages()){\n            for (const item of page.getPaginatedItems()){\n                yield item;\n            }\n        }\n    }\n}\n/**\n * This subclass of Promise will resolve to an instantiated Page once the request completes.\n *\n * It also implements AsyncIterable to allow auto-paginating iteration on an unawaited list call, eg:\n *\n *    for await (const item of client.items.list()) {\n *      console.log(item)\n *    }\n */ class PagePromise extends APIPromise {\n    constructor(client, request, Page){\n        super(request, async (props)=>new Page(client, props.response, await defaultParseResponse(props), props.options));\n    }\n    /**\n   * Allow auto-paginating iteration on an unawaited list call, eg:\n   *\n   *    for await (const item of client.items.list()) {\n   *      console.log(item)\n   *    }\n   */ async *[Symbol.asyncIterator]() {\n        const page = await this;\n        for await (const item of page){\n            yield item;\n        }\n    }\n}\nconst createResponseHeaders = (headers)=>{\n    return new Proxy(Object.fromEntries(// @ts-ignore\n    headers.entries()), {\n        get (target, name) {\n            const key = name.toString();\n            return target[key.toLowerCase()] || target[key];\n        }\n    });\n};\n// This is required so that we can determine if a given object matches the RequestOptions\n// type at runtime. While this requires duplication, it is enforced by the TypeScript\n// compiler such that any missing / extraneous keys will cause an error.\nconst requestOptionsKeys = {\n    method: true,\n    path: true,\n    query: true,\n    body: true,\n    headers: true,\n    maxRetries: true,\n    stream: true,\n    timeout: true,\n    httpAgent: true,\n    signal: true,\n    idempotencyKey: true\n};\nconst isRequestOptions = (obj)=>{\n    return typeof obj === \"object\" && obj !== null && !isEmptyObj(obj) && Object.keys(obj).every((k)=>hasOwn(requestOptionsKeys, k));\n};\nconst getPlatformProperties = ()=>{\n    if (typeof Deno !== \"undefined\" && Deno.build != null) {\n        return {\n            \"X-Stainless-Lang\": \"js\",\n            \"X-Stainless-Package-Version\": _version_mjs__WEBPACK_IMPORTED_MODULE_0__.VERSION,\n            \"X-Stainless-OS\": normalizePlatform(Deno.build.os),\n            \"X-Stainless-Arch\": normalizeArch(Deno.build.arch),\n            \"X-Stainless-Runtime\": \"deno\",\n            \"X-Stainless-Runtime-Version\": Deno.version\n        };\n    }\n    if (typeof EdgeRuntime !== \"undefined\") {\n        return {\n            \"X-Stainless-Lang\": \"js\",\n            \"X-Stainless-Package-Version\": _version_mjs__WEBPACK_IMPORTED_MODULE_0__.VERSION,\n            \"X-Stainless-OS\": \"Unknown\",\n            \"X-Stainless-Arch\": `other:${EdgeRuntime}`,\n            \"X-Stainless-Runtime\": \"edge\",\n            \"X-Stainless-Runtime-Version\": process.version\n        };\n    }\n    // Check if Node.js\n    if (Object.prototype.toString.call(typeof process !== \"undefined\" ? process : 0) === \"[object process]\") {\n        return {\n            \"X-Stainless-Lang\": \"js\",\n            \"X-Stainless-Package-Version\": _version_mjs__WEBPACK_IMPORTED_MODULE_0__.VERSION,\n            \"X-Stainless-OS\": normalizePlatform(process.platform),\n            \"X-Stainless-Arch\": normalizeArch(process.arch),\n            \"X-Stainless-Runtime\": \"node\",\n            \"X-Stainless-Runtime-Version\": process.version\n        };\n    }\n    const browserInfo = getBrowserInfo();\n    if (browserInfo) {\n        return {\n            \"X-Stainless-Lang\": \"js\",\n            \"X-Stainless-Package-Version\": _version_mjs__WEBPACK_IMPORTED_MODULE_0__.VERSION,\n            \"X-Stainless-OS\": \"Unknown\",\n            \"X-Stainless-Arch\": \"unknown\",\n            \"X-Stainless-Runtime\": `browser:${browserInfo.browser}`,\n            \"X-Stainless-Runtime-Version\": browserInfo.version\n        };\n    }\n    // TODO add support for Cloudflare workers, etc.\n    return {\n        \"X-Stainless-Lang\": \"js\",\n        \"X-Stainless-Package-Version\": _version_mjs__WEBPACK_IMPORTED_MODULE_0__.VERSION,\n        \"X-Stainless-OS\": \"Unknown\",\n        \"X-Stainless-Arch\": \"unknown\",\n        \"X-Stainless-Runtime\": \"unknown\",\n        \"X-Stainless-Runtime-Version\": \"unknown\"\n    };\n};\n// Note: modified from https://github.com/JS-DevTools/host-environment/blob/b1ab79ecde37db5d6e163c050e54fe7d287d7c92/src/isomorphic.browser.ts\nfunction getBrowserInfo() {\n    if (typeof navigator === \"undefined\" || !navigator) {\n        return null;\n    }\n    // NOTE: The order matters here!\n    const browserPatterns = [\n        {\n            key: \"edge\",\n            pattern: /Edge(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/\n        },\n        {\n            key: \"ie\",\n            pattern: /MSIE(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/\n        },\n        {\n            key: \"ie\",\n            pattern: /Trident(?:.*rv\\:(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/\n        },\n        {\n            key: \"chrome\",\n            pattern: /Chrome(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/\n        },\n        {\n            key: \"firefox\",\n            pattern: /Firefox(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/\n        },\n        {\n            key: \"safari\",\n            pattern: /(?:Version\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?(?:\\W+Mobile\\S*)?\\W+Safari/\n        }\n    ];\n    // Find the FIRST matching browser\n    for (const { key, pattern } of browserPatterns){\n        const match = pattern.exec(navigator.userAgent);\n        if (match) {\n            const major = match[1] || 0;\n            const minor = match[2] || 0;\n            const patch = match[3] || 0;\n            return {\n                browser: key,\n                version: `${major}.${minor}.${patch}`\n            };\n        }\n    }\n    return null;\n}\nconst normalizeArch = (arch)=>{\n    // Node docs:\n    // - https://nodejs.org/api/process.html#processarch\n    // Deno docs:\n    // - https://doc.deno.land/deno/stable/~/Deno.build\n    if (arch === \"x32\") return \"x32\";\n    if (arch === \"x86_64\" || arch === \"x64\") return \"x64\";\n    if (arch === \"arm\") return \"arm\";\n    if (arch === \"aarch64\" || arch === \"arm64\") return \"arm64\";\n    if (arch) return `other:${arch}`;\n    return \"unknown\";\n};\nconst normalizePlatform = (platform)=>{\n    // Node platforms:\n    // - https://nodejs.org/api/process.html#processplatform\n    // Deno platforms:\n    // - https://doc.deno.land/deno/stable/~/Deno.build\n    // - https://github.com/denoland/deno/issues/14799\n    platform = platform.toLowerCase();\n    // NOTE: this iOS check is untested and may not work\n    // Node does not work natively on IOS, there is a fork at\n    // https://github.com/nodejs-mobile/nodejs-mobile\n    // however it is unknown at the time of writing how to detect if it is running\n    if (platform.includes(\"ios\")) return \"iOS\";\n    if (platform === \"android\") return \"Android\";\n    if (platform === \"darwin\") return \"MacOS\";\n    if (platform === \"win32\") return \"Windows\";\n    if (platform === \"freebsd\") return \"FreeBSD\";\n    if (platform === \"openbsd\") return \"OpenBSD\";\n    if (platform === \"linux\") return \"Linux\";\n    if (platform) return `Other:${platform}`;\n    return \"Unknown\";\n};\nlet _platformHeaders;\nconst getPlatformHeaders = ()=>{\n    return _platformHeaders !== null && _platformHeaders !== void 0 ? _platformHeaders : _platformHeaders = getPlatformProperties();\n};\nconst safeJSON = (text)=>{\n    try {\n        return JSON.parse(text);\n    } catch (err) {\n        return undefined;\n    }\n};\n// https://stackoverflow.com/a/19709846\nconst startsWithSchemeRegexp = new RegExp(\"^(?:[a-z]+:)?//\", \"i\");\nconst isAbsoluteURL = (url)=>{\n    return startsWithSchemeRegexp.test(url);\n};\nconst sleep = (ms)=>new Promise((resolve)=>setTimeout(resolve, ms));\nconst validatePositiveInteger = (name, n)=>{\n    if (typeof n !== \"number\" || !Number.isInteger(n)) {\n        throw new Error(`${name} must be an integer`);\n    }\n    if (n < 0) {\n        throw new Error(`${name} must be a positive integer`);\n    }\n    return n;\n};\nconst castToError = (err)=>{\n    if (err instanceof Error) return err;\n    return new Error(err);\n};\nconst ensurePresent = (value)=>{\n    if (value == null) throw new Error(`Expected a value to be given but received ${value} instead.`);\n    return value;\n};\n/**\n * Read an environment variable.\n *\n * Will return undefined if the environment variable doesn't exist or cannot be accessed.\n */ const readEnv = (env)=>{\n    var _a, _b, _c, _d;\n    if (typeof process !== \"undefined\") {\n        return (_b = (_a = process.env) === null || _a === void 0 ? void 0 : _a[env]) !== null && _b !== void 0 ? _b : undefined;\n    }\n    if (typeof Deno !== \"undefined\") {\n        return (_d = (_c = Deno.env) === null || _c === void 0 ? void 0 : _c.get) === null || _d === void 0 ? void 0 : _d.call(_c, env);\n    }\n    return undefined;\n};\nconst coerceInteger = (value)=>{\n    if (typeof value === \"number\") return Math.round(value);\n    if (typeof value === \"string\") return parseInt(value, 10);\n    throw new Error(`Could not coerce ${value} (type: ${typeof value}) into a number`);\n};\nconst coerceFloat = (value)=>{\n    if (typeof value === \"number\") return value;\n    if (typeof value === \"string\") return parseFloat(value);\n    throw new Error(`Could not coerce ${value} (type: ${typeof value}) into a number`);\n};\nconst coerceBoolean = (value)=>{\n    if (typeof value === \"boolean\") return value;\n    if (typeof value === \"string\") return value === \"true\";\n    return Boolean(value);\n};\nconst maybeCoerceInteger = (value)=>{\n    if (value === undefined) {\n        return undefined;\n    }\n    return coerceInteger(value);\n};\nconst maybeCoerceFloat = (value)=>{\n    if (value === undefined) {\n        return undefined;\n    }\n    return coerceFloat(value);\n};\nconst maybeCoerceBoolean = (value)=>{\n    if (value === undefined) {\n        return undefined;\n    }\n    return coerceBoolean(value);\n};\n// https://stackoverflow.com/a/34491287\nfunction isEmptyObj(obj) {\n    if (!obj) return true;\n    for(const _k in obj)return false;\n    return true;\n}\n// https://eslint.org/docs/latest/rules/no-prototype-builtins\nfunction hasOwn(obj, key) {\n    return Object.prototype.hasOwnProperty.call(obj, key);\n}\nfunction debug(action, ...args) {\n    if (typeof process !== \"undefined\" && process.env[\"DEBUG\"] === \"true\") {\n        console.log(`OpenAI:DEBUG:${action}`, ...args);\n    }\n}\n/**\n * https://stackoverflow.com/a/2117523\n */ const uuid4 = ()=>{\n    return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, (c)=>{\n        const r = Math.random() * 16 | 0;\n        const v = c === \"x\" ? r : r & 0x3 | 0x8;\n        return v.toString(16);\n    });\n};\nconst isRunningInBrowser = ()=>{\n    return(// @ts-ignore\n     false && // @ts-ignore\n    0);\n};\nconst isHeadersProtocol = (headers)=>{\n    return typeof (headers === null || headers === void 0 ? void 0 : headers.get) === \"function\";\n};\nconst getHeader = (headers, key)=>{\n    const lowerKey = key.toLowerCase();\n    if (isHeadersProtocol(headers)) return headers.get(key) || headers.get(lowerKey);\n    const value = headers[key] || headers[lowerKey];\n    if (Array.isArray(value)) {\n        if (value.length <= 1) return value[0];\n        console.warn(`Received ${value.length} entries for the ${key} header, using the first entry.`);\n        return value[0];\n    }\n    return value;\n};\n/**\n * Encodes a string to Base64 format.\n */ const toBase64 = (str)=>{\n    if (!str) return \"\";\n    if (typeof Buffer !== \"undefined\") {\n        return Buffer.from(str).toString(\"base64\");\n    }\n    if (typeof btoa !== \"undefined\") {\n        return btoa(str);\n    }\n    throw new Error(\"Cannot generate b64 string; Expected `Buffer` or `btoa` to be defined\");\n}; //# sourceMappingURL=core.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/node_modules/openai/core.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/node_modules/openai/error.mjs":
/*!**************************************************************!*\
  !*** ./node_modules/langchain/node_modules/openai/error.mjs ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   APIConnectionError: () => (/* binding */ APIConnectionError),\n/* harmony export */   APIConnectionTimeoutError: () => (/* binding */ APIConnectionTimeoutError),\n/* harmony export */   APIError: () => (/* binding */ APIError),\n/* harmony export */   APIUserAbortError: () => (/* binding */ APIUserAbortError),\n/* harmony export */   AuthenticationError: () => (/* binding */ AuthenticationError),\n/* harmony export */   BadRequestError: () => (/* binding */ BadRequestError),\n/* harmony export */   ConflictError: () => (/* binding */ ConflictError),\n/* harmony export */   InternalServerError: () => (/* binding */ InternalServerError),\n/* harmony export */   NotFoundError: () => (/* binding */ NotFoundError),\n/* harmony export */   PermissionDeniedError: () => (/* binding */ PermissionDeniedError),\n/* harmony export */   RateLimitError: () => (/* binding */ RateLimitError),\n/* harmony export */   UnprocessableEntityError: () => (/* binding */ UnprocessableEntityError)\n/* harmony export */ });\n/* harmony import */ var _core_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./core.mjs */ \"(rsc)/./node_modules/langchain/node_modules/openai/core.mjs\");\n// File generated from our OpenAPI spec by Stainless.\n\nclass APIError extends Error {\n    constructor(status, error, message, headers){\n        super(APIError.makeMessage(error, message));\n        this.status = status;\n        this.headers = headers;\n        const data = error;\n        this.error = data;\n        this.code = data === null || data === void 0 ? void 0 : data[\"code\"];\n        this.param = data === null || data === void 0 ? void 0 : data[\"param\"];\n        this.type = data === null || data === void 0 ? void 0 : data[\"type\"];\n    }\n    static makeMessage(error, message) {\n        return (error === null || error === void 0 ? void 0 : error.message) ? typeof error.message === \"string\" ? error.message : JSON.stringify(error.message) : error ? JSON.stringify(error) : message || \"Unknown error occurred\";\n    }\n    static generate(status, errorResponse, message, headers) {\n        if (!status) {\n            return new APIConnectionError({\n                cause: (0,_core_mjs__WEBPACK_IMPORTED_MODULE_0__.castToError)(errorResponse)\n            });\n        }\n        const error = errorResponse === null || errorResponse === void 0 ? void 0 : errorResponse[\"error\"];\n        if (status === 400) {\n            return new BadRequestError(status, error, message, headers);\n        }\n        if (status === 401) {\n            return new AuthenticationError(status, error, message, headers);\n        }\n        if (status === 403) {\n            return new PermissionDeniedError(status, error, message, headers);\n        }\n        if (status === 404) {\n            return new NotFoundError(status, error, message, headers);\n        }\n        if (status === 409) {\n            return new ConflictError(status, error, message, headers);\n        }\n        if (status === 422) {\n            return new UnprocessableEntityError(status, error, message, headers);\n        }\n        if (status === 429) {\n            return new RateLimitError(status, error, message, headers);\n        }\n        if (status >= 500) {\n            return new InternalServerError(status, error, message, headers);\n        }\n        return new APIError(status, error, message, headers);\n    }\n}\nclass APIUserAbortError extends APIError {\n    constructor({ message } = {}){\n        super(undefined, undefined, message || \"Request was aborted.\", undefined);\n        this.status = undefined;\n    }\n}\nclass APIConnectionError extends APIError {\n    constructor({ message, cause }){\n        super(undefined, undefined, message || \"Connection error.\", undefined);\n        this.status = undefined;\n        // in some environments the 'cause' property is already declared\n        // @ts-ignore\n        if (cause) this.cause = cause;\n    }\n}\nclass APIConnectionTimeoutError extends APIConnectionError {\n    constructor(){\n        super({\n            message: \"Request timed out.\"\n        });\n    }\n}\nclass BadRequestError extends APIError {\n    constructor(){\n        super(...arguments);\n        this.status = 400;\n    }\n}\nclass AuthenticationError extends APIError {\n    constructor(){\n        super(...arguments);\n        this.status = 401;\n    }\n}\nclass PermissionDeniedError extends APIError {\n    constructor(){\n        super(...arguments);\n        this.status = 403;\n    }\n}\nclass NotFoundError extends APIError {\n    constructor(){\n        super(...arguments);\n        this.status = 404;\n    }\n}\nclass ConflictError extends APIError {\n    constructor(){\n        super(...arguments);\n        this.status = 409;\n    }\n}\nclass UnprocessableEntityError extends APIError {\n    constructor(){\n        super(...arguments);\n        this.status = 422;\n    }\n}\nclass RateLimitError extends APIError {\n    constructor(){\n        super(...arguments);\n        this.status = 429;\n    }\n}\nclass InternalServerError extends APIError {\n} //# sourceMappingURL=error.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/node_modules/openai/error.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/node_modules/openai/index.mjs":
/*!**************************************************************!*\
  !*** ./node_modules/langchain/node_modules/openai/index.mjs ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   APIConnectionError: () => (/* binding */ APIConnectionError),\n/* harmony export */   APIConnectionTimeoutError: () => (/* binding */ APIConnectionTimeoutError),\n/* harmony export */   APIError: () => (/* binding */ APIError),\n/* harmony export */   APIUserAbortError: () => (/* binding */ APIUserAbortError),\n/* harmony export */   AuthenticationError: () => (/* binding */ AuthenticationError),\n/* harmony export */   BadRequestError: () => (/* binding */ BadRequestError),\n/* harmony export */   ConflictError: () => (/* binding */ ConflictError),\n/* harmony export */   InternalServerError: () => (/* binding */ InternalServerError),\n/* harmony export */   NotFoundError: () => (/* binding */ NotFoundError),\n/* harmony export */   OpenAI: () => (/* binding */ OpenAI),\n/* harmony export */   PermissionDeniedError: () => (/* binding */ PermissionDeniedError),\n/* harmony export */   RateLimitError: () => (/* binding */ RateLimitError),\n/* harmony export */   UnprocessableEntityError: () => (/* binding */ UnprocessableEntityError),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   fileFromPath: () => (/* binding */ fileFromPath),\n/* harmony export */   toFile: () => (/* binding */ toFile)\n/* harmony export */ });\n/* harmony import */ var _core_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./core.mjs */ \"(rsc)/./node_modules/langchain/node_modules/openai/core.mjs\");\n/* harmony import */ var _pagination_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./pagination.mjs */ \"(rsc)/./node_modules/langchain/node_modules/openai/pagination.mjs\");\n/* harmony import */ var _resources_index_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./resources/index.mjs */ \"(rsc)/./node_modules/langchain/node_modules/openai/resources/index.mjs\");\n/* harmony import */ var _error_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./error.mjs */ \"(rsc)/./node_modules/langchain/node_modules/openai/error.mjs\");\n/* harmony import */ var _uploads_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./uploads.mjs */ \"(rsc)/./node_modules/langchain/node_modules/openai/uploads.mjs\");\n// File generated from our OpenAPI spec by Stainless.\nvar _a;\n\n\n\n\n\n/** API Client for interfacing with the OpenAI API. */ class OpenAI extends _core_mjs__WEBPACK_IMPORTED_MODULE_0__.APIClient {\n    /**\n   * API Client for interfacing with the OpenAI API.\n   *\n   * @param {string} [opts.apiKey=process.env['OPENAI_API_KEY']] - The API Key to send to the API.\n   * @param {string} [opts.baseURL] - Override the default base URL for the API.\n   * @param {number} [opts.timeout=10 minutes] - The maximum amount of time (in milliseconds) the client will wait for a response before timing out.\n   * @param {number} [opts.httpAgent] - An HTTP agent used to manage HTTP(s) connections.\n   * @param {Core.Fetch} [opts.fetch] - Specify a custom `fetch` function implementation.\n   * @param {number} [opts.maxRetries=2] - The maximum number of times the client will retry a request.\n   * @param {Core.Headers} opts.defaultHeaders - Default headers to include with every request to the API.\n   * @param {Core.DefaultQuery} opts.defaultQuery - Default query parameters to include with every request to the API.\n   * @param {boolean} [opts.dangerouslyAllowBrowser=false] - By default, client-side use of this library is not allowed, as it risks exposing your secret API credentials to attackers.\n   * @param {string | null} [opts.organization]\n   */ constructor(_b){\n        var _c, _d;\n        var { apiKey = _core_mjs__WEBPACK_IMPORTED_MODULE_0__.readEnv(\"OPENAI_API_KEY\"), organization = (_c = _core_mjs__WEBPACK_IMPORTED_MODULE_0__.readEnv(\"OPENAI_ORG_ID\")) !== null && _c !== void 0 ? _c : null, ...opts } = _b === void 0 ? {} : _b;\n        if (apiKey === undefined) {\n            throw new Error(\"The OPENAI_API_KEY environment variable is missing or empty; either provide it, or instantiate the OpenAI client with an apiKey option, like new OpenAI({ apiKey: 'my apiKey' }).\");\n        }\n        const options = {\n            apiKey,\n            organization,\n            baseURL: `https://api.openai.com/v1`,\n            ...opts\n        };\n        if (!options.dangerouslyAllowBrowser && _core_mjs__WEBPACK_IMPORTED_MODULE_0__.isRunningInBrowser()) {\n            throw new Error(\"It looks like you're running in a browser-like environment.\\n\\nThis is disabled by default, as it risks exposing your secret API credentials to attackers.\\nIf you understand the risks and have appropriate mitigations in place,\\nyou can set the `dangerouslyAllowBrowser` option to `true`, e.g.,\\n\\nnew OpenAI({ apiKey, dangerouslyAllowBrowser: true });\\n\\nhttps://help.openai.com/en/articles/5112595-best-practices-for-api-key-safety\\n\");\n        }\n        super({\n            baseURL: options.baseURL,\n            timeout: (_d = options.timeout) !== null && _d !== void 0 ? _d : 600000 /* 10 minutes */ ,\n            httpAgent: options.httpAgent,\n            maxRetries: options.maxRetries,\n            fetch: options.fetch\n        });\n        this.completions = new _resources_index_mjs__WEBPACK_IMPORTED_MODULE_2__.Completions(this);\n        this.chat = new _resources_index_mjs__WEBPACK_IMPORTED_MODULE_2__.Chat(this);\n        this.edits = new _resources_index_mjs__WEBPACK_IMPORTED_MODULE_2__.Edits(this);\n        this.embeddings = new _resources_index_mjs__WEBPACK_IMPORTED_MODULE_2__.Embeddings(this);\n        this.files = new _resources_index_mjs__WEBPACK_IMPORTED_MODULE_2__.Files(this);\n        this.images = new _resources_index_mjs__WEBPACK_IMPORTED_MODULE_2__.Images(this);\n        this.audio = new _resources_index_mjs__WEBPACK_IMPORTED_MODULE_2__.Audio(this);\n        this.moderations = new _resources_index_mjs__WEBPACK_IMPORTED_MODULE_2__.Moderations(this);\n        this.models = new _resources_index_mjs__WEBPACK_IMPORTED_MODULE_2__.Models(this);\n        this.fineTuning = new _resources_index_mjs__WEBPACK_IMPORTED_MODULE_2__.FineTuning(this);\n        this.fineTunes = new _resources_index_mjs__WEBPACK_IMPORTED_MODULE_2__.FineTunes(this);\n        this._options = options;\n        this.apiKey = apiKey;\n        this.organization = organization;\n    }\n    defaultQuery() {\n        return this._options.defaultQuery;\n    }\n    defaultHeaders(opts) {\n        return {\n            ...super.defaultHeaders(opts),\n            \"OpenAI-Organization\": this.organization,\n            ...this._options.defaultHeaders\n        };\n    }\n    authHeaders(opts) {\n        return {\n            Authorization: `Bearer ${this.apiKey}`\n        };\n    }\n}\n_a = OpenAI;\nOpenAI.OpenAI = _a;\nOpenAI.APIError = _error_mjs__WEBPACK_IMPORTED_MODULE_3__.APIError;\nOpenAI.APIConnectionError = _error_mjs__WEBPACK_IMPORTED_MODULE_3__.APIConnectionError;\nOpenAI.APIConnectionTimeoutError = _error_mjs__WEBPACK_IMPORTED_MODULE_3__.APIConnectionTimeoutError;\nOpenAI.APIUserAbortError = _error_mjs__WEBPACK_IMPORTED_MODULE_3__.APIUserAbortError;\nOpenAI.NotFoundError = _error_mjs__WEBPACK_IMPORTED_MODULE_3__.NotFoundError;\nOpenAI.ConflictError = _error_mjs__WEBPACK_IMPORTED_MODULE_3__.ConflictError;\nOpenAI.RateLimitError = _error_mjs__WEBPACK_IMPORTED_MODULE_3__.RateLimitError;\nOpenAI.BadRequestError = _error_mjs__WEBPACK_IMPORTED_MODULE_3__.BadRequestError;\nOpenAI.AuthenticationError = _error_mjs__WEBPACK_IMPORTED_MODULE_3__.AuthenticationError;\nOpenAI.InternalServerError = _error_mjs__WEBPACK_IMPORTED_MODULE_3__.InternalServerError;\nOpenAI.PermissionDeniedError = _error_mjs__WEBPACK_IMPORTED_MODULE_3__.PermissionDeniedError;\nOpenAI.UnprocessableEntityError = _error_mjs__WEBPACK_IMPORTED_MODULE_3__.UnprocessableEntityError;\nconst { APIError, APIConnectionError, APIConnectionTimeoutError, APIUserAbortError, NotFoundError, ConflictError, RateLimitError, BadRequestError, AuthenticationError, InternalServerError, PermissionDeniedError, UnprocessableEntityError } = _error_mjs__WEBPACK_IMPORTED_MODULE_3__;\nvar toFile = _uploads_mjs__WEBPACK_IMPORTED_MODULE_4__.toFile;\nvar fileFromPath = _uploads_mjs__WEBPACK_IMPORTED_MODULE_4__.fileFromPath;\n(function(OpenAI) {\n    // Helper functions\n    OpenAI.toFile = _uploads_mjs__WEBPACK_IMPORTED_MODULE_4__.toFile;\n    OpenAI.fileFromPath = _uploads_mjs__WEBPACK_IMPORTED_MODULE_4__.fileFromPath;\n    OpenAI.Page = _pagination_mjs__WEBPACK_IMPORTED_MODULE_1__.Page;\n    OpenAI.CursorPage = _pagination_mjs__WEBPACK_IMPORTED_MODULE_1__.CursorPage;\n    OpenAI.Completions = _resources_index_mjs__WEBPACK_IMPORTED_MODULE_2__.Completions;\n    OpenAI.Chat = _resources_index_mjs__WEBPACK_IMPORTED_MODULE_2__.Chat;\n    OpenAI.Edits = _resources_index_mjs__WEBPACK_IMPORTED_MODULE_2__.Edits;\n    OpenAI.Embeddings = _resources_index_mjs__WEBPACK_IMPORTED_MODULE_2__.Embeddings;\n    OpenAI.Files = _resources_index_mjs__WEBPACK_IMPORTED_MODULE_2__.Files;\n    OpenAI.FileObjectsPage = _resources_index_mjs__WEBPACK_IMPORTED_MODULE_2__.FileObjectsPage;\n    OpenAI.Images = _resources_index_mjs__WEBPACK_IMPORTED_MODULE_2__.Images;\n    OpenAI.Audio = _resources_index_mjs__WEBPACK_IMPORTED_MODULE_2__.Audio;\n    OpenAI.Moderations = _resources_index_mjs__WEBPACK_IMPORTED_MODULE_2__.Moderations;\n    OpenAI.Models = _resources_index_mjs__WEBPACK_IMPORTED_MODULE_2__.Models;\n    OpenAI.ModelsPage = _resources_index_mjs__WEBPACK_IMPORTED_MODULE_2__.ModelsPage;\n    OpenAI.FineTuning = _resources_index_mjs__WEBPACK_IMPORTED_MODULE_2__.FineTuning;\n    OpenAI.FineTunes = _resources_index_mjs__WEBPACK_IMPORTED_MODULE_2__.FineTunes;\n    OpenAI.FineTunesPage = _resources_index_mjs__WEBPACK_IMPORTED_MODULE_2__.FineTunesPage;\n})(OpenAI || (OpenAI = {}));\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (OpenAI); //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/node_modules/openai/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/node_modules/openai/pagination.mjs":
/*!*******************************************************************!*\
  !*** ./node_modules/langchain/node_modules/openai/pagination.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CursorPage: () => (/* binding */ CursorPage),\n/* harmony export */   Page: () => (/* binding */ Page)\n/* harmony export */ });\n/* harmony import */ var _core_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./core.mjs */ \"(rsc)/./node_modules/langchain/node_modules/openai/core.mjs\");\n// File generated from our OpenAPI spec by Stainless.\n\n/**\n * Note: no pagination actually occurs yet, this is for forwards-compatibility.\n */ class Page extends _core_mjs__WEBPACK_IMPORTED_MODULE_0__.AbstractPage {\n    constructor(client, response, body, options){\n        super(client, response, body, options);\n        this.object = body.object;\n        this.data = body.data;\n    }\n    getPaginatedItems() {\n        return this.data;\n    }\n    // @deprecated Please use `nextPageInfo()` instead\n    /**\n   * This page represents a response that isn't actually paginated at the API level\n   * so there will never be any next page params.\n   */ nextPageParams() {\n        return null;\n    }\n    nextPageInfo() {\n        return null;\n    }\n}\nclass CursorPage extends _core_mjs__WEBPACK_IMPORTED_MODULE_0__.AbstractPage {\n    constructor(client, response, body, options){\n        super(client, response, body, options);\n        this.data = body.data;\n    }\n    getPaginatedItems() {\n        return this.data;\n    }\n    // @deprecated Please use `nextPageInfo()` instead\n    nextPageParams() {\n        const info = this.nextPageInfo();\n        if (!info) return null;\n        if (\"params\" in info) return info.params;\n        const params = Object.fromEntries(info.url.searchParams);\n        if (!Object.keys(params).length) return null;\n        return params;\n    }\n    nextPageInfo() {\n        var _a, _b;\n        if (!((_a = this.data) === null || _a === void 0 ? void 0 : _a.length)) {\n            return null;\n        }\n        const next = (_b = this.data[this.data.length - 1]) === null || _b === void 0 ? void 0 : _b.id;\n        if (!next) return null;\n        return {\n            params: {\n                after: next\n            }\n        };\n    }\n} //# sourceMappingURL=pagination.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL25vZGVfbW9kdWxlcy9vcGVuYWkvcGFnaW5hdGlvbi5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEscURBQXFEO0FBQ1g7QUFDMUM7O0NBRUMsR0FDTSxNQUFNQyxhQUFhRCxtREFBWUE7SUFDcENFLFlBQVlDLE1BQU0sRUFBRUMsUUFBUSxFQUFFQyxJQUFJLEVBQUVDLE9BQU8sQ0FBRTtRQUMzQyxLQUFLLENBQUNILFFBQVFDLFVBQVVDLE1BQU1DO1FBQzlCLElBQUksQ0FBQ0MsTUFBTSxHQUFHRixLQUFLRSxNQUFNO1FBQ3pCLElBQUksQ0FBQ0MsSUFBSSxHQUFHSCxLQUFLRyxJQUFJO0lBQ3ZCO0lBQ0FDLG9CQUFvQjtRQUNsQixPQUFPLElBQUksQ0FBQ0QsSUFBSTtJQUNsQjtJQUNBLGtEQUFrRDtJQUNsRDs7O0dBR0MsR0FDREUsaUJBQWlCO1FBQ2YsT0FBTztJQUNUO0lBQ0FDLGVBQWU7UUFDYixPQUFPO0lBQ1Q7QUFDRjtBQUNPLE1BQU1DLG1CQUFtQlosbURBQVlBO0lBQzFDRSxZQUFZQyxNQUFNLEVBQUVDLFFBQVEsRUFBRUMsSUFBSSxFQUFFQyxPQUFPLENBQUU7UUFDM0MsS0FBSyxDQUFDSCxRQUFRQyxVQUFVQyxNQUFNQztRQUM5QixJQUFJLENBQUNFLElBQUksR0FBR0gsS0FBS0csSUFBSTtJQUN2QjtJQUNBQyxvQkFBb0I7UUFDbEIsT0FBTyxJQUFJLENBQUNELElBQUk7SUFDbEI7SUFDQSxrREFBa0Q7SUFDbERFLGlCQUFpQjtRQUNmLE1BQU1HLE9BQU8sSUFBSSxDQUFDRixZQUFZO1FBQzlCLElBQUksQ0FBQ0UsTUFBTSxPQUFPO1FBQ2xCLElBQUksWUFBWUEsTUFBTSxPQUFPQSxLQUFLQyxNQUFNO1FBQ3hDLE1BQU1BLFNBQVNDLE9BQU9DLFdBQVcsQ0FBQ0gsS0FBS0ksR0FBRyxDQUFDQyxZQUFZO1FBQ3ZELElBQUksQ0FBQ0gsT0FBT0ksSUFBSSxDQUFDTCxRQUFRTSxNQUFNLEVBQUUsT0FBTztRQUN4QyxPQUFPTjtJQUNUO0lBQ0FILGVBQWU7UUFDYixJQUFJVSxJQUFJQztRQUNSLElBQUksQ0FBRSxFQUFDRCxLQUFLLElBQUksQ0FBQ2IsSUFBSSxNQUFNLFFBQVFhLE9BQU8sS0FBSyxJQUFJLEtBQUssSUFBSUEsR0FBR0QsTUFBTSxHQUFHO1lBQ3RFLE9BQU87UUFDVDtRQUNBLE1BQU1HLE9BQU8sQ0FBQ0QsS0FBSyxJQUFJLENBQUNkLElBQUksQ0FBQyxJQUFJLENBQUNBLElBQUksQ0FBQ1ksTUFBTSxHQUFHLEVBQUUsTUFBTSxRQUFRRSxPQUFPLEtBQUssSUFBSSxLQUFLLElBQUlBLEdBQUdFLEVBQUU7UUFDOUYsSUFBSSxDQUFDRCxNQUFNLE9BQU87UUFDbEIsT0FBTztZQUFFVCxRQUFRO2dCQUFFVyxPQUFPRjtZQUFLO1FBQUU7SUFDbkM7QUFDRixFQUNBLHVDQUF1QyIsInNvdXJjZXMiOlsid2VicGFjazovL3F1aWxsLy4vbm9kZV9tb2R1bGVzL2xhbmdjaGFpbi9ub2RlX21vZHVsZXMvb3BlbmFpL3BhZ2luYXRpb24ubWpzPzI4OTIiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy5cbmltcG9ydCB7IEFic3RyYWN0UGFnZSB9IGZyb20gJy4vY29yZS5tanMnO1xuLyoqXG4gKiBOb3RlOiBubyBwYWdpbmF0aW9uIGFjdHVhbGx5IG9jY3VycyB5ZXQsIHRoaXMgaXMgZm9yIGZvcndhcmRzLWNvbXBhdGliaWxpdHkuXG4gKi9cbmV4cG9ydCBjbGFzcyBQYWdlIGV4dGVuZHMgQWJzdHJhY3RQYWdlIHtcbiAgY29uc3RydWN0b3IoY2xpZW50LCByZXNwb25zZSwgYm9keSwgb3B0aW9ucykge1xuICAgIHN1cGVyKGNsaWVudCwgcmVzcG9uc2UsIGJvZHksIG9wdGlvbnMpO1xuICAgIHRoaXMub2JqZWN0ID0gYm9keS5vYmplY3Q7XG4gICAgdGhpcy5kYXRhID0gYm9keS5kYXRhO1xuICB9XG4gIGdldFBhZ2luYXRlZEl0ZW1zKCkge1xuICAgIHJldHVybiB0aGlzLmRhdGE7XG4gIH1cbiAgLy8gQGRlcHJlY2F0ZWQgUGxlYXNlIHVzZSBgbmV4dFBhZ2VJbmZvKClgIGluc3RlYWRcbiAgLyoqXG4gICAqIFRoaXMgcGFnZSByZXByZXNlbnRzIGEgcmVzcG9uc2UgdGhhdCBpc24ndCBhY3R1YWxseSBwYWdpbmF0ZWQgYXQgdGhlIEFQSSBsZXZlbFxuICAgKiBzbyB0aGVyZSB3aWxsIG5ldmVyIGJlIGFueSBuZXh0IHBhZ2UgcGFyYW1zLlxuICAgKi9cbiAgbmV4dFBhZ2VQYXJhbXMoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgbmV4dFBhZ2VJbmZvKCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG59XG5leHBvcnQgY2xhc3MgQ3Vyc29yUGFnZSBleHRlbmRzIEFic3RyYWN0UGFnZSB7XG4gIGNvbnN0cnVjdG9yKGNsaWVudCwgcmVzcG9uc2UsIGJvZHksIG9wdGlvbnMpIHtcbiAgICBzdXBlcihjbGllbnQsIHJlc3BvbnNlLCBib2R5LCBvcHRpb25zKTtcbiAgICB0aGlzLmRhdGEgPSBib2R5LmRhdGE7XG4gIH1cbiAgZ2V0UGFnaW5hdGVkSXRlbXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuZGF0YTtcbiAgfVxuICAvLyBAZGVwcmVjYXRlZCBQbGVhc2UgdXNlIGBuZXh0UGFnZUluZm8oKWAgaW5zdGVhZFxuICBuZXh0UGFnZVBhcmFtcygpIHtcbiAgICBjb25zdCBpbmZvID0gdGhpcy5uZXh0UGFnZUluZm8oKTtcbiAgICBpZiAoIWluZm8pIHJldHVybiBudWxsO1xuICAgIGlmICgncGFyYW1zJyBpbiBpbmZvKSByZXR1cm4gaW5mby5wYXJhbXM7XG4gICAgY29uc3QgcGFyYW1zID0gT2JqZWN0LmZyb21FbnRyaWVzKGluZm8udXJsLnNlYXJjaFBhcmFtcyk7XG4gICAgaWYgKCFPYmplY3Qua2V5cyhwYXJhbXMpLmxlbmd0aCkgcmV0dXJuIG51bGw7XG4gICAgcmV0dXJuIHBhcmFtcztcbiAgfVxuICBuZXh0UGFnZUluZm8oKSB7XG4gICAgdmFyIF9hLCBfYjtcbiAgICBpZiAoISgoX2EgPSB0aGlzLmRhdGEpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5sZW5ndGgpKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgY29uc3QgbmV4dCA9IChfYiA9IHRoaXMuZGF0YVt0aGlzLmRhdGEubGVuZ3RoIC0gMV0pID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5pZDtcbiAgICBpZiAoIW5leHQpIHJldHVybiBudWxsO1xuICAgIHJldHVybiB7IHBhcmFtczogeyBhZnRlcjogbmV4dCB9IH07XG4gIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhZ2luYXRpb24ubWpzLm1hcFxuIl0sIm5hbWVzIjpbIkFic3RyYWN0UGFnZSIsIlBhZ2UiLCJjb25zdHJ1Y3RvciIsImNsaWVudCIsInJlc3BvbnNlIiwiYm9keSIsIm9wdGlvbnMiLCJvYmplY3QiLCJkYXRhIiwiZ2V0UGFnaW5hdGVkSXRlbXMiLCJuZXh0UGFnZVBhcmFtcyIsIm5leHRQYWdlSW5mbyIsIkN1cnNvclBhZ2UiLCJpbmZvIiwicGFyYW1zIiwiT2JqZWN0IiwiZnJvbUVudHJpZXMiLCJ1cmwiLCJzZWFyY2hQYXJhbXMiLCJrZXlzIiwibGVuZ3RoIiwiX2EiLCJfYiIsIm5leHQiLCJpZCIsImFmdGVyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/node_modules/openai/pagination.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/node_modules/openai/resource.mjs":
/*!*****************************************************************!*\
  !*** ./node_modules/langchain/node_modules/openai/resource.mjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   APIResource: () => (/* binding */ APIResource)\n/* harmony export */ });\n// File generated from our OpenAPI spec by Stainless.\nclass APIResource {\n    constructor(client){\n        this.client = client;\n        this.get = client.get.bind(client);\n        this.post = client.post.bind(client);\n        this.patch = client.patch.bind(client);\n        this.put = client.put.bind(client);\n        this.delete = client.delete.bind(client);\n        this.getAPIList = client.getAPIList.bind(client);\n    }\n} //# sourceMappingURL=resource.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2UubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxxREFBcUQ7QUFDOUMsTUFBTUE7SUFDWEMsWUFBWUMsTUFBTSxDQUFFO1FBQ2xCLElBQUksQ0FBQ0EsTUFBTSxHQUFHQTtRQUNkLElBQUksQ0FBQ0MsR0FBRyxHQUFHRCxPQUFPQyxHQUFHLENBQUNDLElBQUksQ0FBQ0Y7UUFDM0IsSUFBSSxDQUFDRyxJQUFJLEdBQUdILE9BQU9HLElBQUksQ0FBQ0QsSUFBSSxDQUFDRjtRQUM3QixJQUFJLENBQUNJLEtBQUssR0FBR0osT0FBT0ksS0FBSyxDQUFDRixJQUFJLENBQUNGO1FBQy9CLElBQUksQ0FBQ0ssR0FBRyxHQUFHTCxPQUFPSyxHQUFHLENBQUNILElBQUksQ0FBQ0Y7UUFDM0IsSUFBSSxDQUFDTSxNQUFNLEdBQUdOLE9BQU9NLE1BQU0sQ0FBQ0osSUFBSSxDQUFDRjtRQUNqQyxJQUFJLENBQUNPLFVBQVUsR0FBR1AsT0FBT08sVUFBVSxDQUFDTCxJQUFJLENBQUNGO0lBQzNDO0FBQ0YsRUFDQSxxQ0FBcUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9xdWlsbC8uL25vZGVfbW9kdWxlcy9sYW5nY2hhaW4vbm9kZV9tb2R1bGVzL29wZW5haS9yZXNvdXJjZS5tanM/ODBhNCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLlxuZXhwb3J0IGNsYXNzIEFQSVJlc291cmNlIHtcbiAgY29uc3RydWN0b3IoY2xpZW50KSB7XG4gICAgdGhpcy5jbGllbnQgPSBjbGllbnQ7XG4gICAgdGhpcy5nZXQgPSBjbGllbnQuZ2V0LmJpbmQoY2xpZW50KTtcbiAgICB0aGlzLnBvc3QgPSBjbGllbnQucG9zdC5iaW5kKGNsaWVudCk7XG4gICAgdGhpcy5wYXRjaCA9IGNsaWVudC5wYXRjaC5iaW5kKGNsaWVudCk7XG4gICAgdGhpcy5wdXQgPSBjbGllbnQucHV0LmJpbmQoY2xpZW50KTtcbiAgICB0aGlzLmRlbGV0ZSA9IGNsaWVudC5kZWxldGUuYmluZChjbGllbnQpO1xuICAgIHRoaXMuZ2V0QVBJTGlzdCA9IGNsaWVudC5nZXRBUElMaXN0LmJpbmQoY2xpZW50KTtcbiAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVzb3VyY2UubWpzLm1hcFxuIl0sIm5hbWVzIjpbIkFQSVJlc291cmNlIiwiY29uc3RydWN0b3IiLCJjbGllbnQiLCJnZXQiLCJiaW5kIiwicG9zdCIsInBhdGNoIiwicHV0IiwiZGVsZXRlIiwiZ2V0QVBJTGlzdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/node_modules/openai/resource.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/node_modules/openai/resources/audio/audio.mjs":
/*!******************************************************************************!*\
  !*** ./node_modules/langchain/node_modules/openai/resources/audio/audio.mjs ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Audio: () => (/* binding */ Audio)\n/* harmony export */ });\n/* harmony import */ var openai_resource__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai/resource */ \"(rsc)/./node_modules/langchain/node_modules/openai/resource.mjs\");\n/* harmony import */ var _transcriptions_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./transcriptions.mjs */ \"(rsc)/./node_modules/langchain/node_modules/openai/resources/audio/transcriptions.mjs\");\n/* harmony import */ var _translations_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./translations.mjs */ \"(rsc)/./node_modules/langchain/node_modules/openai/resources/audio/translations.mjs\");\n/* harmony import */ var _index_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./index.mjs */ \"(rsc)/./node_modules/langchain/node_modules/openai/resources/audio/index.mjs\");\n// File generated from our OpenAPI spec by Stainless.\n\n\n\n\nclass Audio extends openai_resource__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    constructor(){\n        super(...arguments);\n        this.transcriptions = new _transcriptions_mjs__WEBPACK_IMPORTED_MODULE_1__.Transcriptions(this.client);\n        this.translations = new _translations_mjs__WEBPACK_IMPORTED_MODULE_2__.Translations(this.client);\n    }\n}\n(function(Audio) {\n    Audio.Transcriptions = _index_mjs__WEBPACK_IMPORTED_MODULE_3__.Transcriptions;\n    Audio.Translations = _index_mjs__WEBPACK_IMPORTED_MODULE_3__.Translations;\n})(Audio || (Audio = {})); //# sourceMappingURL=audio.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2F1ZGlvL2F1ZGlvLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBLHFEQUFxRDtBQUNQO0FBQ1E7QUFDSjtBQUNmO0FBQzVCLE1BQU1JLGNBQWNKLHdEQUFXQTtJQUNwQ0ssYUFBYztRQUNaLEtBQUssSUFBSUM7UUFDVCxJQUFJLENBQUNDLGNBQWMsR0FBRyxJQUFJTiwrREFBY0EsQ0FBQyxJQUFJLENBQUNPLE1BQU07UUFDcEQsSUFBSSxDQUFDQyxZQUFZLEdBQUcsSUFBSVAsMkRBQVlBLENBQUMsSUFBSSxDQUFDTSxNQUFNO0lBQ2xEO0FBQ0Y7QUFDQyxVQUFVSixLQUFLO0lBQ2RBLE1BQU1ILGNBQWMsR0FBR0Usc0RBQWtCO0lBQ3pDQyxNQUFNRixZQUFZLEdBQUdDLG9EQUFnQjtBQUN2QyxHQUFHQyxTQUFVQSxDQUFBQSxRQUFRLENBQUMsS0FDdEIsa0NBQWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcXVpbGwvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2F1ZGlvL2F1ZGlvLm1qcz8xNzE1Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuXG5pbXBvcnQgeyBBUElSZXNvdXJjZSB9IGZyb20gJ29wZW5haS9yZXNvdXJjZSc7XG5pbXBvcnQgeyBUcmFuc2NyaXB0aW9ucyB9IGZyb20gJy4vdHJhbnNjcmlwdGlvbnMubWpzJztcbmltcG9ydCB7IFRyYW5zbGF0aW9ucyB9IGZyb20gJy4vdHJhbnNsYXRpb25zLm1qcyc7XG5pbXBvcnQgKiBhcyBBUEkgZnJvbSAnLi9pbmRleC5tanMnO1xuZXhwb3J0IGNsYXNzIEF1ZGlvIGV4dGVuZHMgQVBJUmVzb3VyY2Uge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgIHRoaXMudHJhbnNjcmlwdGlvbnMgPSBuZXcgVHJhbnNjcmlwdGlvbnModGhpcy5jbGllbnQpO1xuICAgIHRoaXMudHJhbnNsYXRpb25zID0gbmV3IFRyYW5zbGF0aW9ucyh0aGlzLmNsaWVudCk7XG4gIH1cbn1cbihmdW5jdGlvbiAoQXVkaW8pIHtcbiAgQXVkaW8uVHJhbnNjcmlwdGlvbnMgPSBBUEkuVHJhbnNjcmlwdGlvbnM7XG4gIEF1ZGlvLlRyYW5zbGF0aW9ucyA9IEFQSS5UcmFuc2xhdGlvbnM7XG59KShBdWRpbyB8fCAoQXVkaW8gPSB7fSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXVkaW8ubWpzLm1hcFxuIl0sIm5hbWVzIjpbIkFQSVJlc291cmNlIiwiVHJhbnNjcmlwdGlvbnMiLCJUcmFuc2xhdGlvbnMiLCJBUEkiLCJBdWRpbyIsImNvbnN0cnVjdG9yIiwiYXJndW1lbnRzIiwidHJhbnNjcmlwdGlvbnMiLCJjbGllbnQiLCJ0cmFuc2xhdGlvbnMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/node_modules/openai/resources/audio/audio.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/node_modules/openai/resources/audio/index.mjs":
/*!******************************************************************************!*\
  !*** ./node_modules/langchain/node_modules/openai/resources/audio/index.mjs ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Audio: () => (/* reexport safe */ _audio_mjs__WEBPACK_IMPORTED_MODULE_0__.Audio),\n/* harmony export */   Transcriptions: () => (/* reexport safe */ _transcriptions_mjs__WEBPACK_IMPORTED_MODULE_1__.Transcriptions),\n/* harmony export */   Translations: () => (/* reexport safe */ _translations_mjs__WEBPACK_IMPORTED_MODULE_2__.Translations)\n/* harmony export */ });\n/* harmony import */ var _audio_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./audio.mjs */ \"(rsc)/./node_modules/langchain/node_modules/openai/resources/audio/audio.mjs\");\n/* harmony import */ var _transcriptions_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./transcriptions.mjs */ \"(rsc)/./node_modules/langchain/node_modules/openai/resources/audio/transcriptions.mjs\");\n/* harmony import */ var _translations_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./translations.mjs */ \"(rsc)/./node_modules/langchain/node_modules/openai/resources/audio/translations.mjs\");\n// File generated from our OpenAPI spec by Stainless.\n\n\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2F1ZGlvL2luZGV4Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSxxREFBcUQ7QUFDakI7QUFDa0I7QUFDSixDQUNsRCxrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9xdWlsbC8uL25vZGVfbW9kdWxlcy9sYW5nY2hhaW4vbm9kZV9tb2R1bGVzL29wZW5haS9yZXNvdXJjZXMvYXVkaW8vaW5kZXgubWpzPzcyNGQiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy5cbmV4cG9ydCB7IEF1ZGlvIH0gZnJvbSAnLi9hdWRpby5tanMnO1xuZXhwb3J0IHsgVHJhbnNjcmlwdGlvbnMgfSBmcm9tICcuL3RyYW5zY3JpcHRpb25zLm1qcyc7XG5leHBvcnQgeyBUcmFuc2xhdGlvbnMgfSBmcm9tICcuL3RyYW5zbGF0aW9ucy5tanMnO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXgubWpzLm1hcFxuIl0sIm5hbWVzIjpbIkF1ZGlvIiwiVHJhbnNjcmlwdGlvbnMiLCJUcmFuc2xhdGlvbnMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/node_modules/openai/resources/audio/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/node_modules/openai/resources/audio/transcriptions.mjs":
/*!***************************************************************************************!*\
  !*** ./node_modules/langchain/node_modules/openai/resources/audio/transcriptions.mjs ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Transcriptions: () => (/* binding */ Transcriptions)\n/* harmony export */ });\n/* harmony import */ var openai_resource__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai/resource */ \"(rsc)/./node_modules/langchain/node_modules/openai/resource.mjs\");\n/* harmony import */ var openai_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! openai/core */ \"(rsc)/./node_modules/langchain/node_modules/openai/core.mjs\");\n// File generated from our OpenAPI spec by Stainless.\n\n\nclass Transcriptions extends openai_resource__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    /**\n   * Transcribes audio into the input language.\n   */ create(body, options) {\n        return this.post(\"/audio/transcriptions\", (0,openai_core__WEBPACK_IMPORTED_MODULE_1__.multipartFormRequestOptions)({\n            body,\n            ...options\n        }));\n    }\n}\n(function(Transcriptions) {})(Transcriptions || (Transcriptions = {})); //# sourceMappingURL=transcriptions.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2F1ZGlvL3RyYW5zY3JpcHRpb25zLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxxREFBcUQ7QUFDUDtBQUNZO0FBQ25ELE1BQU1FLHVCQUF1QkYsd0RBQVdBO0lBQzdDOztHQUVDLEdBQ0RHLE9BQU9DLElBQUksRUFBRUMsT0FBTyxFQUFFO1FBQ3BCLE9BQU8sSUFBSSxDQUFDQyxJQUFJLENBQUMseUJBQXlCTCx3RUFBMkJBLENBQUM7WUFBRUc7WUFBTSxHQUFHQyxPQUFPO1FBQUM7SUFDM0Y7QUFDRjtBQUNDLFVBQVVILGNBQWMsR0FBRyxHQUFHQSxrQkFBbUJBLENBQUFBLGlCQUFpQixDQUFDLEtBQ3BFLDJDQUEyQyIsInNvdXJjZXMiOlsid2VicGFjazovL3F1aWxsLy4vbm9kZV9tb2R1bGVzL2xhbmdjaGFpbi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9hdWRpby90cmFuc2NyaXB0aW9ucy5tanM/NTJhZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLlxuaW1wb3J0IHsgQVBJUmVzb3VyY2UgfSBmcm9tICdvcGVuYWkvcmVzb3VyY2UnO1xuaW1wb3J0IHsgbXVsdGlwYXJ0Rm9ybVJlcXVlc3RPcHRpb25zIH0gZnJvbSAnb3BlbmFpL2NvcmUnO1xuZXhwb3J0IGNsYXNzIFRyYW5zY3JpcHRpb25zIGV4dGVuZHMgQVBJUmVzb3VyY2Uge1xuICAvKipcbiAgICogVHJhbnNjcmliZXMgYXVkaW8gaW50byB0aGUgaW5wdXQgbGFuZ3VhZ2UuXG4gICAqL1xuICBjcmVhdGUoYm9keSwgb3B0aW9ucykge1xuICAgIHJldHVybiB0aGlzLnBvc3QoJy9hdWRpby90cmFuc2NyaXB0aW9ucycsIG11bHRpcGFydEZvcm1SZXF1ZXN0T3B0aW9ucyh7IGJvZHksIC4uLm9wdGlvbnMgfSkpO1xuICB9XG59XG4oZnVuY3Rpb24gKFRyYW5zY3JpcHRpb25zKSB7fSkoVHJhbnNjcmlwdGlvbnMgfHwgKFRyYW5zY3JpcHRpb25zID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRyYW5zY3JpcHRpb25zLm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJBUElSZXNvdXJjZSIsIm11bHRpcGFydEZvcm1SZXF1ZXN0T3B0aW9ucyIsIlRyYW5zY3JpcHRpb25zIiwiY3JlYXRlIiwiYm9keSIsIm9wdGlvbnMiLCJwb3N0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/node_modules/openai/resources/audio/transcriptions.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/node_modules/openai/resources/audio/translations.mjs":
/*!*************************************************************************************!*\
  !*** ./node_modules/langchain/node_modules/openai/resources/audio/translations.mjs ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Translations: () => (/* binding */ Translations)\n/* harmony export */ });\n/* harmony import */ var openai_resource__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai/resource */ \"(rsc)/./node_modules/langchain/node_modules/openai/resource.mjs\");\n/* harmony import */ var openai_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! openai/core */ \"(rsc)/./node_modules/langchain/node_modules/openai/core.mjs\");\n// File generated from our OpenAPI spec by Stainless.\n\n\nclass Translations extends openai_resource__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    /**\n   * Translates audio into English.\n   */ create(body, options) {\n        return this.post(\"/audio/translations\", (0,openai_core__WEBPACK_IMPORTED_MODULE_1__.multipartFormRequestOptions)({\n            body,\n            ...options\n        }));\n    }\n}\n(function(Translations) {})(Translations || (Translations = {})); //# sourceMappingURL=translations.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2F1ZGlvL3RyYW5zbGF0aW9ucy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEscURBQXFEO0FBQ1A7QUFDWTtBQUNuRCxNQUFNRSxxQkFBcUJGLHdEQUFXQTtJQUMzQzs7R0FFQyxHQUNERyxPQUFPQyxJQUFJLEVBQUVDLE9BQU8sRUFBRTtRQUNwQixPQUFPLElBQUksQ0FBQ0MsSUFBSSxDQUFDLHVCQUF1Qkwsd0VBQTJCQSxDQUFDO1lBQUVHO1lBQU0sR0FBR0MsT0FBTztRQUFDO0lBQ3pGO0FBQ0Y7QUFDQyxVQUFVSCxZQUFZLEdBQUcsR0FBR0EsZ0JBQWlCQSxDQUFBQSxlQUFlLENBQUMsS0FDOUQseUNBQXlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcXVpbGwvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2F1ZGlvL3RyYW5zbGF0aW9ucy5tanM/YTNlOSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLlxuaW1wb3J0IHsgQVBJUmVzb3VyY2UgfSBmcm9tICdvcGVuYWkvcmVzb3VyY2UnO1xuaW1wb3J0IHsgbXVsdGlwYXJ0Rm9ybVJlcXVlc3RPcHRpb25zIH0gZnJvbSAnb3BlbmFpL2NvcmUnO1xuZXhwb3J0IGNsYXNzIFRyYW5zbGF0aW9ucyBleHRlbmRzIEFQSVJlc291cmNlIHtcbiAgLyoqXG4gICAqIFRyYW5zbGF0ZXMgYXVkaW8gaW50byBFbmdsaXNoLlxuICAgKi9cbiAgY3JlYXRlKGJvZHksIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gdGhpcy5wb3N0KCcvYXVkaW8vdHJhbnNsYXRpb25zJywgbXVsdGlwYXJ0Rm9ybVJlcXVlc3RPcHRpb25zKHsgYm9keSwgLi4ub3B0aW9ucyB9KSk7XG4gIH1cbn1cbihmdW5jdGlvbiAoVHJhbnNsYXRpb25zKSB7fSkoVHJhbnNsYXRpb25zIHx8IChUcmFuc2xhdGlvbnMgPSB7fSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHJhbnNsYXRpb25zLm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJBUElSZXNvdXJjZSIsIm11bHRpcGFydEZvcm1SZXF1ZXN0T3B0aW9ucyIsIlRyYW5zbGF0aW9ucyIsImNyZWF0ZSIsImJvZHkiLCJvcHRpb25zIiwicG9zdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/node_modules/openai/resources/audio/translations.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/node_modules/openai/resources/chat/chat.mjs":
/*!****************************************************************************!*\
  !*** ./node_modules/langchain/node_modules/openai/resources/chat/chat.mjs ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Chat: () => (/* binding */ Chat)\n/* harmony export */ });\n/* harmony import */ var openai_resource__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai/resource */ \"(rsc)/./node_modules/langchain/node_modules/openai/resource.mjs\");\n/* harmony import */ var _completions_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./completions.mjs */ \"(rsc)/./node_modules/langchain/node_modules/openai/resources/chat/completions.mjs\");\n/* harmony import */ var _index_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./index.mjs */ \"(rsc)/./node_modules/langchain/node_modules/openai/resources/chat/index.mjs\");\n// File generated from our OpenAPI spec by Stainless.\n\n\n\nclass Chat extends openai_resource__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    constructor(){\n        super(...arguments);\n        this.completions = new _completions_mjs__WEBPACK_IMPORTED_MODULE_1__.Completions(this.client);\n    }\n}\n(function(Chat) {\n    Chat.Completions = _index_mjs__WEBPACK_IMPORTED_MODULE_2__.Completions;\n})(Chat || (Chat = {})); //# sourceMappingURL=chat.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2NoYXQvY2hhdC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLHFEQUFxRDtBQUNQO0FBQ0U7QUFDYjtBQUM1QixNQUFNRyxhQUFhSCx3REFBV0E7SUFDbkNJLGFBQWM7UUFDWixLQUFLLElBQUlDO1FBQ1QsSUFBSSxDQUFDQyxXQUFXLEdBQUcsSUFBSUwseURBQVdBLENBQUMsSUFBSSxDQUFDTSxNQUFNO0lBQ2hEO0FBQ0Y7QUFDQyxVQUFVSixJQUFJO0lBQ2JBLEtBQUtGLFdBQVcsR0FBR0MsbURBQWU7QUFDcEMsR0FBR0MsUUFBU0EsQ0FBQUEsT0FBTyxDQUFDLEtBQ3BCLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL3F1aWxsLy4vbm9kZV9tb2R1bGVzL2xhbmdjaGFpbi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9jaGF0L2NoYXQubWpzPzc2YmUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy5cbmltcG9ydCB7IEFQSVJlc291cmNlIH0gZnJvbSAnb3BlbmFpL3Jlc291cmNlJztcbmltcG9ydCB7IENvbXBsZXRpb25zIH0gZnJvbSAnLi9jb21wbGV0aW9ucy5tanMnO1xuaW1wb3J0ICogYXMgQVBJIGZyb20gJy4vaW5kZXgubWpzJztcbmV4cG9ydCBjbGFzcyBDaGF0IGV4dGVuZHMgQVBJUmVzb3VyY2Uge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgIHRoaXMuY29tcGxldGlvbnMgPSBuZXcgQ29tcGxldGlvbnModGhpcy5jbGllbnQpO1xuICB9XG59XG4oZnVuY3Rpb24gKENoYXQpIHtcbiAgQ2hhdC5Db21wbGV0aW9ucyA9IEFQSS5Db21wbGV0aW9ucztcbn0pKENoYXQgfHwgKENoYXQgPSB7fSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2hhdC5tanMubWFwXG4iXSwibmFtZXMiOlsiQVBJUmVzb3VyY2UiLCJDb21wbGV0aW9ucyIsIkFQSSIsIkNoYXQiLCJjb25zdHJ1Y3RvciIsImFyZ3VtZW50cyIsImNvbXBsZXRpb25zIiwiY2xpZW50Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/node_modules/openai/resources/chat/chat.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/node_modules/openai/resources/chat/completions.mjs":
/*!***********************************************************************************!*\
  !*** ./node_modules/langchain/node_modules/openai/resources/chat/completions.mjs ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Completions: () => (/* binding */ Completions)\n/* harmony export */ });\n/* harmony import */ var openai_resource__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai/resource */ \"(rsc)/./node_modules/langchain/node_modules/openai/resource.mjs\");\n// File generated from our OpenAPI spec by Stainless.\n\nclass Completions extends openai_resource__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    create(body, options) {\n        var _a;\n        return this.post(\"/chat/completions\", {\n            body,\n            ...options,\n            stream: (_a = body.stream) !== null && _a !== void 0 ? _a : false\n        });\n    }\n}\n(function(Completions) {})(Completions || (Completions = {})); //# sourceMappingURL=completions.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2NoYXQvY29tcGxldGlvbnMubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUEscURBQXFEO0FBQ1A7QUFDdkMsTUFBTUMsb0JBQW9CRCx3REFBV0E7SUFDMUNFLE9BQU9DLElBQUksRUFBRUMsT0FBTyxFQUFFO1FBQ3BCLElBQUlDO1FBQ0osT0FBTyxJQUFJLENBQUNDLElBQUksQ0FBQyxxQkFBcUI7WUFDcENIO1lBQ0EsR0FBR0MsT0FBTztZQUNWRyxRQUFRLENBQUNGLEtBQUtGLEtBQUtJLE1BQU0sTUFBTSxRQUFRRixPQUFPLEtBQUssSUFBSUEsS0FBSztRQUM5RDtJQUNGO0FBQ0Y7QUFDQyxVQUFVSixXQUFXLEdBQUcsR0FBR0EsZUFBZ0JBLENBQUFBLGNBQWMsQ0FBQyxLQUMzRCx3Q0FBd0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9xdWlsbC8uL25vZGVfbW9kdWxlcy9sYW5nY2hhaW4vbm9kZV9tb2R1bGVzL29wZW5haS9yZXNvdXJjZXMvY2hhdC9jb21wbGV0aW9ucy5tanM/N2U0NyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLlxuaW1wb3J0IHsgQVBJUmVzb3VyY2UgfSBmcm9tICdvcGVuYWkvcmVzb3VyY2UnO1xuZXhwb3J0IGNsYXNzIENvbXBsZXRpb25zIGV4dGVuZHMgQVBJUmVzb3VyY2Uge1xuICBjcmVhdGUoYm9keSwgb3B0aW9ucykge1xuICAgIHZhciBfYTtcbiAgICByZXR1cm4gdGhpcy5wb3N0KCcvY2hhdC9jb21wbGV0aW9ucycsIHtcbiAgICAgIGJvZHksXG4gICAgICAuLi5vcHRpb25zLFxuICAgICAgc3RyZWFtOiAoX2EgPSBib2R5LnN0cmVhbSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogZmFsc2UsXG4gICAgfSk7XG4gIH1cbn1cbihmdW5jdGlvbiAoQ29tcGxldGlvbnMpIHt9KShDb21wbGV0aW9ucyB8fCAoQ29tcGxldGlvbnMgPSB7fSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29tcGxldGlvbnMubWpzLm1hcFxuIl0sIm5hbWVzIjpbIkFQSVJlc291cmNlIiwiQ29tcGxldGlvbnMiLCJjcmVhdGUiLCJib2R5Iiwib3B0aW9ucyIsIl9hIiwicG9zdCIsInN0cmVhbSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/node_modules/openai/resources/chat/completions.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/node_modules/openai/resources/chat/index.mjs":
/*!*****************************************************************************!*\
  !*** ./node_modules/langchain/node_modules/openai/resources/chat/index.mjs ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Chat: () => (/* reexport safe */ _chat_mjs__WEBPACK_IMPORTED_MODULE_0__.Chat),\n/* harmony export */   Completions: () => (/* reexport safe */ _completions_mjs__WEBPACK_IMPORTED_MODULE_1__.Completions)\n/* harmony export */ });\n/* harmony import */ var _chat_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chat.mjs */ \"(rsc)/./node_modules/langchain/node_modules/openai/resources/chat/chat.mjs\");\n/* harmony import */ var _completions_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./completions.mjs */ \"(rsc)/./node_modules/langchain/node_modules/openai/resources/chat/completions.mjs\");\n// File generated from our OpenAPI spec by Stainless.\n\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2NoYXQvaW5kZXgubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSxxREFBcUQ7QUFDbkI7QUFDYyxDQUNoRCxrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9xdWlsbC8uL25vZGVfbW9kdWxlcy9sYW5nY2hhaW4vbm9kZV9tb2R1bGVzL29wZW5haS9yZXNvdXJjZXMvY2hhdC9pbmRleC5tanM/NDhhMCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLlxuZXhwb3J0IHsgQ2hhdCB9IGZyb20gJy4vY2hhdC5tanMnO1xuZXhwb3J0IHsgQ29tcGxldGlvbnMgfSBmcm9tICcuL2NvbXBsZXRpb25zLm1qcyc7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5tanMubWFwXG4iXSwibmFtZXMiOlsiQ2hhdCIsIkNvbXBsZXRpb25zIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/node_modules/openai/resources/chat/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/node_modules/openai/resources/completions.mjs":
/*!******************************************************************************!*\
  !*** ./node_modules/langchain/node_modules/openai/resources/completions.mjs ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Completions: () => (/* binding */ Completions)\n/* harmony export */ });\n/* harmony import */ var openai_resource__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai/resource */ \"(rsc)/./node_modules/langchain/node_modules/openai/resource.mjs\");\n// File generated from our OpenAPI spec by Stainless.\n\nclass Completions extends openai_resource__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    create(body, options) {\n        var _a;\n        return this.post(\"/completions\", {\n            body,\n            ...options,\n            stream: (_a = body.stream) !== null && _a !== void 0 ? _a : false\n        });\n    }\n}\n(function(Completions) {})(Completions || (Completions = {})); //# sourceMappingURL=completions.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2NvbXBsZXRpb25zLm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBLHFEQUFxRDtBQUNQO0FBQ3ZDLE1BQU1DLG9CQUFvQkQsd0RBQVdBO0lBQzFDRSxPQUFPQyxJQUFJLEVBQUVDLE9BQU8sRUFBRTtRQUNwQixJQUFJQztRQUNKLE9BQU8sSUFBSSxDQUFDQyxJQUFJLENBQUMsZ0JBQWdCO1lBQy9CSDtZQUNBLEdBQUdDLE9BQU87WUFDVkcsUUFBUSxDQUFDRixLQUFLRixLQUFLSSxNQUFNLE1BQU0sUUFBUUYsT0FBTyxLQUFLLElBQUlBLEtBQUs7UUFDOUQ7SUFDRjtBQUNGO0FBQ0MsVUFBVUosV0FBVyxHQUFHLEdBQUdBLGVBQWdCQSxDQUFBQSxjQUFjLENBQUMsS0FDM0Qsd0NBQXdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcXVpbGwvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2NvbXBsZXRpb25zLm1qcz81MTU1Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuXG5pbXBvcnQgeyBBUElSZXNvdXJjZSB9IGZyb20gJ29wZW5haS9yZXNvdXJjZSc7XG5leHBvcnQgY2xhc3MgQ29tcGxldGlvbnMgZXh0ZW5kcyBBUElSZXNvdXJjZSB7XG4gIGNyZWF0ZShib2R5LCBvcHRpb25zKSB7XG4gICAgdmFyIF9hO1xuICAgIHJldHVybiB0aGlzLnBvc3QoJy9jb21wbGV0aW9ucycsIHtcbiAgICAgIGJvZHksXG4gICAgICAuLi5vcHRpb25zLFxuICAgICAgc3RyZWFtOiAoX2EgPSBib2R5LnN0cmVhbSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogZmFsc2UsXG4gICAgfSk7XG4gIH1cbn1cbihmdW5jdGlvbiAoQ29tcGxldGlvbnMpIHt9KShDb21wbGV0aW9ucyB8fCAoQ29tcGxldGlvbnMgPSB7fSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29tcGxldGlvbnMubWpzLm1hcFxuIl0sIm5hbWVzIjpbIkFQSVJlc291cmNlIiwiQ29tcGxldGlvbnMiLCJjcmVhdGUiLCJib2R5Iiwib3B0aW9ucyIsIl9hIiwicG9zdCIsInN0cmVhbSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/node_modules/openai/resources/completions.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/node_modules/openai/resources/edits.mjs":
/*!************************************************************************!*\
  !*** ./node_modules/langchain/node_modules/openai/resources/edits.mjs ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Edits: () => (/* binding */ Edits)\n/* harmony export */ });\n/* harmony import */ var openai_resource__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai/resource */ \"(rsc)/./node_modules/langchain/node_modules/openai/resource.mjs\");\n// File generated from our OpenAPI spec by Stainless.\n\nclass Edits extends openai_resource__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    /**\n   * Creates a new edit for the provided input, instruction, and parameters.\n   *\n   * @deprecated The Edits API is deprecated; please use Chat Completions instead.\n   *\n   * https://openai.com/blog/gpt-4-api-general-availability#deprecation-of-the-edits-api\n   */ create(body, options) {\n        return this.post(\"/edits\", {\n            body,\n            ...options\n        });\n    }\n}\n(function(Edits) {})(Edits || (Edits = {})); //# sourceMappingURL=edits.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2VkaXRzLm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBLHFEQUFxRDtBQUNQO0FBQ3ZDLE1BQU1DLGNBQWNELHdEQUFXQTtJQUNwQzs7Ozs7O0dBTUMsR0FDREUsT0FBT0MsSUFBSSxFQUFFQyxPQUFPLEVBQUU7UUFDcEIsT0FBTyxJQUFJLENBQUNDLElBQUksQ0FBQyxVQUFVO1lBQUVGO1lBQU0sR0FBR0MsT0FBTztRQUFDO0lBQ2hEO0FBQ0Y7QUFDQyxVQUFVSCxLQUFLLEdBQUcsR0FBR0EsU0FBVUEsQ0FBQUEsUUFBUSxDQUFDLEtBQ3pDLGtDQUFrQyIsInNvdXJjZXMiOlsid2VicGFjazovL3F1aWxsLy4vbm9kZV9tb2R1bGVzL2xhbmdjaGFpbi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9lZGl0cy5tanM/YWI3YyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLlxuaW1wb3J0IHsgQVBJUmVzb3VyY2UgfSBmcm9tICdvcGVuYWkvcmVzb3VyY2UnO1xuZXhwb3J0IGNsYXNzIEVkaXRzIGV4dGVuZHMgQVBJUmVzb3VyY2Uge1xuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBlZGl0IGZvciB0aGUgcHJvdmlkZWQgaW5wdXQsIGluc3RydWN0aW9uLCBhbmQgcGFyYW1ldGVycy5cbiAgICpcbiAgICogQGRlcHJlY2F0ZWQgVGhlIEVkaXRzIEFQSSBpcyBkZXByZWNhdGVkOyBwbGVhc2UgdXNlIENoYXQgQ29tcGxldGlvbnMgaW5zdGVhZC5cbiAgICpcbiAgICogaHR0cHM6Ly9vcGVuYWkuY29tL2Jsb2cvZ3B0LTQtYXBpLWdlbmVyYWwtYXZhaWxhYmlsaXR5I2RlcHJlY2F0aW9uLW9mLXRoZS1lZGl0cy1hcGlcbiAgICovXG4gIGNyZWF0ZShib2R5LCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIHRoaXMucG9zdCgnL2VkaXRzJywgeyBib2R5LCAuLi5vcHRpb25zIH0pO1xuICB9XG59XG4oZnVuY3Rpb24gKEVkaXRzKSB7fSkoRWRpdHMgfHwgKEVkaXRzID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVkaXRzLm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJBUElSZXNvdXJjZSIsIkVkaXRzIiwiY3JlYXRlIiwiYm9keSIsIm9wdGlvbnMiLCJwb3N0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/node_modules/openai/resources/edits.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/node_modules/openai/resources/embeddings.mjs":
/*!*****************************************************************************!*\
  !*** ./node_modules/langchain/node_modules/openai/resources/embeddings.mjs ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Embeddings: () => (/* binding */ Embeddings)\n/* harmony export */ });\n/* harmony import */ var openai_resource__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai/resource */ \"(rsc)/./node_modules/langchain/node_modules/openai/resource.mjs\");\n// File generated from our OpenAPI spec by Stainless.\n\nclass Embeddings extends openai_resource__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    /**\n   * Creates an embedding vector representing the input text.\n   */ create(body, options) {\n        return this.post(\"/embeddings\", {\n            body,\n            ...options\n        });\n    }\n}\n(function(Embeddings) {})(Embeddings || (Embeddings = {})); //# sourceMappingURL=embeddings.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2VtYmVkZGluZ3MubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUEscURBQXFEO0FBQ1A7QUFDdkMsTUFBTUMsbUJBQW1CRCx3REFBV0E7SUFDekM7O0dBRUMsR0FDREUsT0FBT0MsSUFBSSxFQUFFQyxPQUFPLEVBQUU7UUFDcEIsT0FBTyxJQUFJLENBQUNDLElBQUksQ0FBQyxlQUFlO1lBQUVGO1lBQU0sR0FBR0MsT0FBTztRQUFDO0lBQ3JEO0FBQ0Y7QUFDQyxVQUFVSCxVQUFVLEdBQUcsR0FBR0EsY0FBZUEsQ0FBQUEsYUFBYSxDQUFDLEtBQ3hELHVDQUF1QyIsInNvdXJjZXMiOlsid2VicGFjazovL3F1aWxsLy4vbm9kZV9tb2R1bGVzL2xhbmdjaGFpbi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9lbWJlZGRpbmdzLm1qcz9jOTE2Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuXG5pbXBvcnQgeyBBUElSZXNvdXJjZSB9IGZyb20gJ29wZW5haS9yZXNvdXJjZSc7XG5leHBvcnQgY2xhc3MgRW1iZWRkaW5ncyBleHRlbmRzIEFQSVJlc291cmNlIHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYW4gZW1iZWRkaW5nIHZlY3RvciByZXByZXNlbnRpbmcgdGhlIGlucHV0IHRleHQuXG4gICAqL1xuICBjcmVhdGUoYm9keSwgb3B0aW9ucykge1xuICAgIHJldHVybiB0aGlzLnBvc3QoJy9lbWJlZGRpbmdzJywgeyBib2R5LCAuLi5vcHRpb25zIH0pO1xuICB9XG59XG4oZnVuY3Rpb24gKEVtYmVkZGluZ3MpIHt9KShFbWJlZGRpbmdzIHx8IChFbWJlZGRpbmdzID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVtYmVkZGluZ3MubWpzLm1hcFxuIl0sIm5hbWVzIjpbIkFQSVJlc291cmNlIiwiRW1iZWRkaW5ncyIsImNyZWF0ZSIsImJvZHkiLCJvcHRpb25zIiwicG9zdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/node_modules/openai/resources/embeddings.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/node_modules/openai/resources/files.mjs":
/*!************************************************************************!*\
  !*** ./node_modules/langchain/node_modules/openai/resources/files.mjs ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FileObjectsPage: () => (/* binding */ FileObjectsPage),\n/* harmony export */   Files: () => (/* binding */ Files)\n/* harmony export */ });\n/* harmony import */ var openai_resource__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai/resource */ \"(rsc)/./node_modules/langchain/node_modules/openai/resource.mjs\");\n/* harmony import */ var openai_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! openai/core */ \"(rsc)/./node_modules/langchain/node_modules/openai/core.mjs\");\n/* harmony import */ var openai_pagination__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! openai/pagination */ \"(rsc)/./node_modules/langchain/node_modules/openai/pagination.mjs\");\n// File generated from our OpenAPI spec by Stainless.\n\n\n\nclass Files extends openai_resource__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    /**\n   * Upload a file that contains document(s) to be used across various\n   * endpoints/features. Currently, the size of all the files uploaded by one\n   * organization can be up to 1 GB. Please contact us if you need to increase the\n   * storage limit.\n   */ create(body, options) {\n        return this.post(\"/files\", (0,openai_core__WEBPACK_IMPORTED_MODULE_1__.multipartFormRequestOptions)({\n            body,\n            ...options\n        }));\n    }\n    /**\n   * Returns information about a specific file.\n   */ retrieve(fileId, options) {\n        return this.get(`/files/${fileId}`, options);\n    }\n    /**\n   * Returns a list of files that belong to the user's organization.\n   */ list(options) {\n        return this.getAPIList(\"/files\", FileObjectsPage, options);\n    }\n    /**\n   * Delete a file.\n   */ del(fileId, options) {\n        return this.delete(`/files/${fileId}`, options);\n    }\n    /**\n   * Returns the contents of the specified file\n   */ retrieveContent(fileId, options) {\n        return this.get(`/files/${fileId}/content`, {\n            ...options,\n            headers: {\n                Accept: \"application/json\",\n                ...options === null || options === void 0 ? void 0 : options.headers\n            }\n        });\n    }\n}\n/**\n * Note: no pagination actually occurs yet, this is for forwards-compatibility.\n */ class FileObjectsPage extends openai_pagination__WEBPACK_IMPORTED_MODULE_2__.Page {\n}\n(function(Files) {})(Files || (Files = {})); //# sourceMappingURL=files.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2ZpbGVzLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBLHFEQUFxRDtBQUNQO0FBQ1k7QUFDakI7QUFDbEMsTUFBTUcsY0FBY0gsd0RBQVdBO0lBQ3BDOzs7OztHQUtDLEdBQ0RJLE9BQU9DLElBQUksRUFBRUMsT0FBTyxFQUFFO1FBQ3BCLE9BQU8sSUFBSSxDQUFDQyxJQUFJLENBQUMsVUFBVU4sd0VBQTJCQSxDQUFDO1lBQUVJO1lBQU0sR0FBR0MsT0FBTztRQUFDO0lBQzVFO0lBQ0E7O0dBRUMsR0FDREUsU0FBU0MsTUFBTSxFQUFFSCxPQUFPLEVBQUU7UUFDeEIsT0FBTyxJQUFJLENBQUNJLEdBQUcsQ0FBQyxDQUFDLE9BQU8sRUFBRUQsT0FBTyxDQUFDLEVBQUVIO0lBQ3RDO0lBQ0E7O0dBRUMsR0FDREssS0FBS0wsT0FBTyxFQUFFO1FBQ1osT0FBTyxJQUFJLENBQUNNLFVBQVUsQ0FBQyxVQUFVQyxpQkFBaUJQO0lBQ3BEO0lBQ0E7O0dBRUMsR0FDRFEsSUFBSUwsTUFBTSxFQUFFSCxPQUFPLEVBQUU7UUFDbkIsT0FBTyxJQUFJLENBQUNTLE1BQU0sQ0FBQyxDQUFDLE9BQU8sRUFBRU4sT0FBTyxDQUFDLEVBQUVIO0lBQ3pDO0lBQ0E7O0dBRUMsR0FDRFUsZ0JBQWdCUCxNQUFNLEVBQUVILE9BQU8sRUFBRTtRQUMvQixPQUFPLElBQUksQ0FBQ0ksR0FBRyxDQUFDLENBQUMsT0FBTyxFQUFFRCxPQUFPLFFBQVEsQ0FBQyxFQUFFO1lBQzFDLEdBQUdILE9BQU87WUFDVlcsU0FBUztnQkFDUEMsUUFBUTtnQkFDUixHQUFJWixZQUFZLFFBQVFBLFlBQVksS0FBSyxJQUFJLEtBQUssSUFBSUEsUUFBUVcsT0FBTztZQUN2RTtRQUNGO0lBQ0Y7QUFDRjtBQUNBOztDQUVDLEdBQ00sTUFBTUosd0JBQXdCWCxtREFBSUE7QUFBRTtBQUMxQyxVQUFVQyxLQUFLLEdBQUcsR0FBR0EsU0FBVUEsQ0FBQUEsUUFBUSxDQUFDLEtBQ3pDLGtDQUFrQyIsInNvdXJjZXMiOlsid2VicGFjazovL3F1aWxsLy4vbm9kZV9tb2R1bGVzL2xhbmdjaGFpbi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9maWxlcy5tanM/ZTJmZiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLlxuaW1wb3J0IHsgQVBJUmVzb3VyY2UgfSBmcm9tICdvcGVuYWkvcmVzb3VyY2UnO1xuaW1wb3J0IHsgbXVsdGlwYXJ0Rm9ybVJlcXVlc3RPcHRpb25zIH0gZnJvbSAnb3BlbmFpL2NvcmUnO1xuaW1wb3J0IHsgUGFnZSB9IGZyb20gJ29wZW5haS9wYWdpbmF0aW9uJztcbmV4cG9ydCBjbGFzcyBGaWxlcyBleHRlbmRzIEFQSVJlc291cmNlIHtcbiAgLyoqXG4gICAqIFVwbG9hZCBhIGZpbGUgdGhhdCBjb250YWlucyBkb2N1bWVudChzKSB0byBiZSB1c2VkIGFjcm9zcyB2YXJpb3VzXG4gICAqIGVuZHBvaW50cy9mZWF0dXJlcy4gQ3VycmVudGx5LCB0aGUgc2l6ZSBvZiBhbGwgdGhlIGZpbGVzIHVwbG9hZGVkIGJ5IG9uZVxuICAgKiBvcmdhbml6YXRpb24gY2FuIGJlIHVwIHRvIDEgR0IuIFBsZWFzZSBjb250YWN0IHVzIGlmIHlvdSBuZWVkIHRvIGluY3JlYXNlIHRoZVxuICAgKiBzdG9yYWdlIGxpbWl0LlxuICAgKi9cbiAgY3JlYXRlKGJvZHksIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gdGhpcy5wb3N0KCcvZmlsZXMnLCBtdWx0aXBhcnRGb3JtUmVxdWVzdE9wdGlvbnMoeyBib2R5LCAuLi5vcHRpb25zIH0pKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBpbmZvcm1hdGlvbiBhYm91dCBhIHNwZWNpZmljIGZpbGUuXG4gICAqL1xuICByZXRyaWV2ZShmaWxlSWQsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gdGhpcy5nZXQoYC9maWxlcy8ke2ZpbGVJZH1gLCBvcHRpb25zKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBhIGxpc3Qgb2YgZmlsZXMgdGhhdCBiZWxvbmcgdG8gdGhlIHVzZXIncyBvcmdhbml6YXRpb24uXG4gICAqL1xuICBsaXN0KG9wdGlvbnMpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRBUElMaXN0KCcvZmlsZXMnLCBGaWxlT2JqZWN0c1BhZ2UsIG9wdGlvbnMpO1xuICB9XG4gIC8qKlxuICAgKiBEZWxldGUgYSBmaWxlLlxuICAgKi9cbiAgZGVsKGZpbGVJZCwgb3B0aW9ucykge1xuICAgIHJldHVybiB0aGlzLmRlbGV0ZShgL2ZpbGVzLyR7ZmlsZUlkfWAsIG9wdGlvbnMpO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBjb250ZW50cyBvZiB0aGUgc3BlY2lmaWVkIGZpbGVcbiAgICovXG4gIHJldHJpZXZlQ29udGVudChmaWxlSWQsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gdGhpcy5nZXQoYC9maWxlcy8ke2ZpbGVJZH0vY29udGVudGAsIHtcbiAgICAgIC4uLm9wdGlvbnMsXG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgIEFjY2VwdDogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAuLi4ob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmhlYWRlcnMpLFxuICAgICAgfSxcbiAgICB9KTtcbiAgfVxufVxuLyoqXG4gKiBOb3RlOiBubyBwYWdpbmF0aW9uIGFjdHVhbGx5IG9jY3VycyB5ZXQsIHRoaXMgaXMgZm9yIGZvcndhcmRzLWNvbXBhdGliaWxpdHkuXG4gKi9cbmV4cG9ydCBjbGFzcyBGaWxlT2JqZWN0c1BhZ2UgZXh0ZW5kcyBQYWdlIHt9XG4oZnVuY3Rpb24gKEZpbGVzKSB7fSkoRmlsZXMgfHwgKEZpbGVzID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZpbGVzLm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJBUElSZXNvdXJjZSIsIm11bHRpcGFydEZvcm1SZXF1ZXN0T3B0aW9ucyIsIlBhZ2UiLCJGaWxlcyIsImNyZWF0ZSIsImJvZHkiLCJvcHRpb25zIiwicG9zdCIsInJldHJpZXZlIiwiZmlsZUlkIiwiZ2V0IiwibGlzdCIsImdldEFQSUxpc3QiLCJGaWxlT2JqZWN0c1BhZ2UiLCJkZWwiLCJkZWxldGUiLCJyZXRyaWV2ZUNvbnRlbnQiLCJoZWFkZXJzIiwiQWNjZXB0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/node_modules/openai/resources/files.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/node_modules/openai/resources/fine-tunes.mjs":
/*!*****************************************************************************!*\
  !*** ./node_modules/langchain/node_modules/openai/resources/fine-tunes.mjs ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FineTunes: () => (/* binding */ FineTunes),\n/* harmony export */   FineTunesPage: () => (/* binding */ FineTunesPage)\n/* harmony export */ });\n/* harmony import */ var openai_resource__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai/resource */ \"(rsc)/./node_modules/langchain/node_modules/openai/resource.mjs\");\n/* harmony import */ var openai_pagination__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! openai/pagination */ \"(rsc)/./node_modules/langchain/node_modules/openai/pagination.mjs\");\n// File generated from our OpenAPI spec by Stainless.\n\n\nclass FineTunes extends openai_resource__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    /**\n   * Creates a job that fine-tunes a specified model from a given dataset.\n   *\n   * Response includes details of the enqueued job including job status and the name\n   * of the fine-tuned models once complete.\n   *\n   * [Learn more about fine-tuning](/docs/guides/legacy-fine-tuning)\n   */ create(body, options) {\n        return this.post(\"/fine-tunes\", {\n            body,\n            ...options\n        });\n    }\n    /**\n   * Gets info about the fine-tune job.\n   *\n   * [Learn more about fine-tuning](/docs/guides/legacy-fine-tuning)\n   */ retrieve(fineTuneId, options) {\n        return this.get(`/fine-tunes/${fineTuneId}`, options);\n    }\n    /**\n   * List your organization's fine-tuning jobs\n   */ list(options) {\n        return this.getAPIList(\"/fine-tunes\", FineTunesPage, options);\n    }\n    /**\n   * Immediately cancel a fine-tune job.\n   */ cancel(fineTuneId, options) {\n        return this.post(`/fine-tunes/${fineTuneId}/cancel`, options);\n    }\n    listEvents(fineTuneId, query, options) {\n        var _a;\n        return this.get(`/fine-tunes/${fineTuneId}/events`, {\n            query,\n            timeout: 86400000,\n            ...options,\n            stream: (_a = query === null || query === void 0 ? void 0 : query.stream) !== null && _a !== void 0 ? _a : false\n        });\n    }\n}\n/**\n * Note: no pagination actually occurs yet, this is for forwards-compatibility.\n */ class FineTunesPage extends openai_pagination__WEBPACK_IMPORTED_MODULE_1__.Page {\n}\n(function(FineTunes) {})(FineTunes || (FineTunes = {})); //# sourceMappingURL=fine-tunes.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2ZpbmUtdHVuZXMubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSxxREFBcUQ7QUFDUDtBQUNMO0FBQ2xDLE1BQU1FLGtCQUFrQkYsd0RBQVdBO0lBQ3hDOzs7Ozs7O0dBT0MsR0FDREcsT0FBT0MsSUFBSSxFQUFFQyxPQUFPLEVBQUU7UUFDcEIsT0FBTyxJQUFJLENBQUNDLElBQUksQ0FBQyxlQUFlO1lBQUVGO1lBQU0sR0FBR0MsT0FBTztRQUFDO0lBQ3JEO0lBQ0E7Ozs7R0FJQyxHQUNERSxTQUFTQyxVQUFVLEVBQUVILE9BQU8sRUFBRTtRQUM1QixPQUFPLElBQUksQ0FBQ0ksR0FBRyxDQUFDLENBQUMsWUFBWSxFQUFFRCxXQUFXLENBQUMsRUFBRUg7SUFDL0M7SUFDQTs7R0FFQyxHQUNESyxLQUFLTCxPQUFPLEVBQUU7UUFDWixPQUFPLElBQUksQ0FBQ00sVUFBVSxDQUFDLGVBQWVDLGVBQWVQO0lBQ3ZEO0lBQ0E7O0dBRUMsR0FDRFEsT0FBT0wsVUFBVSxFQUFFSCxPQUFPLEVBQUU7UUFDMUIsT0FBTyxJQUFJLENBQUNDLElBQUksQ0FBQyxDQUFDLFlBQVksRUFBRUUsV0FBVyxPQUFPLENBQUMsRUFBRUg7SUFDdkQ7SUFDQVMsV0FBV04sVUFBVSxFQUFFTyxLQUFLLEVBQUVWLE9BQU8sRUFBRTtRQUNyQyxJQUFJVztRQUNKLE9BQU8sSUFBSSxDQUFDUCxHQUFHLENBQUMsQ0FBQyxZQUFZLEVBQUVELFdBQVcsT0FBTyxDQUFDLEVBQUU7WUFDbERPO1lBQ0FFLFNBQVM7WUFDVCxHQUFHWixPQUFPO1lBQ1ZhLFFBQ0UsQ0FBQ0YsS0FBS0QsVUFBVSxRQUFRQSxVQUFVLEtBQUssSUFBSSxLQUFLLElBQUlBLE1BQU1HLE1BQU0sTUFBTSxRQUFRRixPQUFPLEtBQUssSUFDeEZBLEtBQ0E7UUFDTjtJQUNGO0FBQ0Y7QUFDQTs7Q0FFQyxHQUNNLE1BQU1KLHNCQUFzQlgsbURBQUlBO0FBQUU7QUFDeEMsVUFBVUMsU0FBUyxHQUFHLEdBQUdBLGFBQWNBLENBQUFBLFlBQVksQ0FBQyxLQUNyRCx1Q0FBdUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9xdWlsbC8uL25vZGVfbW9kdWxlcy9sYW5nY2hhaW4vbm9kZV9tb2R1bGVzL29wZW5haS9yZXNvdXJjZXMvZmluZS10dW5lcy5tanM/MmY1OCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLlxuaW1wb3J0IHsgQVBJUmVzb3VyY2UgfSBmcm9tICdvcGVuYWkvcmVzb3VyY2UnO1xuaW1wb3J0IHsgUGFnZSB9IGZyb20gJ29wZW5haS9wYWdpbmF0aW9uJztcbmV4cG9ydCBjbGFzcyBGaW5lVHVuZXMgZXh0ZW5kcyBBUElSZXNvdXJjZSB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgam9iIHRoYXQgZmluZS10dW5lcyBhIHNwZWNpZmllZCBtb2RlbCBmcm9tIGEgZ2l2ZW4gZGF0YXNldC5cbiAgICpcbiAgICogUmVzcG9uc2UgaW5jbHVkZXMgZGV0YWlscyBvZiB0aGUgZW5xdWV1ZWQgam9iIGluY2x1ZGluZyBqb2Igc3RhdHVzIGFuZCB0aGUgbmFtZVxuICAgKiBvZiB0aGUgZmluZS10dW5lZCBtb2RlbHMgb25jZSBjb21wbGV0ZS5cbiAgICpcbiAgICogW0xlYXJuIG1vcmUgYWJvdXQgZmluZS10dW5pbmddKC9kb2NzL2d1aWRlcy9sZWdhY3ktZmluZS10dW5pbmcpXG4gICAqL1xuICBjcmVhdGUoYm9keSwgb3B0aW9ucykge1xuICAgIHJldHVybiB0aGlzLnBvc3QoJy9maW5lLXR1bmVzJywgeyBib2R5LCAuLi5vcHRpb25zIH0pO1xuICB9XG4gIC8qKlxuICAgKiBHZXRzIGluZm8gYWJvdXQgdGhlIGZpbmUtdHVuZSBqb2IuXG4gICAqXG4gICAqIFtMZWFybiBtb3JlIGFib3V0IGZpbmUtdHVuaW5nXSgvZG9jcy9ndWlkZXMvbGVnYWN5LWZpbmUtdHVuaW5nKVxuICAgKi9cbiAgcmV0cmlldmUoZmluZVR1bmVJZCwgb3B0aW9ucykge1xuICAgIHJldHVybiB0aGlzLmdldChgL2ZpbmUtdHVuZXMvJHtmaW5lVHVuZUlkfWAsIG9wdGlvbnMpO1xuICB9XG4gIC8qKlxuICAgKiBMaXN0IHlvdXIgb3JnYW5pemF0aW9uJ3MgZmluZS10dW5pbmcgam9ic1xuICAgKi9cbiAgbGlzdChvcHRpb25zKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0QVBJTGlzdCgnL2ZpbmUtdHVuZXMnLCBGaW5lVHVuZXNQYWdlLCBvcHRpb25zKTtcbiAgfVxuICAvKipcbiAgICogSW1tZWRpYXRlbHkgY2FuY2VsIGEgZmluZS10dW5lIGpvYi5cbiAgICovXG4gIGNhbmNlbChmaW5lVHVuZUlkLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIHRoaXMucG9zdChgL2ZpbmUtdHVuZXMvJHtmaW5lVHVuZUlkfS9jYW5jZWxgLCBvcHRpb25zKTtcbiAgfVxuICBsaXN0RXZlbnRzKGZpbmVUdW5lSWQsIHF1ZXJ5LCBvcHRpb25zKSB7XG4gICAgdmFyIF9hO1xuICAgIHJldHVybiB0aGlzLmdldChgL2ZpbmUtdHVuZXMvJHtmaW5lVHVuZUlkfS9ldmVudHNgLCB7XG4gICAgICBxdWVyeSxcbiAgICAgIHRpbWVvdXQ6IDg2NDAwMDAwLFxuICAgICAgLi4ub3B0aW9ucyxcbiAgICAgIHN0cmVhbTpcbiAgICAgICAgKF9hID0gcXVlcnkgPT09IG51bGwgfHwgcXVlcnkgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHF1ZXJ5LnN0cmVhbSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/XG4gICAgICAgICAgX2FcbiAgICAgICAgOiBmYWxzZSxcbiAgICB9KTtcbiAgfVxufVxuLyoqXG4gKiBOb3RlOiBubyBwYWdpbmF0aW9uIGFjdHVhbGx5IG9jY3VycyB5ZXQsIHRoaXMgaXMgZm9yIGZvcndhcmRzLWNvbXBhdGliaWxpdHkuXG4gKi9cbmV4cG9ydCBjbGFzcyBGaW5lVHVuZXNQYWdlIGV4dGVuZHMgUGFnZSB7fVxuKGZ1bmN0aW9uIChGaW5lVHVuZXMpIHt9KShGaW5lVHVuZXMgfHwgKEZpbmVUdW5lcyA9IHt9KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1maW5lLXR1bmVzLm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJBUElSZXNvdXJjZSIsIlBhZ2UiLCJGaW5lVHVuZXMiLCJjcmVhdGUiLCJib2R5Iiwib3B0aW9ucyIsInBvc3QiLCJyZXRyaWV2ZSIsImZpbmVUdW5lSWQiLCJnZXQiLCJsaXN0IiwiZ2V0QVBJTGlzdCIsIkZpbmVUdW5lc1BhZ2UiLCJjYW5jZWwiLCJsaXN0RXZlbnRzIiwicXVlcnkiLCJfYSIsInRpbWVvdXQiLCJzdHJlYW0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/node_modules/openai/resources/fine-tunes.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/node_modules/openai/resources/fine-tuning/fine-tuning.mjs":
/*!******************************************************************************************!*\
  !*** ./node_modules/langchain/node_modules/openai/resources/fine-tuning/fine-tuning.mjs ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FineTuning: () => (/* binding */ FineTuning)\n/* harmony export */ });\n/* harmony import */ var openai_resource__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai/resource */ \"(rsc)/./node_modules/langchain/node_modules/openai/resource.mjs\");\n/* harmony import */ var _jobs_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./jobs.mjs */ \"(rsc)/./node_modules/langchain/node_modules/openai/resources/fine-tuning/jobs.mjs\");\n/* harmony import */ var _index_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./index.mjs */ \"(rsc)/./node_modules/langchain/node_modules/openai/resources/fine-tuning/index.mjs\");\n// File generated from our OpenAPI spec by Stainless.\n\n\n\nclass FineTuning extends openai_resource__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    constructor(){\n        super(...arguments);\n        this.jobs = new _jobs_mjs__WEBPACK_IMPORTED_MODULE_1__.Jobs(this.client);\n    }\n}\n(function(FineTuning) {\n    FineTuning.Jobs = _index_mjs__WEBPACK_IMPORTED_MODULE_2__.Jobs;\n    FineTuning.FineTuningJobsPage = _index_mjs__WEBPACK_IMPORTED_MODULE_2__.FineTuningJobsPage;\n    FineTuning.FineTuningJobEventsPage = _index_mjs__WEBPACK_IMPORTED_MODULE_2__.FineTuningJobEventsPage;\n})(FineTuning || (FineTuning = {})); //# sourceMappingURL=fine-tuning.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2ZpbmUtdHVuaW5nL2ZpbmUtdHVuaW5nLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEscURBQXFEO0FBQ1A7QUFDWjtBQUNDO0FBQzVCLE1BQU1HLG1CQUFtQkgsd0RBQVdBO0lBQ3pDSSxhQUFjO1FBQ1osS0FBSyxJQUFJQztRQUNULElBQUksQ0FBQ0MsSUFBSSxHQUFHLElBQUlMLDJDQUFJQSxDQUFDLElBQUksQ0FBQ00sTUFBTTtJQUNsQztBQUNGO0FBQ0MsVUFBVUosVUFBVTtJQUNuQkEsV0FBV0YsSUFBSSxHQUFHQyw0Q0FBUTtJQUMxQkMsV0FBV0ssa0JBQWtCLEdBQUdOLDBEQUFzQjtJQUN0REMsV0FBV00sdUJBQXVCLEdBQUdQLCtEQUEyQjtBQUNsRSxHQUFHQyxjQUFlQSxDQUFBQSxhQUFhLENBQUMsS0FDaEMsd0NBQXdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcXVpbGwvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2ZpbmUtdHVuaW5nL2ZpbmUtdHVuaW5nLm1qcz9jYjhjIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuXG5pbXBvcnQgeyBBUElSZXNvdXJjZSB9IGZyb20gJ29wZW5haS9yZXNvdXJjZSc7XG5pbXBvcnQgeyBKb2JzIH0gZnJvbSAnLi9qb2JzLm1qcyc7XG5pbXBvcnQgKiBhcyBBUEkgZnJvbSAnLi9pbmRleC5tanMnO1xuZXhwb3J0IGNsYXNzIEZpbmVUdW5pbmcgZXh0ZW5kcyBBUElSZXNvdXJjZSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgdGhpcy5qb2JzID0gbmV3IEpvYnModGhpcy5jbGllbnQpO1xuICB9XG59XG4oZnVuY3Rpb24gKEZpbmVUdW5pbmcpIHtcbiAgRmluZVR1bmluZy5Kb2JzID0gQVBJLkpvYnM7XG4gIEZpbmVUdW5pbmcuRmluZVR1bmluZ0pvYnNQYWdlID0gQVBJLkZpbmVUdW5pbmdKb2JzUGFnZTtcbiAgRmluZVR1bmluZy5GaW5lVHVuaW5nSm9iRXZlbnRzUGFnZSA9IEFQSS5GaW5lVHVuaW5nSm9iRXZlbnRzUGFnZTtcbn0pKEZpbmVUdW5pbmcgfHwgKEZpbmVUdW5pbmcgPSB7fSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZmluZS10dW5pbmcubWpzLm1hcFxuIl0sIm5hbWVzIjpbIkFQSVJlc291cmNlIiwiSm9icyIsIkFQSSIsIkZpbmVUdW5pbmciLCJjb25zdHJ1Y3RvciIsImFyZ3VtZW50cyIsImpvYnMiLCJjbGllbnQiLCJGaW5lVHVuaW5nSm9ic1BhZ2UiLCJGaW5lVHVuaW5nSm9iRXZlbnRzUGFnZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/node_modules/openai/resources/fine-tuning/fine-tuning.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/node_modules/openai/resources/fine-tuning/index.mjs":
/*!************************************************************************************!*\
  !*** ./node_modules/langchain/node_modules/openai/resources/fine-tuning/index.mjs ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FineTuning: () => (/* reexport safe */ _fine_tuning_mjs__WEBPACK_IMPORTED_MODULE_0__.FineTuning),\n/* harmony export */   FineTuningJobEventsPage: () => (/* reexport safe */ _jobs_mjs__WEBPACK_IMPORTED_MODULE_1__.FineTuningJobEventsPage),\n/* harmony export */   FineTuningJobsPage: () => (/* reexport safe */ _jobs_mjs__WEBPACK_IMPORTED_MODULE_1__.FineTuningJobsPage),\n/* harmony export */   Jobs: () => (/* reexport safe */ _jobs_mjs__WEBPACK_IMPORTED_MODULE_1__.Jobs)\n/* harmony export */ });\n/* harmony import */ var _fine_tuning_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./fine-tuning.mjs */ \"(rsc)/./node_modules/langchain/node_modules/openai/resources/fine-tuning/fine-tuning.mjs\");\n/* harmony import */ var _jobs_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./jobs.mjs */ \"(rsc)/./node_modules/langchain/node_modules/openai/resources/fine-tuning/jobs.mjs\");\n// File generated from our OpenAPI spec by Stainless.\n\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2ZpbmUtdHVuaW5nL2luZGV4Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSxxREFBcUQ7QUFDTjtBQUNnQyxDQUMvRSxrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9xdWlsbC8uL25vZGVfbW9kdWxlcy9sYW5nY2hhaW4vbm9kZV9tb2R1bGVzL29wZW5haS9yZXNvdXJjZXMvZmluZS10dW5pbmcvaW5kZXgubWpzPzM1YWMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy5cbmV4cG9ydCB7IEZpbmVUdW5pbmcgfSBmcm9tICcuL2ZpbmUtdHVuaW5nLm1qcyc7XG5leHBvcnQgeyBGaW5lVHVuaW5nSm9ic1BhZ2UsIEZpbmVUdW5pbmdKb2JFdmVudHNQYWdlLCBKb2JzIH0gZnJvbSAnLi9qb2JzLm1qcyc7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5tanMubWFwXG4iXSwibmFtZXMiOlsiRmluZVR1bmluZyIsIkZpbmVUdW5pbmdKb2JzUGFnZSIsIkZpbmVUdW5pbmdKb2JFdmVudHNQYWdlIiwiSm9icyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/node_modules/openai/resources/fine-tuning/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/node_modules/openai/resources/fine-tuning/jobs.mjs":
/*!***********************************************************************************!*\
  !*** ./node_modules/langchain/node_modules/openai/resources/fine-tuning/jobs.mjs ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FineTuningJobEventsPage: () => (/* binding */ FineTuningJobEventsPage),\n/* harmony export */   FineTuningJobsPage: () => (/* binding */ FineTuningJobsPage),\n/* harmony export */   Jobs: () => (/* binding */ Jobs)\n/* harmony export */ });\n/* harmony import */ var openai_resource__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai/resource */ \"(rsc)/./node_modules/langchain/node_modules/openai/resource.mjs\");\n/* harmony import */ var openai_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! openai/core */ \"(rsc)/./node_modules/langchain/node_modules/openai/core.mjs\");\n/* harmony import */ var openai_pagination__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! openai/pagination */ \"(rsc)/./node_modules/langchain/node_modules/openai/pagination.mjs\");\n// File generated from our OpenAPI spec by Stainless.\n\n\n\nclass Jobs extends openai_resource__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    /**\n   * Creates a job that fine-tunes a specified model from a given dataset.\n   *\n   * Response includes details of the enqueued job including job status and the name\n   * of the fine-tuned models once complete.\n   *\n   * [Learn more about fine-tuning](/docs/guides/fine-tuning)\n   */ create(body, options) {\n        return this.post(\"/fine_tuning/jobs\", {\n            body,\n            ...options\n        });\n    }\n    /**\n   * Get info about a fine-tuning job.\n   *\n   * [Learn more about fine-tuning](/docs/guides/fine-tuning)\n   */ retrieve(fineTuningJobId, options) {\n        return this.get(`/fine_tuning/jobs/${fineTuningJobId}`, options);\n    }\n    list(query = {}, options) {\n        if ((0,openai_core__WEBPACK_IMPORTED_MODULE_1__.isRequestOptions)(query)) {\n            return this.list({}, query);\n        }\n        return this.getAPIList(\"/fine_tuning/jobs\", FineTuningJobsPage, {\n            query,\n            ...options\n        });\n    }\n    /**\n   * Immediately cancel a fine-tune job.\n   */ cancel(fineTuningJobId, options) {\n        return this.post(`/fine_tuning/jobs/${fineTuningJobId}/cancel`, options);\n    }\n    listEvents(fineTuningJobId, query = {}, options) {\n        if ((0,openai_core__WEBPACK_IMPORTED_MODULE_1__.isRequestOptions)(query)) {\n            return this.listEvents(fineTuningJobId, {}, query);\n        }\n        return this.getAPIList(`/fine_tuning/jobs/${fineTuningJobId}/events`, FineTuningJobEventsPage, {\n            query,\n            ...options\n        });\n    }\n}\nclass FineTuningJobsPage extends openai_pagination__WEBPACK_IMPORTED_MODULE_2__.CursorPage {\n}\nclass FineTuningJobEventsPage extends openai_pagination__WEBPACK_IMPORTED_MODULE_2__.CursorPage {\n}\n(function(Jobs) {})(Jobs || (Jobs = {})); //# sourceMappingURL=jobs.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2ZpbmUtdHVuaW5nL2pvYnMubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBLHFEQUFxRDtBQUNQO0FBQ0M7QUFDQTtBQUN4QyxNQUFNRyxhQUFhSCx3REFBV0E7SUFDbkM7Ozs7Ozs7R0FPQyxHQUNESSxPQUFPQyxJQUFJLEVBQUVDLE9BQU8sRUFBRTtRQUNwQixPQUFPLElBQUksQ0FBQ0MsSUFBSSxDQUFDLHFCQUFxQjtZQUFFRjtZQUFNLEdBQUdDLE9BQU87UUFBQztJQUMzRDtJQUNBOzs7O0dBSUMsR0FDREUsU0FBU0MsZUFBZSxFQUFFSCxPQUFPLEVBQUU7UUFDakMsT0FBTyxJQUFJLENBQUNJLEdBQUcsQ0FBQyxDQUFDLGtCQUFrQixFQUFFRCxnQkFBZ0IsQ0FBQyxFQUFFSDtJQUMxRDtJQUNBSyxLQUFLQyxRQUFRLENBQUMsQ0FBQyxFQUFFTixPQUFPLEVBQUU7UUFDeEIsSUFBSUwsNkRBQWdCQSxDQUFDVyxRQUFRO1lBQzNCLE9BQU8sSUFBSSxDQUFDRCxJQUFJLENBQUMsQ0FBQyxHQUFHQztRQUN2QjtRQUNBLE9BQU8sSUFBSSxDQUFDQyxVQUFVLENBQUMscUJBQXFCQyxvQkFBb0I7WUFBRUY7WUFBTyxHQUFHTixPQUFPO1FBQUM7SUFDdEY7SUFDQTs7R0FFQyxHQUNEUyxPQUFPTixlQUFlLEVBQUVILE9BQU8sRUFBRTtRQUMvQixPQUFPLElBQUksQ0FBQ0MsSUFBSSxDQUFDLENBQUMsa0JBQWtCLEVBQUVFLGdCQUFnQixPQUFPLENBQUMsRUFBRUg7SUFDbEU7SUFDQVUsV0FBV1AsZUFBZSxFQUFFRyxRQUFRLENBQUMsQ0FBQyxFQUFFTixPQUFPLEVBQUU7UUFDL0MsSUFBSUwsNkRBQWdCQSxDQUFDVyxRQUFRO1lBQzNCLE9BQU8sSUFBSSxDQUFDSSxVQUFVLENBQUNQLGlCQUFpQixDQUFDLEdBQUdHO1FBQzlDO1FBQ0EsT0FBTyxJQUFJLENBQUNDLFVBQVUsQ0FBQyxDQUFDLGtCQUFrQixFQUFFSixnQkFBZ0IsT0FBTyxDQUFDLEVBQUVRLHlCQUF5QjtZQUM3Rkw7WUFDQSxHQUFHTixPQUFPO1FBQ1o7SUFDRjtBQUNGO0FBQ08sTUFBTVEsMkJBQTJCWix5REFBVUE7QUFBRTtBQUM3QyxNQUFNZSxnQ0FBZ0NmLHlEQUFVQTtBQUFFO0FBQ3hELFVBQVVDLElBQUksR0FBRyxHQUFHQSxRQUFTQSxDQUFBQSxPQUFPLENBQUMsS0FDdEMsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcXVpbGwvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2ZpbmUtdHVuaW5nL2pvYnMubWpzP2NjNjMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy5cbmltcG9ydCB7IEFQSVJlc291cmNlIH0gZnJvbSAnb3BlbmFpL3Jlc291cmNlJztcbmltcG9ydCB7IGlzUmVxdWVzdE9wdGlvbnMgfSBmcm9tICdvcGVuYWkvY29yZSc7XG5pbXBvcnQgeyBDdXJzb3JQYWdlIH0gZnJvbSAnb3BlbmFpL3BhZ2luYXRpb24nO1xuZXhwb3J0IGNsYXNzIEpvYnMgZXh0ZW5kcyBBUElSZXNvdXJjZSB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgam9iIHRoYXQgZmluZS10dW5lcyBhIHNwZWNpZmllZCBtb2RlbCBmcm9tIGEgZ2l2ZW4gZGF0YXNldC5cbiAgICpcbiAgICogUmVzcG9uc2UgaW5jbHVkZXMgZGV0YWlscyBvZiB0aGUgZW5xdWV1ZWQgam9iIGluY2x1ZGluZyBqb2Igc3RhdHVzIGFuZCB0aGUgbmFtZVxuICAgKiBvZiB0aGUgZmluZS10dW5lZCBtb2RlbHMgb25jZSBjb21wbGV0ZS5cbiAgICpcbiAgICogW0xlYXJuIG1vcmUgYWJvdXQgZmluZS10dW5pbmddKC9kb2NzL2d1aWRlcy9maW5lLXR1bmluZylcbiAgICovXG4gIGNyZWF0ZShib2R5LCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIHRoaXMucG9zdCgnL2ZpbmVfdHVuaW5nL2pvYnMnLCB7IGJvZHksIC4uLm9wdGlvbnMgfSk7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBpbmZvIGFib3V0IGEgZmluZS10dW5pbmcgam9iLlxuICAgKlxuICAgKiBbTGVhcm4gbW9yZSBhYm91dCBmaW5lLXR1bmluZ10oL2RvY3MvZ3VpZGVzL2ZpbmUtdHVuaW5nKVxuICAgKi9cbiAgcmV0cmlldmUoZmluZVR1bmluZ0pvYklkLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0KGAvZmluZV90dW5pbmcvam9icy8ke2ZpbmVUdW5pbmdKb2JJZH1gLCBvcHRpb25zKTtcbiAgfVxuICBsaXN0KHF1ZXJ5ID0ge30sIG9wdGlvbnMpIHtcbiAgICBpZiAoaXNSZXF1ZXN0T3B0aW9ucyhxdWVyeSkpIHtcbiAgICAgIHJldHVybiB0aGlzLmxpc3Qoe30sIHF1ZXJ5KTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuZ2V0QVBJTGlzdCgnL2ZpbmVfdHVuaW5nL2pvYnMnLCBGaW5lVHVuaW5nSm9ic1BhZ2UsIHsgcXVlcnksIC4uLm9wdGlvbnMgfSk7XG4gIH1cbiAgLyoqXG4gICAqIEltbWVkaWF0ZWx5IGNhbmNlbCBhIGZpbmUtdHVuZSBqb2IuXG4gICAqL1xuICBjYW5jZWwoZmluZVR1bmluZ0pvYklkLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIHRoaXMucG9zdChgL2ZpbmVfdHVuaW5nL2pvYnMvJHtmaW5lVHVuaW5nSm9iSWR9L2NhbmNlbGAsIG9wdGlvbnMpO1xuICB9XG4gIGxpc3RFdmVudHMoZmluZVR1bmluZ0pvYklkLCBxdWVyeSA9IHt9LCBvcHRpb25zKSB7XG4gICAgaWYgKGlzUmVxdWVzdE9wdGlvbnMocXVlcnkpKSB7XG4gICAgICByZXR1cm4gdGhpcy5saXN0RXZlbnRzKGZpbmVUdW5pbmdKb2JJZCwge30sIHF1ZXJ5KTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuZ2V0QVBJTGlzdChgL2ZpbmVfdHVuaW5nL2pvYnMvJHtmaW5lVHVuaW5nSm9iSWR9L2V2ZW50c2AsIEZpbmVUdW5pbmdKb2JFdmVudHNQYWdlLCB7XG4gICAgICBxdWVyeSxcbiAgICAgIC4uLm9wdGlvbnMsXG4gICAgfSk7XG4gIH1cbn1cbmV4cG9ydCBjbGFzcyBGaW5lVHVuaW5nSm9ic1BhZ2UgZXh0ZW5kcyBDdXJzb3JQYWdlIHt9XG5leHBvcnQgY2xhc3MgRmluZVR1bmluZ0pvYkV2ZW50c1BhZ2UgZXh0ZW5kcyBDdXJzb3JQYWdlIHt9XG4oZnVuY3Rpb24gKEpvYnMpIHt9KShKb2JzIHx8IChKb2JzID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWpvYnMubWpzLm1hcFxuIl0sIm5hbWVzIjpbIkFQSVJlc291cmNlIiwiaXNSZXF1ZXN0T3B0aW9ucyIsIkN1cnNvclBhZ2UiLCJKb2JzIiwiY3JlYXRlIiwiYm9keSIsIm9wdGlvbnMiLCJwb3N0IiwicmV0cmlldmUiLCJmaW5lVHVuaW5nSm9iSWQiLCJnZXQiLCJsaXN0IiwicXVlcnkiLCJnZXRBUElMaXN0IiwiRmluZVR1bmluZ0pvYnNQYWdlIiwiY2FuY2VsIiwibGlzdEV2ZW50cyIsIkZpbmVUdW5pbmdKb2JFdmVudHNQYWdlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/node_modules/openai/resources/fine-tuning/jobs.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/node_modules/openai/resources/images.mjs":
/*!*************************************************************************!*\
  !*** ./node_modules/langchain/node_modules/openai/resources/images.mjs ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Images: () => (/* binding */ Images)\n/* harmony export */ });\n/* harmony import */ var openai_resource__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai/resource */ \"(rsc)/./node_modules/langchain/node_modules/openai/resource.mjs\");\n/* harmony import */ var openai_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! openai/core */ \"(rsc)/./node_modules/langchain/node_modules/openai/core.mjs\");\n// File generated from our OpenAPI spec by Stainless.\n\n\nclass Images extends openai_resource__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    /**\n   * Creates a variation of a given image.\n   */ createVariation(body, options) {\n        return this.post(\"/images/variations\", (0,openai_core__WEBPACK_IMPORTED_MODULE_1__.multipartFormRequestOptions)({\n            body,\n            ...options\n        }));\n    }\n    /**\n   * Creates an edited or extended image given an original image and a prompt.\n   */ edit(body, options) {\n        return this.post(\"/images/edits\", (0,openai_core__WEBPACK_IMPORTED_MODULE_1__.multipartFormRequestOptions)({\n            body,\n            ...options\n        }));\n    }\n    /**\n   * Creates an image given a prompt.\n   */ generate(body, options) {\n        return this.post(\"/images/generations\", {\n            body,\n            ...options\n        });\n    }\n}\n(function(Images) {})(Images || (Images = {})); //# sourceMappingURL=images.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2ltYWdlcy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEscURBQXFEO0FBQ1A7QUFDWTtBQUNuRCxNQUFNRSxlQUFlRix3REFBV0E7SUFDckM7O0dBRUMsR0FDREcsZ0JBQWdCQyxJQUFJLEVBQUVDLE9BQU8sRUFBRTtRQUM3QixPQUFPLElBQUksQ0FBQ0MsSUFBSSxDQUFDLHNCQUFzQkwsd0VBQTJCQSxDQUFDO1lBQUVHO1lBQU0sR0FBR0MsT0FBTztRQUFDO0lBQ3hGO0lBQ0E7O0dBRUMsR0FDREUsS0FBS0gsSUFBSSxFQUFFQyxPQUFPLEVBQUU7UUFDbEIsT0FBTyxJQUFJLENBQUNDLElBQUksQ0FBQyxpQkFBaUJMLHdFQUEyQkEsQ0FBQztZQUFFRztZQUFNLEdBQUdDLE9BQU87UUFBQztJQUNuRjtJQUNBOztHQUVDLEdBQ0RHLFNBQVNKLElBQUksRUFBRUMsT0FBTyxFQUFFO1FBQ3RCLE9BQU8sSUFBSSxDQUFDQyxJQUFJLENBQUMsdUJBQXVCO1lBQUVGO1lBQU0sR0FBR0MsT0FBTztRQUFDO0lBQzdEO0FBQ0Y7QUFDQyxVQUFVSCxNQUFNLEdBQUcsR0FBR0EsVUFBV0EsQ0FBQUEsU0FBUyxDQUFDLEtBQzVDLG1DQUFtQyIsInNvdXJjZXMiOlsid2VicGFjazovL3F1aWxsLy4vbm9kZV9tb2R1bGVzL2xhbmdjaGFpbi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9pbWFnZXMubWpzPzYwY2EiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy5cbmltcG9ydCB7IEFQSVJlc291cmNlIH0gZnJvbSAnb3BlbmFpL3Jlc291cmNlJztcbmltcG9ydCB7IG11bHRpcGFydEZvcm1SZXF1ZXN0T3B0aW9ucyB9IGZyb20gJ29wZW5haS9jb3JlJztcbmV4cG9ydCBjbGFzcyBJbWFnZXMgZXh0ZW5kcyBBUElSZXNvdXJjZSB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgdmFyaWF0aW9uIG9mIGEgZ2l2ZW4gaW1hZ2UuXG4gICAqL1xuICBjcmVhdGVWYXJpYXRpb24oYm9keSwgb3B0aW9ucykge1xuICAgIHJldHVybiB0aGlzLnBvc3QoJy9pbWFnZXMvdmFyaWF0aW9ucycsIG11bHRpcGFydEZvcm1SZXF1ZXN0T3B0aW9ucyh7IGJvZHksIC4uLm9wdGlvbnMgfSkpO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGVzIGFuIGVkaXRlZCBvciBleHRlbmRlZCBpbWFnZSBnaXZlbiBhbiBvcmlnaW5hbCBpbWFnZSBhbmQgYSBwcm9tcHQuXG4gICAqL1xuICBlZGl0KGJvZHksIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gdGhpcy5wb3N0KCcvaW1hZ2VzL2VkaXRzJywgbXVsdGlwYXJ0Rm9ybVJlcXVlc3RPcHRpb25zKHsgYm9keSwgLi4ub3B0aW9ucyB9KSk7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZXMgYW4gaW1hZ2UgZ2l2ZW4gYSBwcm9tcHQuXG4gICAqL1xuICBnZW5lcmF0ZShib2R5LCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIHRoaXMucG9zdCgnL2ltYWdlcy9nZW5lcmF0aW9ucycsIHsgYm9keSwgLi4ub3B0aW9ucyB9KTtcbiAgfVxufVxuKGZ1bmN0aW9uIChJbWFnZXMpIHt9KShJbWFnZXMgfHwgKEltYWdlcyA9IHt9KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbWFnZXMubWpzLm1hcFxuIl0sIm5hbWVzIjpbIkFQSVJlc291cmNlIiwibXVsdGlwYXJ0Rm9ybVJlcXVlc3RPcHRpb25zIiwiSW1hZ2VzIiwiY3JlYXRlVmFyaWF0aW9uIiwiYm9keSIsIm9wdGlvbnMiLCJwb3N0IiwiZWRpdCIsImdlbmVyYXRlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/node_modules/openai/resources/images.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/node_modules/openai/resources/index.mjs":
/*!************************************************************************!*\
  !*** ./node_modules/langchain/node_modules/openai/resources/index.mjs ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Audio: () => (/* reexport safe */ _audio_audio_mjs__WEBPACK_IMPORTED_MODULE_0__.Audio),\n/* harmony export */   Chat: () => (/* reexport safe */ _chat_chat_mjs__WEBPACK_IMPORTED_MODULE_1__.Chat),\n/* harmony export */   Completions: () => (/* reexport safe */ _completions_mjs__WEBPACK_IMPORTED_MODULE_2__.Completions),\n/* harmony export */   Edits: () => (/* reexport safe */ _edits_mjs__WEBPACK_IMPORTED_MODULE_4__.Edits),\n/* harmony export */   Embeddings: () => (/* reexport safe */ _embeddings_mjs__WEBPACK_IMPORTED_MODULE_3__.Embeddings),\n/* harmony export */   FileObjectsPage: () => (/* reexport safe */ _files_mjs__WEBPACK_IMPORTED_MODULE_5__.FileObjectsPage),\n/* harmony export */   Files: () => (/* reexport safe */ _files_mjs__WEBPACK_IMPORTED_MODULE_5__.Files),\n/* harmony export */   FineTunes: () => (/* reexport safe */ _fine_tunes_mjs__WEBPACK_IMPORTED_MODULE_6__.FineTunes),\n/* harmony export */   FineTunesPage: () => (/* reexport safe */ _fine_tunes_mjs__WEBPACK_IMPORTED_MODULE_6__.FineTunesPage),\n/* harmony export */   FineTuning: () => (/* reexport safe */ _fine_tuning_fine_tuning_mjs__WEBPACK_IMPORTED_MODULE_7__.FineTuning),\n/* harmony export */   Images: () => (/* reexport safe */ _images_mjs__WEBPACK_IMPORTED_MODULE_8__.Images),\n/* harmony export */   Models: () => (/* reexport safe */ _models_mjs__WEBPACK_IMPORTED_MODULE_9__.Models),\n/* harmony export */   ModelsPage: () => (/* reexport safe */ _models_mjs__WEBPACK_IMPORTED_MODULE_9__.ModelsPage),\n/* harmony export */   Moderations: () => (/* reexport safe */ _moderations_mjs__WEBPACK_IMPORTED_MODULE_10__.Moderations)\n/* harmony export */ });\n/* harmony import */ var _audio_audio_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./audio/audio.mjs */ \"(rsc)/./node_modules/langchain/node_modules/openai/resources/audio/audio.mjs\");\n/* harmony import */ var _chat_chat_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chat/chat.mjs */ \"(rsc)/./node_modules/langchain/node_modules/openai/resources/chat/chat.mjs\");\n/* harmony import */ var _completions_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./completions.mjs */ \"(rsc)/./node_modules/langchain/node_modules/openai/resources/completions.mjs\");\n/* harmony import */ var _embeddings_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./embeddings.mjs */ \"(rsc)/./node_modules/langchain/node_modules/openai/resources/embeddings.mjs\");\n/* harmony import */ var _edits_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./edits.mjs */ \"(rsc)/./node_modules/langchain/node_modules/openai/resources/edits.mjs\");\n/* harmony import */ var _files_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./files.mjs */ \"(rsc)/./node_modules/langchain/node_modules/openai/resources/files.mjs\");\n/* harmony import */ var _fine_tunes_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./fine-tunes.mjs */ \"(rsc)/./node_modules/langchain/node_modules/openai/resources/fine-tunes.mjs\");\n/* harmony import */ var _fine_tuning_fine_tuning_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./fine-tuning/fine-tuning.mjs */ \"(rsc)/./node_modules/langchain/node_modules/openai/resources/fine-tuning/fine-tuning.mjs\");\n/* harmony import */ var _images_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./images.mjs */ \"(rsc)/./node_modules/langchain/node_modules/openai/resources/images.mjs\");\n/* harmony import */ var _models_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./models.mjs */ \"(rsc)/./node_modules/langchain/node_modules/openai/resources/models.mjs\");\n/* harmony import */ var _moderations_mjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./moderations.mjs */ \"(rsc)/./node_modules/langchain/node_modules/openai/resources/moderations.mjs\");\n// File generated from our OpenAPI spec by Stainless.\n\n\n\n\n\n\n\n\n\n\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2luZGV4Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEscURBQXFEO0FBQ1g7QUFDSDtBQUNTO0FBQ0Y7QUFDVjtBQUNpQjtBQUNPO0FBQ0Q7QUFDckI7QUFDWTtBQUNGLENBQ2hELGtDQUFrQyIsInNvdXJjZXMiOlsid2VicGFjazovL3F1aWxsLy4vbm9kZV9tb2R1bGVzL2xhbmdjaGFpbi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9pbmRleC5tanM/MjhkMCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLlxuZXhwb3J0IHsgQXVkaW8gfSBmcm9tICcuL2F1ZGlvL2F1ZGlvLm1qcyc7XG5leHBvcnQgeyBDaGF0IH0gZnJvbSAnLi9jaGF0L2NoYXQubWpzJztcbmV4cG9ydCB7IENvbXBsZXRpb25zIH0gZnJvbSAnLi9jb21wbGV0aW9ucy5tanMnO1xuZXhwb3J0IHsgRW1iZWRkaW5ncyB9IGZyb20gJy4vZW1iZWRkaW5ncy5tanMnO1xuZXhwb3J0IHsgRWRpdHMgfSBmcm9tICcuL2VkaXRzLm1qcyc7XG5leHBvcnQgeyBGaWxlT2JqZWN0c1BhZ2UsIEZpbGVzIH0gZnJvbSAnLi9maWxlcy5tanMnO1xuZXhwb3J0IHsgRmluZVR1bmVzUGFnZSwgRmluZVR1bmVzIH0gZnJvbSAnLi9maW5lLXR1bmVzLm1qcyc7XG5leHBvcnQgeyBGaW5lVHVuaW5nIH0gZnJvbSAnLi9maW5lLXR1bmluZy9maW5lLXR1bmluZy5tanMnO1xuZXhwb3J0IHsgSW1hZ2VzIH0gZnJvbSAnLi9pbWFnZXMubWpzJztcbmV4cG9ydCB7IE1vZGVsc1BhZ2UsIE1vZGVscyB9IGZyb20gJy4vbW9kZWxzLm1qcyc7XG5leHBvcnQgeyBNb2RlcmF0aW9ucyB9IGZyb20gJy4vbW9kZXJhdGlvbnMubWpzJztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4Lm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJBdWRpbyIsIkNoYXQiLCJDb21wbGV0aW9ucyIsIkVtYmVkZGluZ3MiLCJFZGl0cyIsIkZpbGVPYmplY3RzUGFnZSIsIkZpbGVzIiwiRmluZVR1bmVzUGFnZSIsIkZpbmVUdW5lcyIsIkZpbmVUdW5pbmciLCJJbWFnZXMiLCJNb2RlbHNQYWdlIiwiTW9kZWxzIiwiTW9kZXJhdGlvbnMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/node_modules/openai/resources/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/node_modules/openai/resources/models.mjs":
/*!*************************************************************************!*\
  !*** ./node_modules/langchain/node_modules/openai/resources/models.mjs ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Models: () => (/* binding */ Models),\n/* harmony export */   ModelsPage: () => (/* binding */ ModelsPage)\n/* harmony export */ });\n/* harmony import */ var openai_resource__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai/resource */ \"(rsc)/./node_modules/langchain/node_modules/openai/resource.mjs\");\n/* harmony import */ var openai_pagination__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! openai/pagination */ \"(rsc)/./node_modules/langchain/node_modules/openai/pagination.mjs\");\n// File generated from our OpenAPI spec by Stainless.\n\n\nclass Models extends openai_resource__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    /**\n   * Retrieves a model instance, providing basic information about the model such as\n   * the owner and permissioning.\n   */ retrieve(model, options) {\n        return this.get(`/models/${model}`, options);\n    }\n    /**\n   * Lists the currently available models, and provides basic information about each\n   * one such as the owner and availability.\n   */ list(options) {\n        return this.getAPIList(\"/models\", ModelsPage, options);\n    }\n    /**\n   * Delete a fine-tuned model. You must have the Owner role in your organization.\n   */ del(model, options) {\n        return this.delete(`/models/${model}`, options);\n    }\n}\n/**\n * Note: no pagination actually occurs yet, this is for forwards-compatibility.\n */ class ModelsPage extends openai_pagination__WEBPACK_IMPORTED_MODULE_1__.Page {\n}\n(function(Models) {})(Models || (Models = {})); //# sourceMappingURL=models.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL21vZGVscy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLHFEQUFxRDtBQUNQO0FBQ0w7QUFDbEMsTUFBTUUsZUFBZUYsd0RBQVdBO0lBQ3JDOzs7R0FHQyxHQUNERyxTQUFTQyxLQUFLLEVBQUVDLE9BQU8sRUFBRTtRQUN2QixPQUFPLElBQUksQ0FBQ0MsR0FBRyxDQUFDLENBQUMsUUFBUSxFQUFFRixNQUFNLENBQUMsRUFBRUM7SUFDdEM7SUFDQTs7O0dBR0MsR0FDREUsS0FBS0YsT0FBTyxFQUFFO1FBQ1osT0FBTyxJQUFJLENBQUNHLFVBQVUsQ0FBQyxXQUFXQyxZQUFZSjtJQUNoRDtJQUNBOztHQUVDLEdBQ0RLLElBQUlOLEtBQUssRUFBRUMsT0FBTyxFQUFFO1FBQ2xCLE9BQU8sSUFBSSxDQUFDTSxNQUFNLENBQUMsQ0FBQyxRQUFRLEVBQUVQLE1BQU0sQ0FBQyxFQUFFQztJQUN6QztBQUNGO0FBQ0E7O0NBRUMsR0FDTSxNQUFNSSxtQkFBbUJSLG1EQUFJQTtBQUFFO0FBQ3JDLFVBQVVDLE1BQU0sR0FBRyxHQUFHQSxVQUFXQSxDQUFBQSxTQUFTLENBQUMsS0FDNUMsbUNBQW1DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcXVpbGwvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL21vZGVscy5tanM/Mzc0NCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLlxuaW1wb3J0IHsgQVBJUmVzb3VyY2UgfSBmcm9tICdvcGVuYWkvcmVzb3VyY2UnO1xuaW1wb3J0IHsgUGFnZSB9IGZyb20gJ29wZW5haS9wYWdpbmF0aW9uJztcbmV4cG9ydCBjbGFzcyBNb2RlbHMgZXh0ZW5kcyBBUElSZXNvdXJjZSB7XG4gIC8qKlxuICAgKiBSZXRyaWV2ZXMgYSBtb2RlbCBpbnN0YW5jZSwgcHJvdmlkaW5nIGJhc2ljIGluZm9ybWF0aW9uIGFib3V0IHRoZSBtb2RlbCBzdWNoIGFzXG4gICAqIHRoZSBvd25lciBhbmQgcGVybWlzc2lvbmluZy5cbiAgICovXG4gIHJldHJpZXZlKG1vZGVsLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0KGAvbW9kZWxzLyR7bW9kZWx9YCwgb3B0aW9ucyk7XG4gIH1cbiAgLyoqXG4gICAqIExpc3RzIHRoZSBjdXJyZW50bHkgYXZhaWxhYmxlIG1vZGVscywgYW5kIHByb3ZpZGVzIGJhc2ljIGluZm9ybWF0aW9uIGFib3V0IGVhY2hcbiAgICogb25lIHN1Y2ggYXMgdGhlIG93bmVyIGFuZCBhdmFpbGFiaWxpdHkuXG4gICAqL1xuICBsaXN0KG9wdGlvbnMpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRBUElMaXN0KCcvbW9kZWxzJywgTW9kZWxzUGFnZSwgb3B0aW9ucyk7XG4gIH1cbiAgLyoqXG4gICAqIERlbGV0ZSBhIGZpbmUtdHVuZWQgbW9kZWwuIFlvdSBtdXN0IGhhdmUgdGhlIE93bmVyIHJvbGUgaW4geW91ciBvcmdhbml6YXRpb24uXG4gICAqL1xuICBkZWwobW9kZWwsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gdGhpcy5kZWxldGUoYC9tb2RlbHMvJHttb2RlbH1gLCBvcHRpb25zKTtcbiAgfVxufVxuLyoqXG4gKiBOb3RlOiBubyBwYWdpbmF0aW9uIGFjdHVhbGx5IG9jY3VycyB5ZXQsIHRoaXMgaXMgZm9yIGZvcndhcmRzLWNvbXBhdGliaWxpdHkuXG4gKi9cbmV4cG9ydCBjbGFzcyBNb2RlbHNQYWdlIGV4dGVuZHMgUGFnZSB7fVxuKGZ1bmN0aW9uIChNb2RlbHMpIHt9KShNb2RlbHMgfHwgKE1vZGVscyA9IHt9KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tb2RlbHMubWpzLm1hcFxuIl0sIm5hbWVzIjpbIkFQSVJlc291cmNlIiwiUGFnZSIsIk1vZGVscyIsInJldHJpZXZlIiwibW9kZWwiLCJvcHRpb25zIiwiZ2V0IiwibGlzdCIsImdldEFQSUxpc3QiLCJNb2RlbHNQYWdlIiwiZGVsIiwiZGVsZXRlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/node_modules/openai/resources/models.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/node_modules/openai/resources/moderations.mjs":
/*!******************************************************************************!*\
  !*** ./node_modules/langchain/node_modules/openai/resources/moderations.mjs ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Moderations: () => (/* binding */ Moderations)\n/* harmony export */ });\n/* harmony import */ var openai_resource__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai/resource */ \"(rsc)/./node_modules/langchain/node_modules/openai/resource.mjs\");\n// File generated from our OpenAPI spec by Stainless.\n\nclass Moderations extends openai_resource__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    /**\n   * Classifies if text violates OpenAI's Content Policy\n   */ create(body, options) {\n        return this.post(\"/moderations\", {\n            body,\n            ...options\n        });\n    }\n}\n(function(Moderations) {})(Moderations || (Moderations = {})); //# sourceMappingURL=moderations.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL21vZGVyYXRpb25zLm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBLHFEQUFxRDtBQUNQO0FBQ3ZDLE1BQU1DLG9CQUFvQkQsd0RBQVdBO0lBQzFDOztHQUVDLEdBQ0RFLE9BQU9DLElBQUksRUFBRUMsT0FBTyxFQUFFO1FBQ3BCLE9BQU8sSUFBSSxDQUFDQyxJQUFJLENBQUMsZ0JBQWdCO1lBQUVGO1lBQU0sR0FBR0MsT0FBTztRQUFDO0lBQ3REO0FBQ0Y7QUFDQyxVQUFVSCxXQUFXLEdBQUcsR0FBR0EsZUFBZ0JBLENBQUFBLGNBQWMsQ0FBQyxLQUMzRCx3Q0FBd0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9xdWlsbC8uL25vZGVfbW9kdWxlcy9sYW5nY2hhaW4vbm9kZV9tb2R1bGVzL29wZW5haS9yZXNvdXJjZXMvbW9kZXJhdGlvbnMubWpzPzA4N2MiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy5cbmltcG9ydCB7IEFQSVJlc291cmNlIH0gZnJvbSAnb3BlbmFpL3Jlc291cmNlJztcbmV4cG9ydCBjbGFzcyBNb2RlcmF0aW9ucyBleHRlbmRzIEFQSVJlc291cmNlIHtcbiAgLyoqXG4gICAqIENsYXNzaWZpZXMgaWYgdGV4dCB2aW9sYXRlcyBPcGVuQUkncyBDb250ZW50IFBvbGljeVxuICAgKi9cbiAgY3JlYXRlKGJvZHksIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gdGhpcy5wb3N0KCcvbW9kZXJhdGlvbnMnLCB7IGJvZHksIC4uLm9wdGlvbnMgfSk7XG4gIH1cbn1cbihmdW5jdGlvbiAoTW9kZXJhdGlvbnMpIHt9KShNb2RlcmF0aW9ucyB8fCAoTW9kZXJhdGlvbnMgPSB7fSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bW9kZXJhdGlvbnMubWpzLm1hcFxuIl0sIm5hbWVzIjpbIkFQSVJlc291cmNlIiwiTW9kZXJhdGlvbnMiLCJjcmVhdGUiLCJib2R5Iiwib3B0aW9ucyIsInBvc3QiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/node_modules/openai/resources/moderations.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/node_modules/openai/streaming.mjs":
/*!******************************************************************!*\
  !*** ./node_modules/langchain/node_modules/openai/streaming.mjs ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Stream: () => (/* binding */ Stream)\n/* harmony export */ });\nclass Stream {\n    constructor(response, controller){\n        this.response = response;\n        this.controller = controller;\n        this.decoder = new SSEDecoder();\n    }\n    async *iterMessages() {\n        if (!this.response.body) {\n            this.controller.abort();\n            throw new Error(`Attempted to iterate over a response with no body`);\n        }\n        const lineDecoder = new LineDecoder();\n        const iter = readableStreamAsyncIterable(this.response.body);\n        for await (const chunk of iter){\n            for (const line of lineDecoder.decode(chunk)){\n                const sse = this.decoder.decode(line);\n                if (sse) yield sse;\n            }\n        }\n        for (const line of lineDecoder.flush()){\n            const sse = this.decoder.decode(line);\n            if (sse) yield sse;\n        }\n    }\n    async *[Symbol.asyncIterator]() {\n        let done = false;\n        try {\n            for await (const sse of this.iterMessages()){\n                if (done) continue;\n                if (sse.data.startsWith(\"[DONE]\")) {\n                    done = true;\n                    continue;\n                }\n                if (sse.event === null) {\n                    try {\n                        yield JSON.parse(sse.data);\n                    } catch (e) {\n                        console.error(`Could not parse message into JSON:`, sse.data);\n                        console.error(`From chunk:`, sse.raw);\n                        throw e;\n                    }\n                }\n            }\n            done = true;\n        } catch (e) {\n            // If the user calls `stream.controller.abort()`, we should exit without throwing.\n            if (e instanceof Error && e.name === \"AbortError\") return;\n            throw e;\n        } finally{\n            // If the user `break`s, abort the ongoing request.\n            if (!done) this.controller.abort();\n        }\n    }\n}\nclass SSEDecoder {\n    constructor(){\n        this.event = null;\n        this.data = [];\n        this.chunks = [];\n    }\n    decode(line) {\n        if (line.endsWith(\"\\r\")) {\n            line = line.substring(0, line.length - 1);\n        }\n        if (!line) {\n            // empty line and we didn't previously encounter any messages\n            if (!this.event && !this.data.length) return null;\n            const sse = {\n                event: this.event,\n                data: this.data.join(\"\\n\"),\n                raw: this.chunks\n            };\n            this.event = null;\n            this.data = [];\n            this.chunks = [];\n            return sse;\n        }\n        this.chunks.push(line);\n        if (line.startsWith(\":\")) {\n            return null;\n        }\n        let [fieldname, _, value] = partition(line, \":\");\n        if (value.startsWith(\" \")) {\n            value = value.substring(1);\n        }\n        if (fieldname === \"event\") {\n            this.event = value;\n        } else if (fieldname === \"data\") {\n            this.data.push(value);\n        }\n        return null;\n    }\n}\n/**\n * A re-implementation of httpx's `LineDecoder` in Python that handles incrementally\n * reading lines from text.\n *\n * https://github.com/encode/httpx/blob/920333ea98118e9cf617f246905d7b202510941c/httpx/_decoders.py#L258\n */ class LineDecoder {\n    constructor(){\n        this.buffer = [];\n        this.trailingCR = false;\n    }\n    decode(chunk) {\n        let text = this.decodeText(chunk);\n        if (this.trailingCR) {\n            text = \"\\r\" + text;\n            this.trailingCR = false;\n        }\n        if (text.endsWith(\"\\r\")) {\n            this.trailingCR = true;\n            text = text.slice(0, -1);\n        }\n        if (!text) {\n            return [];\n        }\n        const trailingNewline = LineDecoder.NEWLINE_CHARS.has(text[text.length - 1] || \"\");\n        let lines = text.split(LineDecoder.NEWLINE_REGEXP);\n        if (lines.length === 1 && !trailingNewline) {\n            this.buffer.push(lines[0]);\n            return [];\n        }\n        if (this.buffer.length > 0) {\n            lines = [\n                this.buffer.join(\"\") + lines[0],\n                ...lines.slice(1)\n            ];\n            this.buffer = [];\n        }\n        if (!trailingNewline) {\n            this.buffer = [\n                lines.pop() || \"\"\n            ];\n        }\n        return lines;\n    }\n    decodeText(bytes) {\n        var _a;\n        if (bytes == null) return \"\";\n        if (typeof bytes === \"string\") return bytes;\n        // Node:\n        if (typeof Buffer !== \"undefined\") {\n            if (bytes instanceof Buffer) {\n                return bytes.toString();\n            }\n            if (bytes instanceof Uint8Array) {\n                return Buffer.from(bytes).toString();\n            }\n            throw new Error(`Unexpected: received non-Uint8Array (${bytes.constructor.name}) stream chunk in an environment with a global \"Buffer\" defined, which this library assumes to be Node. Please report this error.`);\n        }\n        // Browser\n        if (typeof TextDecoder !== \"undefined\") {\n            if (bytes instanceof Uint8Array || bytes instanceof ArrayBuffer) {\n                (_a = this.textDecoder) !== null && _a !== void 0 ? _a : this.textDecoder = new TextDecoder(\"utf8\");\n                return this.textDecoder.decode(bytes);\n            }\n            throw new Error(`Unexpected: received non-Uint8Array/ArrayBuffer (${bytes.constructor.name}) in a web platform. Please report this error.`);\n        }\n        throw new Error(`Unexpected: neither Buffer nor TextDecoder are available as globals. Please report this error.`);\n    }\n    flush() {\n        if (!this.buffer.length && !this.trailingCR) {\n            return [];\n        }\n        const lines = [\n            this.buffer.join(\"\")\n        ];\n        this.buffer = [];\n        this.trailingCR = false;\n        return lines;\n    }\n}\n// prettier-ignore\nLineDecoder.NEWLINE_CHARS = new Set([\n    \"\\n\",\n    \"\\r\",\n    \"\\v\",\n    \"\\f\",\n    \"\\x1c\",\n    \"\\x1d\",\n    \"\\x1e\",\n    \"\\x85\",\n    \"\\u2028\",\n    \"\\u2029\"\n]);\nLineDecoder.NEWLINE_REGEXP = /\\r\\n|[\\n\\r\\x0b\\x0c\\x1c\\x1d\\x1e\\x85\\u2028\\u2029]/g;\nfunction partition(str, delimiter) {\n    const index = str.indexOf(delimiter);\n    if (index !== -1) {\n        return [\n            str.substring(0, index),\n            delimiter,\n            str.substring(index + delimiter.length)\n        ];\n    }\n    return [\n        str,\n        \"\",\n        \"\"\n    ];\n}\n/**\n * Most browsers don't yet have async iterable support for ReadableStream,\n * and Node has a very different way of reading bytes from its \"ReadableStream\".\n *\n * This polyfill was pulled from https://github.com/MattiasBuelens/web-streams-polyfill/pull/122#issuecomment-1627354490\n */ function readableStreamAsyncIterable(stream) {\n    if (stream[Symbol.asyncIterator]) return stream;\n    const reader = stream.getReader();\n    return {\n        async next () {\n            try {\n                const result = await reader.read();\n                if (result === null || result === void 0 ? void 0 : result.done) reader.releaseLock(); // release lock when stream becomes closed\n                return result;\n            } catch (e) {\n                reader.releaseLock(); // release lock when stream becomes errored\n                throw e;\n            }\n        },\n        async return () {\n            const cancelPromise = reader.cancel();\n            reader.releaseLock();\n            await cancelPromise;\n            return {\n                done: true,\n                value: undefined\n            };\n        },\n        [Symbol.asyncIterator] () {\n            return this;\n        }\n    };\n} //# sourceMappingURL=streaming.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/node_modules/openai/streaming.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/node_modules/openai/uploads.mjs":
/*!****************************************************************!*\
  !*** ./node_modules/langchain/node_modules/openai/uploads.mjs ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MultipartBody: () => (/* binding */ MultipartBody),\n/* harmony export */   createForm: () => (/* binding */ createForm),\n/* harmony export */   fileFromPath: () => (/* reexport safe */ openai_shims_fileFromPath__WEBPACK_IMPORTED_MODULE_2__.fileFromPath),\n/* harmony export */   isBlobLike: () => (/* binding */ isBlobLike),\n/* harmony export */   isFileLike: () => (/* binding */ isFileLike),\n/* harmony export */   isMultipartBody: () => (/* binding */ isMultipartBody),\n/* harmony export */   isResponseLike: () => (/* binding */ isResponseLike),\n/* harmony export */   isUploadable: () => (/* binding */ isUploadable),\n/* harmony export */   maybeMultipartFormRequestOptions: () => (/* binding */ maybeMultipartFormRequestOptions),\n/* harmony export */   multipartFormRequestOptions: () => (/* binding */ multipartFormRequestOptions),\n/* harmony export */   toFile: () => (/* binding */ toFile)\n/* harmony export */ });\n/* harmony import */ var openai_shims_formdata__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai/_shims/formdata */ \"(rsc)/./node_modules/langchain/node_modules/openai/_shims/formdata.node.mjs\");\n/* harmony import */ var openai_shims_getMultipartRequestOptions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! openai/_shims/getMultipartRequestOptions */ \"(rsc)/./node_modules/langchain/node_modules/openai/_shims/getMultipartRequestOptions.node.mjs\");\n/* harmony import */ var openai_shims_fileFromPath__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! openai/_shims/fileFromPath */ \"(rsc)/./node_modules/langchain/node_modules/openai/_shims/fileFromPath.node.mjs\");\n/* harmony import */ var openai_shims_node_readable__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! openai/_shims/node-readable */ \"(rsc)/./node_modules/langchain/node_modules/openai/_shims/node-readable.node.mjs\");\n\n\n\n\n\nconst isResponseLike = (value)=>value != null && typeof value === \"object\" && typeof value.url === \"string\" && typeof value.blob === \"function\";\nconst isFileLike = (value)=>value != null && typeof value === \"object\" && typeof value.name === \"string\" && typeof value.lastModified === \"number\" && isBlobLike(value);\n/**\n * The BlobLike type omits arrayBuffer() because @types/node-fetch@^2.6.4 lacks it; but this check\n * adds the arrayBuffer() method type because it is available and used at runtime\n */ const isBlobLike = (value)=>value != null && typeof value === \"object\" && typeof value.size === \"number\" && typeof value.type === \"string\" && typeof value.text === \"function\" && typeof value.slice === \"function\" && typeof value.arrayBuffer === \"function\";\nconst isUploadable = (value)=>{\n    return isFileLike(value) || isResponseLike(value) || (0,openai_shims_node_readable__WEBPACK_IMPORTED_MODULE_3__.isFsReadStream)(value);\n};\n/**\n * Helper for creating a {@link File} to pass to an SDK upload method from a variety of different data formats\n * @param value the raw content of the file.  Can be an {@link Uploadable}, {@link BlobLikePart}, or {@link AsyncIterable} of {@link BlobLikePart}s\n * @param {string=} name the name of the file. If omitted, toFile will try to determine a file name from bits if possible\n * @param {Object=} options additional properties\n * @param {string=} options.type the MIME type of the content\n * @param {number=} options.lastModified the last modified timestamp\n * @returns a {@link File} with the given properties\n */ async function toFile(value, name, options = {}) {\n    var _a, _b, _c;\n    // If it's a promise, resolve it.\n    value = await value;\n    if (isResponseLike(value)) {\n        const blob = await value.blob();\n        name || (name = (_a = new URL(value.url).pathname.split(/[\\\\/]/).pop()) !== null && _a !== void 0 ? _a : \"unknown_file\");\n        return new openai_shims_formdata__WEBPACK_IMPORTED_MODULE_0__.File([\n            blob\n        ], name, options);\n    }\n    const bits = await getBytes(value);\n    name || (name = (_b = getName(value)) !== null && _b !== void 0 ? _b : \"unknown_file\");\n    if (!options.type) {\n        const type = (_c = bits[0]) === null || _c === void 0 ? void 0 : _c.type;\n        if (typeof type === \"string\") {\n            options = {\n                ...options,\n                type\n            };\n        }\n    }\n    return new openai_shims_formdata__WEBPACK_IMPORTED_MODULE_0__.File(bits, name, options);\n}\nasync function getBytes(value) {\n    var _a;\n    let parts = [];\n    if (typeof value === \"string\" || ArrayBuffer.isView(value) || // includes Uint8Array, Buffer, etc.\n    value instanceof ArrayBuffer) {\n        parts.push(value);\n    } else if (isBlobLike(value)) {\n        parts.push(await value.arrayBuffer());\n    } else if (isAsyncIterableIterator(value) // includes Readable, ReadableStream, etc.\n    ) {\n        for await (const chunk of value){\n            parts.push(chunk); // TODO, consider validating?\n        }\n    } else {\n        throw new Error(`Unexpected data type: ${typeof value}; constructor: ${(_a = value === null || value === void 0 ? void 0 : value.constructor) === null || _a === void 0 ? void 0 : _a.name}; props: ${propsForError(value)}`);\n    }\n    return parts;\n}\nfunction propsForError(value) {\n    const props = Object.getOwnPropertyNames(value);\n    return `[${props.map((p)=>`\"${p}\"`).join(\", \")}]`;\n}\nfunction getName(value) {\n    var _a;\n    return getStringFromMaybeBuffer(value.name) || getStringFromMaybeBuffer(value.filename) || // For fs.ReadStream\n    ((_a = getStringFromMaybeBuffer(value.path)) === null || _a === void 0 ? void 0 : _a.split(/[\\\\/]/).pop());\n}\nconst getStringFromMaybeBuffer = (x)=>{\n    if (typeof x === \"string\") return x;\n    if (typeof Buffer !== \"undefined\" && x instanceof Buffer) return String(x);\n    return undefined;\n};\nconst isAsyncIterableIterator = (value)=>value != null && typeof value === \"object\" && typeof value[Symbol.asyncIterator] === \"function\";\nclass MultipartBody {\n    constructor(body){\n        this.body = body;\n    }\n    get [Symbol.toStringTag]() {\n        return \"MultipartBody\";\n    }\n}\nconst isMultipartBody = (body)=>body && typeof body === \"object\" && body.body && body[Symbol.toStringTag] === \"MultipartBody\";\n/**\n * Returns a multipart/form-data request if any part of the given request body contains a File / Blob value.\n * Otherwise returns the request as is.\n */ const maybeMultipartFormRequestOptions = async (opts)=>{\n    if (!hasUploadableValue(opts.body)) return opts;\n    const form = await createForm(opts.body);\n    return (0,openai_shims_getMultipartRequestOptions__WEBPACK_IMPORTED_MODULE_1__.getMultipartRequestOptions)(form, opts);\n};\nconst multipartFormRequestOptions = async (opts)=>{\n    const form = await createForm(opts.body);\n    return (0,openai_shims_getMultipartRequestOptions__WEBPACK_IMPORTED_MODULE_1__.getMultipartRequestOptions)(form, opts);\n};\nconst createForm = async (body)=>{\n    const form = new openai_shims_formdata__WEBPACK_IMPORTED_MODULE_0__.FormData();\n    await Promise.all(Object.entries(body || {}).map(([key, value])=>addFormValue(form, key, value)));\n    return form;\n};\nconst hasUploadableValue = (value)=>{\n    if (isUploadable(value)) return true;\n    if (Array.isArray(value)) return value.some(hasUploadableValue);\n    if (value && typeof value === \"object\") {\n        for(const k in value){\n            if (hasUploadableValue(value[k])) return true;\n        }\n    }\n    return false;\n};\nconst addFormValue = async (form, key, value)=>{\n    if (value === undefined) return;\n    if (value == null) {\n        throw new TypeError(`Received null for \"${key}\"; to pass null in FormData, you must use the string 'null'`);\n    }\n    // TODO: make nested formats configurable\n    if (typeof value === \"string\" || typeof value === \"number\" || typeof value === \"boolean\") {\n        form.append(key, String(value));\n    } else if (isUploadable(value)) {\n        const file = await toFile(value);\n        form.append(key, file);\n    } else if (Array.isArray(value)) {\n        await Promise.all(value.map((entry)=>addFormValue(form, key + \"[]\", entry)));\n    } else if (typeof value === \"object\") {\n        await Promise.all(Object.entries(value).map(([name, prop])=>addFormValue(form, `${key}[${name}]`, prop)));\n    } else {\n        throw new TypeError(`Invalid value given to form, expected a string, number, boolean, object, Array, File or Blob but got ${value} instead`);\n    }\n}; //# sourceMappingURL=uploads.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/node_modules/openai/uploads.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/node_modules/openai/version.mjs":
/*!****************************************************************!*\
  !*** ./node_modules/langchain/node_modules/openai/version.mjs ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   VERSION: () => (/* binding */ VERSION)\n/* harmony export */ });\nconst VERSION = \"4.4.0\"; // x-release-please-version\n //# sourceMappingURL=version.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL25vZGVfbW9kdWxlcy9vcGVuYWkvdmVyc2lvbi5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPLE1BQU1BLFVBQVUsUUFBUSxDQUFDLDJCQUEyQjtDQUMzRCxvQ0FBb0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9xdWlsbC8uL25vZGVfbW9kdWxlcy9sYW5nY2hhaW4vbm9kZV9tb2R1bGVzL29wZW5haS92ZXJzaW9uLm1qcz80MzMyIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBWRVJTSU9OID0gJzQuNC4wJzsgLy8geC1yZWxlYXNlLXBsZWFzZS12ZXJzaW9uXG4vLyMgc291cmNlTWFwcGluZ1VSTD12ZXJzaW9uLm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJWRVJTSU9OIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/node_modules/openai/version.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/langchain/vectorstores/pinecone.js":
/*!*********************************************************!*\
  !*** ./node_modules/langchain/vectorstores/pinecone.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PineconeStore: () => (/* reexport safe */ _dist_vectorstores_pinecone_js__WEBPACK_IMPORTED_MODULE_0__.PineconeStore)\n/* harmony export */ });\n/* harmony import */ var _dist_vectorstores_pinecone_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dist/vectorstores/pinecone.js */ \"(rsc)/./node_modules/langchain/dist/vectorstores/pinecone.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbGFuZ2NoYWluL3ZlY3RvcnN0b3Jlcy9waW5lY29uZS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFnRCIsInNvdXJjZXMiOlsid2VicGFjazovL3F1aWxsLy4vbm9kZV9tb2R1bGVzL2xhbmdjaGFpbi92ZWN0b3JzdG9yZXMvcGluZWNvbmUuanM/MjQ0NSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tICcuLi9kaXN0L3ZlY3RvcnN0b3Jlcy9waW5lY29uZS5qcyciXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/langchain/vectorstores/pinecone.js\n");

/***/ })

};
;